import 'dart:convert';
import 'dart:typed_data';

import 'package:mpcore/mpjs/mpjs.dart' as mpjs;

typedef Array<T> = List<T>;

class IAnyObject {
  mpjs.JsObject? $$context$$;

  IAnyObject({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }
}

class PromisifySuccessResult<T, U> {
  mpjs.JsObject? $$context$$;

  PromisifySuccessResult({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }
}

class ArrayBuffer {
  mpjs.JsObject? $$context$$;

  ArrayBuffer({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  static Future<ArrayBuffer?> fromUint8List(Uint8List data) async {
    return await UniversalMiniProgramApi.uni
        .base64ToArrayBuffer(base64.encode(data));
  }

  Future<Uint8List?> toUint8List() async {
    if ($$context$$ != null) {
      return await $$context$$!.getPropertyValue("");
    }
  }
}

class Uint8ClampedArray {
  mpjs.JsObject? $$context$$;

  Uint8ClampedArray({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }
}

class Float32Array {
  mpjs.JsObject? $$context$$;

  Float32Array({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }
}

class Record<T, U> {
  mpjs.JsObject? $$context$$;

  Record({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }
}

class AccessFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  AccessFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class AccessOption {
  mpjs.JsObject? $$context$$;

  String $path = "";

  Future<String> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  AccessCompleteCallback? $complete;

  Future<AccessCompleteCallback?> get complete async {
    return $complete;
  }

  AccessFailCallback? $fail;

  Future<AccessFailCallback?> get fail async {
    return $fail;
  }

  AccessSuccessCallback? $success;

  Future<AccessSuccessCallback?> get success async {
    return $success;
  }

  AccessOption({this.$$context$$});

  void setValues(
      {String? path,
      AccessCompleteCallback? complete,
      AccessFailCallback? fail,
      AccessSuccessCallback? success}) {
    if (path != null) $path = path;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'path': $path,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => AccessFailCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class AccountInfo {
  mpjs.JsObject? $$context$$;

  MiniProgram $miniProgram = MiniProgram();

  Future<MiniProgram> get miniProgram async {
    return MiniProgram($$context$$: $$context$$?.getProperty('miniProgram'));
  }

  Plugin $plugin = Plugin();

  Future<Plugin> get plugin async {
    return Plugin($$context$$: $$context$$?.getProperty('plugin'));
  }

  AccountInfo({this.$$context$$});

  void setValues({MiniProgram? miniProgram, Plugin? plugin}) {
    if (miniProgram != null) $miniProgram = miniProgram;
    if (plugin != null) $plugin = plugin;
  }

  Map toJson() {
    return {'miniProgram': $miniProgram, 'plugin': $plugin}
      ..removeWhere((key, value) => value == null);
  }
}

class AddArcOption {
  mpjs.JsObject? $$context$$;

  MapPostion $end = MapPostion();

  Future<MapPostion> get end async {
    return MapPostion($$context$$: $$context$$?.getProperty('end'));
  }

  num $id = 0;

  Future<num> get id async {
    return await $$context$$?.getPropertyValue('id') ?? $id;
  }

  MapPostion $start = MapPostion();

  Future<MapPostion> get start async {
    return MapPostion($$context$$: $$context$$?.getProperty('start'));
  }

  num? $angle;

  Future<num?> get angle async {
    return await $$context$$?.getPropertyValue('angle') ?? $angle;
  }

  num? $color;

  Future<num?> get color async {
    return await $$context$$?.getPropertyValue('color') ?? $color;
  }

  AddArcCompleteCallback? $complete;

  Future<AddArcCompleteCallback?> get complete async {
    return $complete;
  }

  AddArcFailCallback? $fail;

  Future<AddArcFailCallback?> get fail async {
    return $fail;
  }

  MapPostion? $pass;

  Future<MapPostion?> get pass async {
    return MapPostion($$context$$: $$context$$?.getProperty('pass'));
  }

  AddArcSuccessCallback? $success;

  Future<AddArcSuccessCallback?> get success async {
    return $success;
  }

  num? $width;

  Future<num?> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  AddArcOption({this.$$context$$});

  void setValues(
      {MapPostion? end,
      num? id,
      MapPostion? start,
      num? angle,
      num? color,
      AddArcCompleteCallback? complete,
      AddArcFailCallback? fail,
      MapPostion? pass,
      AddArcSuccessCallback? success,
      num? width}) {
    if (end != null) $end = end;
    if (id != null) $id = id;
    if (start != null) $start = start;
    if (angle != null) $angle = angle;
    if (color != null) $color = color;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (pass != null) $pass = pass;
    if (success != null) $success = success;
    if (width != null) $width = width;
  }

  Map toJson() {
    return {
      'end': $end,
      'id': $id,
      'start': $start,
      'angle': $angle,
      'color': $color,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'pass': $pass,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'width': $width
    }..removeWhere((key, value) => value == null);
  }
}

class AddCardOption {
  mpjs.JsObject? $$context$$;

  List<AddCardRequestInfo> $cardList = <AddCardRequestInfo>[];

  Future<List<AddCardRequestInfo>> get cardList async {
    return ((await $$context$$?.getPropertyValue('cardList')) as List)
        .map((it) => AddCardRequestInfo($$context$$: it))
        .toList();
  }

  AddCardCompleteCallback? $complete;

  Future<AddCardCompleteCallback?> get complete async {
    return $complete;
  }

  AddCardFailCallback? $fail;

  Future<AddCardFailCallback?> get fail async {
    return $fail;
  }

  AddCardSuccessCallback? $success;

  Future<AddCardSuccessCallback?> get success async {
    return $success;
  }

  AddCardOption({this.$$context$$});

  void setValues(
      {List<AddCardRequestInfo>? cardList,
      AddCardCompleteCallback? complete,
      AddCardFailCallback? fail,
      AddCardSuccessCallback? success}) {
    if (cardList != null) $cardList = cardList;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'cardList': $cardList,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => AddCardSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class AddCardRequestInfo {
  mpjs.JsObject? $$context$$;

  String $cardExt = "";

  Future<String> get cardExt async {
    return await $$context$$?.getPropertyValue('cardExt') ?? $cardExt;
  }

  String $cardId = "";

  Future<String> get cardId async {
    return await $$context$$?.getPropertyValue('cardId') ?? $cardId;
  }

  AddCardRequestInfo({this.$$context$$});

  void setValues({String? cardExt, String? cardId}) {
    if (cardExt != null) $cardExt = cardExt;
    if (cardId != null) $cardId = cardId;
  }

  Map toJson() {
    return {'cardExt': $cardExt, 'cardId': $cardId}
      ..removeWhere((key, value) => value == null);
  }
}

class AddCardResponseInfo {
  mpjs.JsObject? $$context$$;

  String $cardExt = "";

  Future<String> get cardExt async {
    return await $$context$$?.getPropertyValue('cardExt') ?? $cardExt;
  }

  String $cardId = "";

  Future<String> get cardId async {
    return await $$context$$?.getPropertyValue('cardId') ?? $cardId;
  }

  String $code = "";

  Future<String> get code async {
    return await $$context$$?.getPropertyValue('code') ?? $code;
  }

  bool $isSuccess = false;

  Future<bool> get isSuccess async {
    return await $$context$$?.getPropertyValue('isSuccess') ?? $isSuccess;
  }

  AddCardResponseInfo({this.$$context$$});

  void setValues(
      {String? cardExt, String? cardId, String? code, bool? isSuccess}) {
    if (cardExt != null) $cardExt = cardExt;
    if (cardId != null) $cardId = cardId;
    if (code != null) $code = code;
    if (isSuccess != null) $isSuccess = isSuccess;
  }

  Map toJson() {
    return {
      'cardExt': $cardExt,
      'cardId': $cardId,
      'code': $code,
      'isSuccess': $isSuccess
    }..removeWhere((key, value) => value == null);
  }
}

class AddCardSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  List<AddCardResponseInfo> $cardList = <AddCardResponseInfo>[];

  Future<List<AddCardResponseInfo>> get cardList async {
    return ((await $$context$$?.getPropertyValue('cardList')) as List)
        .map((it) => AddCardResponseInfo($$context$$: it))
        .toList();
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  AddCardSuccessCallbackResult({this.$$context$$});

  void setValues({List<AddCardResponseInfo>? cardList, String? errMsg}) {
    if (cardList != null) $cardList = cardList;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'cardList': $cardList, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class AddCustomLayerOption {
  mpjs.JsObject? $$context$$;

  String $layerId = "";

  Future<String> get layerId async {
    return await $$context$$?.getPropertyValue('layerId') ?? $layerId;
  }

  AddCustomLayerCompleteCallback? $complete;

  Future<AddCustomLayerCompleteCallback?> get complete async {
    return $complete;
  }

  AddCustomLayerFailCallback? $fail;

  Future<AddCustomLayerFailCallback?> get fail async {
    return $fail;
  }

  AddCustomLayerSuccessCallback? $success;

  Future<AddCustomLayerSuccessCallback?> get success async {
    return $success;
  }

  AddCustomLayerOption({this.$$context$$});

  void setValues(
      {String? layerId,
      AddCustomLayerCompleteCallback? complete,
      AddCustomLayerFailCallback? fail,
      AddCustomLayerSuccessCallback? success}) {
    if (layerId != null) $layerId = layerId;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'layerId': $layerId,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class AddFileToFavoritesOption {
  mpjs.JsObject? $$context$$;

  String $filePath = "";

  Future<String> get filePath async {
    return await $$context$$?.getPropertyValue('filePath') ?? $filePath;
  }

  AddFileToFavoritesCompleteCallback? $complete;

  Future<AddFileToFavoritesCompleteCallback?> get complete async {
    return $complete;
  }

  AddFileToFavoritesFailCallback? $fail;

  Future<AddFileToFavoritesFailCallback?> get fail async {
    return $fail;
  }

  String? $fileName;

  Future<String?> get fileName async {
    return await $$context$$?.getPropertyValue('fileName') ?? $fileName;
  }

  AddFileToFavoritesSuccessCallback? $success;

  Future<AddFileToFavoritesSuccessCallback?> get success async {
    return $success;
  }

  AddFileToFavoritesOption({this.$$context$$});

  void setValues(
      {String? filePath,
      AddFileToFavoritesCompleteCallback? complete,
      AddFileToFavoritesFailCallback? fail,
      String? fileName,
      AddFileToFavoritesSuccessCallback? success}) {
    if (filePath != null) $filePath = filePath;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (fileName != null) $fileName = fileName;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'filePath': $filePath,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fileName': $fileName,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class AddGroundOverlayOption {
  mpjs.JsObject? $$context$$;

  MapBounds $bounds = MapBounds();

  Future<MapBounds> get bounds async {
    return MapBounds($$context$$: $$context$$?.getProperty('bounds'));
  }

  String $id = "";

  Future<String> get id async {
    return await $$context$$?.getPropertyValue('id') ?? $id;
  }

  String $src = "";

  Future<String> get src async {
    return await $$context$$?.getPropertyValue('src') ?? $src;
  }

  AddGroundOverlayCompleteCallback? $complete;

  Future<AddGroundOverlayCompleteCallback?> get complete async {
    return $complete;
  }

  AddGroundOverlayFailCallback? $fail;

  Future<AddGroundOverlayFailCallback?> get fail async {
    return $fail;
  }

  num? $opacity;

  Future<num?> get opacity async {
    return await $$context$$?.getPropertyValue('opacity') ?? $opacity;
  }

  AddGroundOverlaySuccessCallback? $success;

  Future<AddGroundOverlaySuccessCallback?> get success async {
    return $success;
  }

  bool? $visible;

  Future<bool?> get visible async {
    return await $$context$$?.getPropertyValue('visible') ?? $visible;
  }

  num? $zIndex;

  Future<num?> get zIndex async {
    return await $$context$$?.getPropertyValue('zIndex') ?? $zIndex;
  }

  AddGroundOverlayOption({this.$$context$$});

  void setValues(
      {MapBounds? bounds,
      String? id,
      String? src,
      AddGroundOverlayCompleteCallback? complete,
      AddGroundOverlayFailCallback? fail,
      num? opacity,
      AddGroundOverlaySuccessCallback? success,
      bool? visible,
      num? zIndex}) {
    if (bounds != null) $bounds = bounds;
    if (id != null) $id = id;
    if (src != null) $src = src;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (opacity != null) $opacity = opacity;
    if (success != null) $success = success;
    if (visible != null) $visible = visible;
    if (zIndex != null) $zIndex = zIndex;
  }

  Map toJson() {
    return {
      'bounds': $bounds,
      'id': $id,
      'src': $src,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'opacity': $opacity,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'visible': $visible,
      'zIndex': $zIndex
    }..removeWhere((key, value) => value == null);
  }
}

class AddMarkersOption {
  mpjs.JsObject? $$context$$;

  List<dynamic> $markers = <dynamic>[];

  Future<List<dynamic>> get markers async {
    return await $$context$$?.getPropertyValue('markers') ?? $markers;
  }

  bool? $clear;

  Future<bool?> get clear async {
    return await $$context$$?.getPropertyValue('clear') ?? $clear;
  }

  AddMarkersCompleteCallback? $complete;

  Future<AddMarkersCompleteCallback?> get complete async {
    return $complete;
  }

  AddMarkersFailCallback? $fail;

  Future<AddMarkersFailCallback?> get fail async {
    return $fail;
  }

  AddMarkersSuccessCallback? $success;

  Future<AddMarkersSuccessCallback?> get success async {
    return $success;
  }

  AddMarkersOption({this.$$context$$});

  void setValues(
      {List<dynamic>? markers,
      bool? clear,
      AddMarkersCompleteCallback? complete,
      AddMarkersFailCallback? fail,
      AddMarkersSuccessCallback? success}) {
    if (markers != null) $markers = markers;
    if (clear != null) $clear = clear;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'markers': $markers,
      'clear': $clear,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class AddPhoneCalendarOption {
  mpjs.JsObject? $$context$$;

  num $startTime = 0;

  Future<num> get startTime async {
    return await $$context$$?.getPropertyValue('startTime') ?? $startTime;
  }

  String $title = "";

  Future<String> get title async {
    return await $$context$$?.getPropertyValue('title') ?? $title;
  }

  bool? $alarm;

  Future<bool?> get alarm async {
    return await $$context$$?.getPropertyValue('alarm') ?? $alarm;
  }

  num? $alarmOffset;

  Future<num?> get alarmOffset async {
    return await $$context$$?.getPropertyValue('alarmOffset') ?? $alarmOffset;
  }

  bool? $allDay;

  Future<bool?> get allDay async {
    return await $$context$$?.getPropertyValue('allDay') ?? $allDay;
  }

  AddPhoneCalendarCompleteCallback? $complete;

  Future<AddPhoneCalendarCompleteCallback?> get complete async {
    return $complete;
  }

  String? $description;

  Future<String?> get description async {
    return await $$context$$?.getPropertyValue('description') ?? $description;
  }

  String? $endTime;

  Future<String?> get endTime async {
    return await $$context$$?.getPropertyValue('endTime') ?? $endTime;
  }

  AddPhoneCalendarFailCallback? $fail;

  Future<AddPhoneCalendarFailCallback?> get fail async {
    return $fail;
  }

  String? $location;

  Future<String?> get location async {
    return await $$context$$?.getPropertyValue('location') ?? $location;
  }

  AddPhoneCalendarSuccessCallback? $success;

  Future<AddPhoneCalendarSuccessCallback?> get success async {
    return $success;
  }

  AddPhoneCalendarOption({this.$$context$$});

  void setValues(
      {num? startTime,
      String? title,
      bool? alarm,
      num? alarmOffset,
      bool? allDay,
      AddPhoneCalendarCompleteCallback? complete,
      String? description,
      String? endTime,
      AddPhoneCalendarFailCallback? fail,
      String? location,
      AddPhoneCalendarSuccessCallback? success}) {
    if (startTime != null) $startTime = startTime;
    if (title != null) $title = title;
    if (alarm != null) $alarm = alarm;
    if (alarmOffset != null) $alarmOffset = alarmOffset;
    if (allDay != null) $allDay = allDay;
    if (complete != null) $complete = complete;
    if (description != null) $description = description;
    if (endTime != null) $endTime = endTime;
    if (fail != null) $fail = fail;
    if (location != null) $location = location;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'startTime': $startTime,
      'title': $title,
      'alarm': $alarm,
      'alarmOffset': $alarmOffset,
      'allDay': $allDay,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'description': $description,
      'endTime': $endTime,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'location': $location,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class AddPhoneContactOption {
  mpjs.JsObject? $$context$$;

  String $firstName = "";

  Future<String> get firstName async {
    return await $$context$$?.getPropertyValue('firstName') ?? $firstName;
  }

  String? $addressCity;

  Future<String?> get addressCity async {
    return await $$context$$?.getPropertyValue('addressCity') ?? $addressCity;
  }

  String? $addressCountry;

  Future<String?> get addressCountry async {
    return await $$context$$?.getPropertyValue('addressCountry') ??
        $addressCountry;
  }

  String? $addressPostalCode;

  Future<String?> get addressPostalCode async {
    return await $$context$$?.getPropertyValue('addressPostalCode') ??
        $addressPostalCode;
  }

  String? $addressState;

  Future<String?> get addressState async {
    return await $$context$$?.getPropertyValue('addressState') ?? $addressState;
  }

  String? $addressStreet;

  Future<String?> get addressStreet async {
    return await $$context$$?.getPropertyValue('addressStreet') ??
        $addressStreet;
  }

  AddPhoneContactCompleteCallback? $complete;

  Future<AddPhoneContactCompleteCallback?> get complete async {
    return $complete;
  }

  String? $email;

  Future<String?> get email async {
    return await $$context$$?.getPropertyValue('email') ?? $email;
  }

  AddPhoneContactFailCallback? $fail;

  Future<AddPhoneContactFailCallback?> get fail async {
    return $fail;
  }

  String? $homeAddressCity;

  Future<String?> get homeAddressCity async {
    return await $$context$$?.getPropertyValue('homeAddressCity') ??
        $homeAddressCity;
  }

  String? $homeAddressCountry;

  Future<String?> get homeAddressCountry async {
    return await $$context$$?.getPropertyValue('homeAddressCountry') ??
        $homeAddressCountry;
  }

  String? $homeAddressPostalCode;

  Future<String?> get homeAddressPostalCode async {
    return await $$context$$?.getPropertyValue('homeAddressPostalCode') ??
        $homeAddressPostalCode;
  }

  String? $homeAddressState;

  Future<String?> get homeAddressState async {
    return await $$context$$?.getPropertyValue('homeAddressState') ??
        $homeAddressState;
  }

  String? $homeAddressStreet;

  Future<String?> get homeAddressStreet async {
    return await $$context$$?.getPropertyValue('homeAddressStreet') ??
        $homeAddressStreet;
  }

  String? $homeFaxNumber;

  Future<String?> get homeFaxNumber async {
    return await $$context$$?.getPropertyValue('homeFaxNumber') ??
        $homeFaxNumber;
  }

  String? $homePhoneNumber;

  Future<String?> get homePhoneNumber async {
    return await $$context$$?.getPropertyValue('homePhoneNumber') ??
        $homePhoneNumber;
  }

  String? $hostNumber;

  Future<String?> get hostNumber async {
    return await $$context$$?.getPropertyValue('hostNumber') ?? $hostNumber;
  }

  String? $lastName;

  Future<String?> get lastName async {
    return await $$context$$?.getPropertyValue('lastName') ?? $lastName;
  }

  String? $middleName;

  Future<String?> get middleName async {
    return await $$context$$?.getPropertyValue('middleName') ?? $middleName;
  }

  String? $mobilePhoneNumber;

  Future<String?> get mobilePhoneNumber async {
    return await $$context$$?.getPropertyValue('mobilePhoneNumber') ??
        $mobilePhoneNumber;
  }

  String? $nickName;

  Future<String?> get nickName async {
    return await $$context$$?.getPropertyValue('nickName') ?? $nickName;
  }

  String? $organization;

  Future<String?> get organization async {
    return await $$context$$?.getPropertyValue('organization') ?? $organization;
  }

  String? $photoFilePath;

  Future<String?> get photoFilePath async {
    return await $$context$$?.getPropertyValue('photoFilePath') ??
        $photoFilePath;
  }

  String? $remark;

  Future<String?> get remark async {
    return await $$context$$?.getPropertyValue('remark') ?? $remark;
  }

  AddPhoneContactSuccessCallback? $success;

  Future<AddPhoneContactSuccessCallback?> get success async {
    return $success;
  }

  String? $title;

  Future<String?> get title async {
    return await $$context$$?.getPropertyValue('title') ?? $title;
  }

  String? $url;

  Future<String?> get url async {
    return await $$context$$?.getPropertyValue('url') ?? $url;
  }

  String? $weChatNumber;

  Future<String?> get weChatNumber async {
    return await $$context$$?.getPropertyValue('weChatNumber') ?? $weChatNumber;
  }

  String? $workAddressCity;

  Future<String?> get workAddressCity async {
    return await $$context$$?.getPropertyValue('workAddressCity') ??
        $workAddressCity;
  }

  String? $workAddressCountry;

  Future<String?> get workAddressCountry async {
    return await $$context$$?.getPropertyValue('workAddressCountry') ??
        $workAddressCountry;
  }

  String? $workAddressPostalCode;

  Future<String?> get workAddressPostalCode async {
    return await $$context$$?.getPropertyValue('workAddressPostalCode') ??
        $workAddressPostalCode;
  }

  String? $workAddressState;

  Future<String?> get workAddressState async {
    return await $$context$$?.getPropertyValue('workAddressState') ??
        $workAddressState;
  }

  String? $workAddressStreet;

  Future<String?> get workAddressStreet async {
    return await $$context$$?.getPropertyValue('workAddressStreet') ??
        $workAddressStreet;
  }

  String? $workFaxNumber;

  Future<String?> get workFaxNumber async {
    return await $$context$$?.getPropertyValue('workFaxNumber') ??
        $workFaxNumber;
  }

  String? $workPhoneNumber;

  Future<String?> get workPhoneNumber async {
    return await $$context$$?.getPropertyValue('workPhoneNumber') ??
        $workPhoneNumber;
  }

  AddPhoneContactOption({this.$$context$$});

  void setValues(
      {String? firstName,
      String? addressCity,
      String? addressCountry,
      String? addressPostalCode,
      String? addressState,
      String? addressStreet,
      AddPhoneContactCompleteCallback? complete,
      String? email,
      AddPhoneContactFailCallback? fail,
      String? homeAddressCity,
      String? homeAddressCountry,
      String? homeAddressPostalCode,
      String? homeAddressState,
      String? homeAddressStreet,
      String? homeFaxNumber,
      String? homePhoneNumber,
      String? hostNumber,
      String? lastName,
      String? middleName,
      String? mobilePhoneNumber,
      String? nickName,
      String? organization,
      String? photoFilePath,
      String? remark,
      AddPhoneContactSuccessCallback? success,
      String? title,
      String? url,
      String? weChatNumber,
      String? workAddressCity,
      String? workAddressCountry,
      String? workAddressPostalCode,
      String? workAddressState,
      String? workAddressStreet,
      String? workFaxNumber,
      String? workPhoneNumber}) {
    if (firstName != null) $firstName = firstName;
    if (addressCity != null) $addressCity = addressCity;
    if (addressCountry != null) $addressCountry = addressCountry;
    if (addressPostalCode != null) $addressPostalCode = addressPostalCode;
    if (addressState != null) $addressState = addressState;
    if (addressStreet != null) $addressStreet = addressStreet;
    if (complete != null) $complete = complete;
    if (email != null) $email = email;
    if (fail != null) $fail = fail;
    if (homeAddressCity != null) $homeAddressCity = homeAddressCity;
    if (homeAddressCountry != null) $homeAddressCountry = homeAddressCountry;
    if (homeAddressPostalCode != null)
      $homeAddressPostalCode = homeAddressPostalCode;
    if (homeAddressState != null) $homeAddressState = homeAddressState;
    if (homeAddressStreet != null) $homeAddressStreet = homeAddressStreet;
    if (homeFaxNumber != null) $homeFaxNumber = homeFaxNumber;
    if (homePhoneNumber != null) $homePhoneNumber = homePhoneNumber;
    if (hostNumber != null) $hostNumber = hostNumber;
    if (lastName != null) $lastName = lastName;
    if (middleName != null) $middleName = middleName;
    if (mobilePhoneNumber != null) $mobilePhoneNumber = mobilePhoneNumber;
    if (nickName != null) $nickName = nickName;
    if (organization != null) $organization = organization;
    if (photoFilePath != null) $photoFilePath = photoFilePath;
    if (remark != null) $remark = remark;
    if (success != null) $success = success;
    if (title != null) $title = title;
    if (url != null) $url = url;
    if (weChatNumber != null) $weChatNumber = weChatNumber;
    if (workAddressCity != null) $workAddressCity = workAddressCity;
    if (workAddressCountry != null) $workAddressCountry = workAddressCountry;
    if (workAddressPostalCode != null)
      $workAddressPostalCode = workAddressPostalCode;
    if (workAddressState != null) $workAddressState = workAddressState;
    if (workAddressStreet != null) $workAddressStreet = workAddressStreet;
    if (workFaxNumber != null) $workFaxNumber = workFaxNumber;
    if (workPhoneNumber != null) $workPhoneNumber = workPhoneNumber;
  }

  Map toJson() {
    return {
      'firstName': $firstName,
      'addressCity': $addressCity,
      'addressCountry': $addressCountry,
      'addressPostalCode': $addressPostalCode,
      'addressState': $addressState,
      'addressStreet': $addressStreet,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'email': $email,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'homeAddressCity': $homeAddressCity,
      'homeAddressCountry': $homeAddressCountry,
      'homeAddressPostalCode': $homeAddressPostalCode,
      'homeAddressState': $homeAddressState,
      'homeAddressStreet': $homeAddressStreet,
      'homeFaxNumber': $homeFaxNumber,
      'homePhoneNumber': $homePhoneNumber,
      'hostNumber': $hostNumber,
      'lastName': $lastName,
      'middleName': $middleName,
      'mobilePhoneNumber': $mobilePhoneNumber,
      'nickName': $nickName,
      'organization': $organization,
      'photoFilePath': $photoFilePath,
      'remark': $remark,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'title': $title,
      'url': $url,
      'weChatNumber': $weChatNumber,
      'workAddressCity': $workAddressCity,
      'workAddressCountry': $workAddressCountry,
      'workAddressPostalCode': $workAddressPostalCode,
      'workAddressState': $workAddressState,
      'workAddressStreet': $workAddressStreet,
      'workFaxNumber': $workFaxNumber,
      'workPhoneNumber': $workPhoneNumber
    }..removeWhere((key, value) => value == null);
  }
}

class AddPhoneRepeatCalendarOption {
  mpjs.JsObject? $$context$$;

  num $startTime = 0;

  Future<num> get startTime async {
    return await $$context$$?.getPropertyValue('startTime') ?? $startTime;
  }

  String $title = "";

  Future<String> get title async {
    return await $$context$$?.getPropertyValue('title') ?? $title;
  }

  bool? $alarm;

  Future<bool?> get alarm async {
    return await $$context$$?.getPropertyValue('alarm') ?? $alarm;
  }

  num? $alarmOffset;

  Future<num?> get alarmOffset async {
    return await $$context$$?.getPropertyValue('alarmOffset') ?? $alarmOffset;
  }

  bool? $allDay;

  Future<bool?> get allDay async {
    return await $$context$$?.getPropertyValue('allDay') ?? $allDay;
  }

  AddPhoneRepeatCalendarCompleteCallback? $complete;

  Future<AddPhoneRepeatCalendarCompleteCallback?> get complete async {
    return $complete;
  }

  String? $description;

  Future<String?> get description async {
    return await $$context$$?.getPropertyValue('description') ?? $description;
  }

  String? $endTime;

  Future<String?> get endTime async {
    return await $$context$$?.getPropertyValue('endTime') ?? $endTime;
  }

  AddPhoneRepeatCalendarFailCallback? $fail;

  Future<AddPhoneRepeatCalendarFailCallback?> get fail async {
    return $fail;
  }

  String? $location;

  Future<String?> get location async {
    return await $$context$$?.getPropertyValue('location') ?? $location;
  }

  num? $repeatEndTime;

  Future<num?> get repeatEndTime async {
    return await $$context$$?.getPropertyValue('repeatEndTime') ??
        $repeatEndTime;
  }

  dynamic $repeatInterval;

  Future<dynamic> get repeatInterval async {
    return await $$context$$?.getPropertyValue('repeatInterval') ??
        $repeatInterval;
  }

  AddPhoneRepeatCalendarSuccessCallback? $success;

  Future<AddPhoneRepeatCalendarSuccessCallback?> get success async {
    return $success;
  }

  AddPhoneRepeatCalendarOption({this.$$context$$});

  void setValues(
      {num? startTime,
      String? title,
      bool? alarm,
      num? alarmOffset,
      bool? allDay,
      AddPhoneRepeatCalendarCompleteCallback? complete,
      String? description,
      String? endTime,
      AddPhoneRepeatCalendarFailCallback? fail,
      String? location,
      num? repeatEndTime,
      dynamic repeatInterval,
      AddPhoneRepeatCalendarSuccessCallback? success}) {
    if (startTime != null) $startTime = startTime;
    if (title != null) $title = title;
    if (alarm != null) $alarm = alarm;
    if (alarmOffset != null) $alarmOffset = alarmOffset;
    if (allDay != null) $allDay = allDay;
    if (complete != null) $complete = complete;
    if (description != null) $description = description;
    if (endTime != null) $endTime = endTime;
    if (fail != null) $fail = fail;
    if (location != null) $location = location;
    if (repeatEndTime != null) $repeatEndTime = repeatEndTime;
    if (repeatInterval != null) $repeatInterval = repeatInterval;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'startTime': $startTime,
      'title': $title,
      'alarm': $alarm,
      'alarmOffset': $alarmOffset,
      'allDay': $allDay,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'description': $description,
      'endTime': $endTime,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'location': $location,
      'repeatEndTime': $repeatEndTime,
      'repeatInterval': $repeatInterval,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class AddServiceOption {
  mpjs.JsObject? $$context$$;

  BLEPeripheralService $service = BLEPeripheralService();

  Future<BLEPeripheralService> get service async {
    return BLEPeripheralService(
        $$context$$: $$context$$?.getProperty('service'));
  }

  AddServiceCompleteCallback? $complete;

  Future<AddServiceCompleteCallback?> get complete async {
    return $complete;
  }

  AddServiceFailCallback? $fail;

  Future<AddServiceFailCallback?> get fail async {
    return $fail;
  }

  AddServiceSuccessCallback? $success;

  Future<AddServiceSuccessCallback?> get success async {
    return $success;
  }

  AddServiceOption({this.$$context$$});

  void setValues(
      {BLEPeripheralService? service,
      AddServiceCompleteCallback? complete,
      AddServiceFailCallback? fail,
      AddServiceSuccessCallback? success}) {
    if (service != null) $service = service;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'service': $service,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class AddVideoToFavoritesOption {
  mpjs.JsObject? $$context$$;

  String $videoPath = "";

  Future<String> get videoPath async {
    return await $$context$$?.getPropertyValue('videoPath') ?? $videoPath;
  }

  AddVideoToFavoritesCompleteCallback? $complete;

  Future<AddVideoToFavoritesCompleteCallback?> get complete async {
    return $complete;
  }

  AddVideoToFavoritesFailCallback? $fail;

  Future<AddVideoToFavoritesFailCallback?> get fail async {
    return $fail;
  }

  AddVideoToFavoritesSuccessCallback? $success;

  Future<AddVideoToFavoritesSuccessCallback?> get success async {
    return $success;
  }

  String? $thumbPath;

  Future<String?> get thumbPath async {
    return await $$context$$?.getPropertyValue('thumbPath') ?? $thumbPath;
  }

  AddVideoToFavoritesOption({this.$$context$$});

  void setValues(
      {String? videoPath,
      AddVideoToFavoritesCompleteCallback? complete,
      AddVideoToFavoritesFailCallback? fail,
      AddVideoToFavoritesSuccessCallback? success,
      String? thumbPath}) {
    if (videoPath != null) $videoPath = videoPath;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
    if (thumbPath != null) $thumbPath = thumbPath;
  }

  Map toJson() {
    return {
      'videoPath': $videoPath,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'thumbPath': $thumbPath
    }..removeWhere((key, value) => value == null);
  }
}

class AddVisualLayerOption {
  mpjs.JsObject? $$context$$;

  String $layerId = "";

  Future<String> get layerId async {
    return await $$context$$?.getPropertyValue('layerId') ?? $layerId;
  }

  AddVisualLayerCompleteCallback? $complete;

  Future<AddVisualLayerCompleteCallback?> get complete async {
    return $complete;
  }

  AddVisualLayerFailCallback? $fail;

  Future<AddVisualLayerFailCallback?> get fail async {
    return $fail;
  }

  num? $interval;

  Future<num?> get interval async {
    return await $$context$$?.getPropertyValue('interval') ?? $interval;
  }

  num? $opacity;

  Future<num?> get opacity async {
    return await $$context$$?.getPropertyValue('opacity') ?? $opacity;
  }

  AddVisualLayerSuccessCallback? $success;

  Future<AddVisualLayerSuccessCallback?> get success async {
    return $success;
  }

  num? $zIndex;

  Future<num?> get zIndex async {
    return await $$context$$?.getPropertyValue('zIndex') ?? $zIndex;
  }

  AddVisualLayerOption({this.$$context$$});

  void setValues(
      {String? layerId,
      AddVisualLayerCompleteCallback? complete,
      AddVisualLayerFailCallback? fail,
      num? interval,
      num? opacity,
      AddVisualLayerSuccessCallback? success,
      num? zIndex}) {
    if (layerId != null) $layerId = layerId;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (interval != null) $interval = interval;
    if (opacity != null) $opacity = opacity;
    if (success != null) $success = success;
    if (zIndex != null) $zIndex = zIndex;
  }

  Map toJson() {
    return {
      'layerId': $layerId,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'interval': $interval,
      'opacity': $opacity,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'zIndex': $zIndex
    }..removeWhere((key, value) => value == null);
  }
}

class AdvertiseReqObj {
  mpjs.JsObject? $$context$$;

  BeaconInfoObj? $beacon;

  Future<BeaconInfoObj?> get beacon async {
    return BeaconInfoObj($$context$$: $$context$$?.getProperty('beacon'));
  }

  bool? $connectable;

  Future<bool?> get connectable async {
    return await $$context$$?.getPropertyValue('connectable') ?? $connectable;
  }

  String? $deviceName;

  Future<String?> get deviceName async {
    return await $$context$$?.getPropertyValue('deviceName') ?? $deviceName;
  }

  List<ManufacturerData>? $manufacturerData;

  Future<List<ManufacturerData>?> get manufacturerData async {
    return ((await $$context$$?.getPropertyValue('manufacturerData')) as List)
        .map((it) => ManufacturerData($$context$$: it))
        .toList();
  }

  List<String>? $serviceUuids;

  Future<List<String>?> get serviceUuids async {
    return await $$context$$?.getPropertyValue('serviceUuids') ?? $serviceUuids;
  }

  AdvertiseReqObj({this.$$context$$});

  void setValues(
      {BeaconInfoObj? beacon,
      bool? connectable,
      String? deviceName,
      List<ManufacturerData>? manufacturerData,
      List<String>? serviceUuids}) {
    if (beacon != null) $beacon = beacon;
    if (connectable != null) $connectable = connectable;
    if (deviceName != null) $deviceName = deviceName;
    if (manufacturerData != null) $manufacturerData = manufacturerData;
    if (serviceUuids != null) $serviceUuids = serviceUuids;
  }

  Map toJson() {
    return {
      'beacon': $beacon,
      'connectable': $connectable,
      'deviceName': $deviceName,
      'manufacturerData': $manufacturerData,
      'serviceUuids': $serviceUuids
    }..removeWhere((key, value) => value == null);
  }
}

class AnimationExportResult {
  mpjs.JsObject? $$context$$;

  List<IAnyObject> $actions = <IAnyObject>[];

  Future<List<IAnyObject>> get actions async {
    return ((await $$context$$?.getPropertyValue('actions')) as List)
        .map((it) => IAnyObject($$context$$: it))
        .toList();
  }

  AnimationExportResult({this.$$context$$});

  void setValues({List<IAnyObject>? actions}) {
    if (actions != null) $actions = actions;
  }

  Map toJson() {
    return {'actions': $actions}..removeWhere((key, value) => value == null);
  }
}

class AnimationOption {
  mpjs.JsObject? $$context$$;

  num? $duration;

  Future<num?> get duration async {
    return await $$context$$?.getPropertyValue('duration') ?? $duration;
  }

  dynamic $timingFunc;

  Future<dynamic> get timingFunc async {
    return await $$context$$?.getPropertyValue('timingFunc') ?? $timingFunc;
  }

  AnimationOption({this.$$context$$});

  void setValues({num? duration, dynamic timingFunc}) {
    if (duration != null) $duration = duration;
    if (timingFunc != null) $timingFunc = timingFunc;
  }

  Map toJson() {
    return {'duration': $duration, 'timingFunc': $timingFunc}
      ..removeWhere((key, value) => value == null);
  }
}

class AppAuthorizeSetting {
  mpjs.JsObject? $$context$$;

  dynamic $albumAuthorized;

  Future<dynamic> get albumAuthorized async {
    return await $$context$$?.getPropertyValue('albumAuthorized') ??
        $albumAuthorized;
  }

  dynamic $bluetoothAuthorized;

  Future<dynamic> get bluetoothAuthorized async {
    return await $$context$$?.getPropertyValue('bluetoothAuthorized') ??
        $bluetoothAuthorized;
  }

  dynamic $cameraAuthorized;

  Future<dynamic> get cameraAuthorized async {
    return await $$context$$?.getPropertyValue('cameraAuthorized') ??
        $cameraAuthorized;
  }

  dynamic $locationAuthorized;

  Future<dynamic> get locationAuthorized async {
    return await $$context$$?.getPropertyValue('locationAuthorized') ??
        $locationAuthorized;
  }

  bool $locationReducedAccuracy = false;

  Future<bool> get locationReducedAccuracy async {
    return await $$context$$?.getPropertyValue('locationReducedAccuracy') ??
        $locationReducedAccuracy;
  }

  dynamic $microphoneAuthorized;

  Future<dynamic> get microphoneAuthorized async {
    return await $$context$$?.getPropertyValue('microphoneAuthorized') ??
        $microphoneAuthorized;
  }

  dynamic $notificationAlertAuthorized;

  Future<dynamic> get notificationAlertAuthorized async {
    return await $$context$$?.getPropertyValue('notificationAlertAuthorized') ??
        $notificationAlertAuthorized;
  }

  dynamic $notificationAuthorized;

  Future<dynamic> get notificationAuthorized async {
    return await $$context$$?.getPropertyValue('notificationAuthorized') ??
        $notificationAuthorized;
  }

  dynamic $notificationBadgeAuthorized;

  Future<dynamic> get notificationBadgeAuthorized async {
    return await $$context$$?.getPropertyValue('notificationBadgeAuthorized') ??
        $notificationBadgeAuthorized;
  }

  dynamic $notificationSoundAuthorized;

  Future<dynamic> get notificationSoundAuthorized async {
    return await $$context$$?.getPropertyValue('notificationSoundAuthorized') ??
        $notificationSoundAuthorized;
  }

  dynamic $phoneCalendarAuthorized;

  Future<dynamic> get phoneCalendarAuthorized async {
    return await $$context$$?.getPropertyValue('phoneCalendarAuthorized') ??
        $phoneCalendarAuthorized;
  }

  AppAuthorizeSetting({this.$$context$$});

  void setValues(
      {dynamic albumAuthorized,
      dynamic bluetoothAuthorized,
      dynamic cameraAuthorized,
      dynamic locationAuthorized,
      bool? locationReducedAccuracy,
      dynamic microphoneAuthorized,
      dynamic notificationAlertAuthorized,
      dynamic notificationAuthorized,
      dynamic notificationBadgeAuthorized,
      dynamic notificationSoundAuthorized,
      dynamic phoneCalendarAuthorized}) {
    if (albumAuthorized != null) $albumAuthorized = albumAuthorized;
    if (bluetoothAuthorized != null) $bluetoothAuthorized = bluetoothAuthorized;
    if (cameraAuthorized != null) $cameraAuthorized = cameraAuthorized;
    if (locationAuthorized != null) $locationAuthorized = locationAuthorized;
    if (locationReducedAccuracy != null)
      $locationReducedAccuracy = locationReducedAccuracy;
    if (microphoneAuthorized != null)
      $microphoneAuthorized = microphoneAuthorized;
    if (notificationAlertAuthorized != null)
      $notificationAlertAuthorized = notificationAlertAuthorized;
    if (notificationAuthorized != null)
      $notificationAuthorized = notificationAuthorized;
    if (notificationBadgeAuthorized != null)
      $notificationBadgeAuthorized = notificationBadgeAuthorized;
    if (notificationSoundAuthorized != null)
      $notificationSoundAuthorized = notificationSoundAuthorized;
    if (phoneCalendarAuthorized != null)
      $phoneCalendarAuthorized = phoneCalendarAuthorized;
  }

  Map toJson() {
    return {
      'albumAuthorized': $albumAuthorized,
      'bluetoothAuthorized': $bluetoothAuthorized,
      'cameraAuthorized': $cameraAuthorized,
      'locationAuthorized': $locationAuthorized,
      'locationReducedAccuracy': $locationReducedAccuracy,
      'microphoneAuthorized': $microphoneAuthorized,
      'notificationAlertAuthorized': $notificationAlertAuthorized,
      'notificationAuthorized': $notificationAuthorized,
      'notificationBadgeAuthorized': $notificationBadgeAuthorized,
      'notificationSoundAuthorized': $notificationSoundAuthorized,
      'phoneCalendarAuthorized': $phoneCalendarAuthorized
    }..removeWhere((key, value) => value == null);
  }
}

class AppBaseInfo {
  mpjs.JsObject? $$context$$;

  String $SDKVersion = "";

  Future<String> get SDKVersion async {
    return await $$context$$?.getPropertyValue('SDKVersion') ?? $SDKVersion;
  }

  bool $enableDebug = false;

  Future<bool> get enableDebug async {
    return await $$context$$?.getPropertyValue('enableDebug') ?? $enableDebug;
  }

  AppBaseInfoHost $host = AppBaseInfoHost();

  Future<AppBaseInfoHost> get host async {
    return AppBaseInfoHost($$context$$: $$context$$?.getProperty('host'));
  }

  String $language = "";

  Future<String> get language async {
    return await $$context$$?.getPropertyValue('language') ?? $language;
  }

  String $version = "";

  Future<String> get version async {
    return await $$context$$?.getPropertyValue('version') ?? $version;
  }

  dynamic $theme;

  Future<dynamic> get theme async {
    return await $$context$$?.getPropertyValue('theme') ?? $theme;
  }

  AppBaseInfo({this.$$context$$});

  void setValues(
      {String? SDKVersion,
      bool? enableDebug,
      AppBaseInfoHost? host,
      String? language,
      String? version,
      dynamic theme}) {
    if (SDKVersion != null) $SDKVersion = SDKVersion;
    if (enableDebug != null) $enableDebug = enableDebug;
    if (host != null) $host = host;
    if (language != null) $language = language;
    if (version != null) $version = version;
    if (theme != null) $theme = theme;
  }

  Map toJson() {
    return {
      'SDKVersion': $SDKVersion,
      'enableDebug': $enableDebug,
      'host': $host,
      'language': $language,
      'version': $version,
      'theme': $theme
    }..removeWhere((key, value) => value == null);
  }
}

class AppBaseInfoHost {
  mpjs.JsObject? $$context$$;

  String $appId = "";

  Future<String> get appId async {
    return await $$context$$?.getPropertyValue('appId') ?? $appId;
  }

  AppBaseInfoHost({this.$$context$$});

  void setValues({String? appId}) {
    if (appId != null) $appId = appId;
  }

  Map toJson() {
    return {'appId': $appId}..removeWhere((key, value) => value == null);
  }
}

class AppendFileFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  AppendFileFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class AppendFileOption {
  mpjs.JsObject? $$context$$;

  dynamic $data;

  Future<dynamic> get data async {
    return await $$context$$?.getPropertyValue('data') ?? $data;
  }

  String $filePath = "";

  Future<String> get filePath async {
    return await $$context$$?.getPropertyValue('filePath') ?? $filePath;
  }

  AppendFileCompleteCallback? $complete;

  Future<AppendFileCompleteCallback?> get complete async {
    return $complete;
  }

  dynamic $encoding;

  Future<dynamic> get encoding async {
    return await $$context$$?.getPropertyValue('encoding') ?? $encoding;
  }

  AppendFileFailCallback? $fail;

  Future<AppendFileFailCallback?> get fail async {
    return $fail;
  }

  AppendFileSuccessCallback? $success;

  Future<AppendFileSuccessCallback?> get success async {
    return $success;
  }

  AppendFileOption({this.$$context$$});

  void setValues(
      {dynamic data,
      String? filePath,
      AppendFileCompleteCallback? complete,
      dynamic encoding,
      AppendFileFailCallback? fail,
      AppendFileSuccessCallback? success}) {
    if (data != null) $data = data;
    if (filePath != null) $filePath = filePath;
    if (complete != null) $complete = complete;
    if (encoding != null) $encoding = encoding;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'data': $data,
      'filePath': $filePath,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'encoding': $encoding,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => AppendFileFailCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ApplyBlusherStickMakeupOption {
  mpjs.JsObject? $$context$$;

  num $alpha = 0;

  Future<num> get alpha async {
    return await $$context$$?.getPropertyValue('alpha') ?? $alpha;
  }

  String $blendMode = "";

  Future<String> get blendMode async {
    return await $$context$$?.getPropertyValue('blendMode') ?? $blendMode;
  }

  String $path = "";

  Future<String> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  ApplyBlusherStickMakeupCompleteCallback? $complete;

  Future<ApplyBlusherStickMakeupCompleteCallback?> get complete async {
    return $complete;
  }

  ApplyBlusherStickMakeupFailCallback? $fail;

  Future<ApplyBlusherStickMakeupFailCallback?> get fail async {
    return $fail;
  }

  ApplyBlusherStickMakeupSuccessCallback? $success;

  Future<ApplyBlusherStickMakeupSuccessCallback?> get success async {
    return $success;
  }

  ApplyBlusherStickMakeupOption({this.$$context$$});

  void setValues(
      {num? alpha,
      String? blendMode,
      String? path,
      ApplyBlusherStickMakeupCompleteCallback? complete,
      ApplyBlusherStickMakeupFailCallback? fail,
      ApplyBlusherStickMakeupSuccessCallback? success}) {
    if (alpha != null) $alpha = alpha;
    if (blendMode != null) $blendMode = blendMode;
    if (path != null) $path = path;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'alpha': $alpha,
      'blendMode': $blendMode,
      'path': $path,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ApplyEyeBrowMakeupOption {
  mpjs.JsObject? $$context$$;

  num $alpha = 0;

  Future<num> get alpha async {
    return await $$context$$?.getPropertyValue('alpha') ?? $alpha;
  }

  String $blendMode = "";

  Future<String> get blendMode async {
    return await $$context$$?.getPropertyValue('blendMode') ?? $blendMode;
  }

  String $path = "";

  Future<String> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  num $shrinkRate = 0;

  Future<num> get shrinkRate async {
    return await $$context$$?.getPropertyValue('shrinkRate') ?? $shrinkRate;
  }

  ApplyEyeBrowMakeupCompleteCallback? $complete;

  Future<ApplyEyeBrowMakeupCompleteCallback?> get complete async {
    return $complete;
  }

  ApplyEyeBrowMakeupFailCallback? $fail;

  Future<ApplyEyeBrowMakeupFailCallback?> get fail async {
    return $fail;
  }

  ApplyEyeBrowMakeupSuccessCallback? $success;

  Future<ApplyEyeBrowMakeupSuccessCallback?> get success async {
    return $success;
  }

  ApplyEyeBrowMakeupOption({this.$$context$$});

  void setValues(
      {num? alpha,
      String? blendMode,
      String? path,
      num? shrinkRate,
      ApplyEyeBrowMakeupCompleteCallback? complete,
      ApplyEyeBrowMakeupFailCallback? fail,
      ApplyEyeBrowMakeupSuccessCallback? success}) {
    if (alpha != null) $alpha = alpha;
    if (blendMode != null) $blendMode = blendMode;
    if (path != null) $path = path;
    if (shrinkRate != null) $shrinkRate = shrinkRate;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'alpha': $alpha,
      'blendMode': $blendMode,
      'path': $path,
      'shrinkRate': $shrinkRate,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ApplyEyeShadowMakeupOption {
  mpjs.JsObject? $$context$$;

  num $alpha = 0;

  Future<num> get alpha async {
    return await $$context$$?.getPropertyValue('alpha') ?? $alpha;
  }

  String $blendMode = "";

  Future<String> get blendMode async {
    return await $$context$$?.getPropertyValue('blendMode') ?? $blendMode;
  }

  String $path = "";

  Future<String> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  ApplyEyeShadowMakeupCompleteCallback? $complete;

  Future<ApplyEyeShadowMakeupCompleteCallback?> get complete async {
    return $complete;
  }

  ApplyEyeShadowMakeupFailCallback? $fail;

  Future<ApplyEyeShadowMakeupFailCallback?> get fail async {
    return $fail;
  }

  String? $shimmerPosition;

  Future<String?> get shimmerPosition async {
    return await $$context$$?.getPropertyValue('shimmerPosition') ??
        $shimmerPosition;
  }

  String? $shimmerPositionMD5;

  Future<String?> get shimmerPositionMD5 async {
    return await $$context$$?.getPropertyValue('shimmerPositionMD5') ??
        $shimmerPositionMD5;
  }

  ApplyEyeShadowMakeupSuccessCallback? $success;

  Future<ApplyEyeShadowMakeupSuccessCallback?> get success async {
    return $success;
  }

  ApplyEyeShadowMakeupOption({this.$$context$$});

  void setValues(
      {num? alpha,
      String? blendMode,
      String? path,
      ApplyEyeShadowMakeupCompleteCallback? complete,
      ApplyEyeShadowMakeupFailCallback? fail,
      String? shimmerPosition,
      String? shimmerPositionMD5,
      ApplyEyeShadowMakeupSuccessCallback? success}) {
    if (alpha != null) $alpha = alpha;
    if (blendMode != null) $blendMode = blendMode;
    if (path != null) $path = path;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (shimmerPosition != null) $shimmerPosition = shimmerPosition;
    if (shimmerPositionMD5 != null) $shimmerPositionMD5 = shimmerPositionMD5;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'alpha': $alpha,
      'blendMode': $blendMode,
      'path': $path,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'shimmerPosition': $shimmerPosition,
      'shimmerPositionMD5': $shimmerPositionMD5,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ApplyFaceContourMakeupOption {
  mpjs.JsObject? $$context$$;

  num $alpha = 0;

  Future<num> get alpha async {
    return await $$context$$?.getPropertyValue('alpha') ?? $alpha;
  }

  String $path = "";

  Future<String> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  ApplyFaceContourMakeupCompleteCallback? $complete;

  Future<ApplyFaceContourMakeupCompleteCallback?> get complete async {
    return $complete;
  }

  ApplyFaceContourMakeupFailCallback? $fail;

  Future<ApplyFaceContourMakeupFailCallback?> get fail async {
    return $fail;
  }

  ApplyFaceContourMakeupSuccessCallback? $success;

  Future<ApplyFaceContourMakeupSuccessCallback?> get success async {
    return $success;
  }

  ApplyFaceContourMakeupOption({this.$$context$$});

  void setValues(
      {num? alpha,
      String? path,
      ApplyFaceContourMakeupCompleteCallback? complete,
      ApplyFaceContourMakeupFailCallback? fail,
      ApplyFaceContourMakeupSuccessCallback? success}) {
    if (alpha != null) $alpha = alpha;
    if (path != null) $path = path;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'alpha': $alpha,
      'path': $path,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ApplyFilterOption {
  mpjs.JsObject? $$context$$;

  num $alpha = 0;

  Future<num> get alpha async {
    return await $$context$$?.getPropertyValue('alpha') ?? $alpha;
  }

  String $path = "";

  Future<String> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  ApplyFilterCompleteCallback? $complete;

  Future<ApplyFilterCompleteCallback?> get complete async {
    return $complete;
  }

  ApplyFilterFailCallback? $fail;

  Future<ApplyFilterFailCallback?> get fail async {
    return $fail;
  }

  String? $md5;

  Future<String?> get md5 async {
    return await $$context$$?.getPropertyValue('md5') ?? $md5;
  }

  ApplyFilterSuccessCallback? $success;

  Future<ApplyFilterSuccessCallback?> get success async {
    return $success;
  }

  ApplyFilterOption({this.$$context$$});

  void setValues(
      {num? alpha,
      String? path,
      ApplyFilterCompleteCallback? complete,
      ApplyFilterFailCallback? fail,
      String? md5,
      ApplyFilterSuccessCallback? success}) {
    if (alpha != null) $alpha = alpha;
    if (path != null) $path = path;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (md5 != null) $md5 = md5;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'alpha': $alpha,
      'path': $path,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'md5': $md5,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ApplyLipStickMakeupOption {
  mpjs.JsObject? $$context$$;

  num $alpha = 0;

  Future<num> get alpha async {
    return await $$context$$?.getPropertyValue('alpha') ?? $alpha;
  }

  String $blendMode = "";

  Future<String> get blendMode async {
    return await $$context$$?.getPropertyValue('blendMode') ?? $blendMode;
  }

  String $faceModel = "";

  Future<String> get faceModel async {
    return await $$context$$?.getPropertyValue('faceModel') ?? $faceModel;
  }

  String $path = "";

  Future<String> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  String $shimmerPath = "";

  Future<String> get shimmerPath async {
    return await $$context$$?.getPropertyValue('shimmerPath') ?? $shimmerPath;
  }

  String $shimmerType = "";

  Future<String> get shimmerType async {
    return await $$context$$?.getPropertyValue('shimmerType') ?? $shimmerType;
  }

  ApplyLipStickMakeupCompleteCallback? $complete;

  Future<ApplyLipStickMakeupCompleteCallback?> get complete async {
    return $complete;
  }

  ApplyLipStickMakeupFailCallback? $fail;

  Future<ApplyLipStickMakeupFailCallback?> get fail async {
    return $fail;
  }

  ApplyLipStickMakeupSuccessCallback? $success;

  Future<ApplyLipStickMakeupSuccessCallback?> get success async {
    return $success;
  }

  ApplyLipStickMakeupOption({this.$$context$$});

  void setValues(
      {num? alpha,
      String? blendMode,
      String? faceModel,
      String? path,
      String? shimmerPath,
      String? shimmerType,
      ApplyLipStickMakeupCompleteCallback? complete,
      ApplyLipStickMakeupFailCallback? fail,
      ApplyLipStickMakeupSuccessCallback? success}) {
    if (alpha != null) $alpha = alpha;
    if (blendMode != null) $blendMode = blendMode;
    if (faceModel != null) $faceModel = faceModel;
    if (path != null) $path = path;
    if (shimmerPath != null) $shimmerPath = shimmerPath;
    if (shimmerType != null) $shimmerType = shimmerType;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'alpha': $alpha,
      'blendMode': $blendMode,
      'faceModel': $faceModel,
      'path': $path,
      'shimmerPath': $shimmerPath,
      'shimmerType': $shimmerType,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ApplyStickerOption {
  mpjs.JsObject? $$context$$;

  List<Sticker> $stickers = <Sticker>[];

  Future<List<Sticker>> get stickers async {
    return ((await $$context$$?.getPropertyValue('stickers')) as List)
        .map((it) => Sticker($$context$$: it))
        .toList();
  }

  String $type = "";

  Future<String> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  ApplyStickerCompleteCallback? $complete;

  Future<ApplyStickerCompleteCallback?> get complete async {
    return $complete;
  }

  ApplyStickerFailCallback? $fail;

  Future<ApplyStickerFailCallback?> get fail async {
    return $fail;
  }

  ApplyStickerSuccessCallback? $success;

  Future<ApplyStickerSuccessCallback?> get success async {
    return $success;
  }

  IAnyObject? $templateTransSet;

  Future<IAnyObject?> get templateTransSet async {
    return IAnyObject(
        $$context$$: $$context$$?.getProperty('templateTransSet'));
  }

  ApplyStickerOption({this.$$context$$});

  void setValues(
      {List<Sticker>? stickers,
      String? type,
      ApplyStickerCompleteCallback? complete,
      ApplyStickerFailCallback? fail,
      ApplyStickerSuccessCallback? success,
      IAnyObject? templateTransSet}) {
    if (stickers != null) $stickers = stickers;
    if (type != null) $type = type;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
    if (templateTransSet != null) $templateTransSet = templateTransSet;
  }

  Map toJson() {
    return {
      'stickers': $stickers,
      'type': $type,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'templateTransSet': $templateTransSet
    }..removeWhere((key, value) => value == null);
  }
}

class Asset {
  mpjs.JsObject? $$context$$;

  String $src = "";

  Future<String> get src async {
    return await $$context$$?.getPropertyValue('src') ?? $src;
  }

  dynamic $type;

  Future<dynamic> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  Asset({this.$$context$$});

  void setValues({String? src, dynamic type}) {
    if (src != null) $src = src;
    if (type != null) $type = type;
  }

  Map toJson() {
    return {'src': $src, 'type': $type}
      ..removeWhere((key, value) => value == null);
  }
}

class AudioBuffer {
  mpjs.JsObject? $$context$$;

  num $duration = 0;

  Future<num> get duration async {
    return await $$context$$?.getPropertyValue('duration') ?? $duration;
  }

  num $length = 0;

  Future<num> get length async {
    return await $$context$$?.getPropertyValue('length') ?? $length;
  }

  num $numberOfChannels = 0;

  Future<num> get numberOfChannels async {
    return await $$context$$?.getPropertyValue('numberOfChannels') ??
        $numberOfChannels;
  }

  num $sampleRate = 0;

  Future<num> get sampleRate async {
    return await $$context$$?.getPropertyValue('sampleRate') ?? $sampleRate;
  }

  AudioBuffer({this.$$context$$});

  void setValues(
      {num? duration, num? length, num? numberOfChannels, num? sampleRate}) {
    if (duration != null) $duration = duration;
    if (length != null) $length = length;
    if (numberOfChannels != null) $numberOfChannels = numberOfChannels;
    if (sampleRate != null) $sampleRate = sampleRate;
  }

  Map toJson() {
    return {
      'duration': $duration,
      'length': $length,
      'numberOfChannels': $numberOfChannels,
      'sampleRate': $sampleRate
    }..removeWhere((key, value) => value == null);
  }

  Future<void> copyFromChannel() async {
    final result = await $$context$$?.callMethod('copyFromChannel', []);
    return result;
  }

  Future<void> copyToChannel(
      Float32Array source, num channelNumber, num startInChannel) async {
    final result = await $$context$$?.callMethod(
        'copyToChannel', [source.toJson(), channelNumber, startInChannel]);
    return result;
  }

  Future<Float32Array> getChannelData(num channel) async {
    final result = await $$context$$?.callMethod('getChannelData', [channel]);

    return Float32Array($$context$$: result);
  }
}

class AuthPrivateMessageOption {
  mpjs.JsObject? $$context$$;

  String $shareTicket = "";

  Future<String> get shareTicket async {
    return await $$context$$?.getPropertyValue('shareTicket') ?? $shareTicket;
  }

  AuthPrivateMessageCompleteCallback? $complete;

  Future<AuthPrivateMessageCompleteCallback?> get complete async {
    return $complete;
  }

  AuthPrivateMessageFailCallback? $fail;

  Future<AuthPrivateMessageFailCallback?> get fail async {
    return $fail;
  }

  AuthPrivateMessageSuccessCallback? $success;

  Future<AuthPrivateMessageSuccessCallback?> get success async {
    return $success;
  }

  AuthPrivateMessageOption({this.$$context$$});

  void setValues(
      {String? shareTicket,
      AuthPrivateMessageCompleteCallback? complete,
      AuthPrivateMessageFailCallback? fail,
      AuthPrivateMessageSuccessCallback? success}) {
    if (shareTicket != null) $shareTicket = shareTicket;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'shareTicket': $shareTicket,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => AuthPrivateMessageSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class AuthPrivateMessageSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $encryptedData = "";

  Future<String> get encryptedData async {
    return await $$context$$?.getPropertyValue('encryptedData') ??
        $encryptedData;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  String $iv = "";

  Future<String> get iv async {
    return await $$context$$?.getPropertyValue('iv') ?? $iv;
  }

  bool $valid = false;

  Future<bool> get valid async {
    return await $$context$$?.getPropertyValue('valid') ?? $valid;
  }

  AuthPrivateMessageSuccessCallbackResult({this.$$context$$});

  void setValues(
      {String? encryptedData, String? errMsg, String? iv, bool? valid}) {
    if (encryptedData != null) $encryptedData = encryptedData;
    if (errMsg != null) $errMsg = errMsg;
    if (iv != null) $iv = iv;
    if (valid != null) $valid = valid;
  }

  Map toJson() {
    return {
      'encryptedData': $encryptedData,
      'errMsg': $errMsg,
      'iv': $iv,
      'valid': $valid
    }..removeWhere((key, value) => value == null);
  }
}

class AuthSetting {
  mpjs.JsObject? $$context$$;

  bool? $scope_addPhoneCalendar;

  Future<bool?> get scope_addPhoneCalendar async {
    return await $$context$$?.getPropertyValue('scope.addPhoneCalendar') ??
        $scope_addPhoneCalendar;
  }

  bool? $scope_addPhoneContact;

  Future<bool?> get scope_addPhoneContact async {
    return await $$context$$?.getPropertyValue('scope.addPhoneContact') ??
        $scope_addPhoneContact;
  }

  bool? $scope_address;

  Future<bool?> get scope_address async {
    return await $$context$$?.getPropertyValue('scope.address') ??
        $scope_address;
  }

  bool? $scope_bluetooth;

  Future<bool?> get scope_bluetooth async {
    return await $$context$$?.getPropertyValue('scope.bluetooth') ??
        $scope_bluetooth;
  }

  bool? $scope_camera;

  Future<bool?> get scope_camera async {
    return await $$context$$?.getPropertyValue('scope.camera') ?? $scope_camera;
  }

  bool? $scope_invoice;

  Future<bool?> get scope_invoice async {
    return await $$context$$?.getPropertyValue('scope.invoice') ??
        $scope_invoice;
  }

  bool? $scope_invoiceTitle;

  Future<bool?> get scope_invoiceTitle async {
    return await $$context$$?.getPropertyValue('scope.invoiceTitle') ??
        $scope_invoiceTitle;
  }

  bool? $scope_record;

  Future<bool?> get scope_record async {
    return await $$context$$?.getPropertyValue('scope.record') ?? $scope_record;
  }

  bool? $scope_userInfo;

  Future<bool?> get scope_userInfo async {
    return await $$context$$?.getPropertyValue('scope.userInfo') ??
        $scope_userInfo;
  }

  bool? $scope_userLocation;

  Future<bool?> get scope_userLocation async {
    return await $$context$$?.getPropertyValue('scope.userLocation') ??
        $scope_userLocation;
  }

  bool? $scope_werun;

  Future<bool?> get scope_werun async {
    return await $$context$$?.getPropertyValue('scope.werun') ?? $scope_werun;
  }

  bool? $scope_writePhotosAlbum;

  Future<bool?> get scope_writePhotosAlbum async {
    return await $$context$$?.getPropertyValue('scope.writePhotosAlbum') ??
        $scope_writePhotosAlbum;
  }

  AuthSetting({this.$$context$$});

  void setValues(
      {bool? scope_addPhoneCalendar,
      bool? scope_addPhoneContact,
      bool? scope_address,
      bool? scope_bluetooth,
      bool? scope_camera,
      bool? scope_invoice,
      bool? scope_invoiceTitle,
      bool? scope_record,
      bool? scope_userInfo,
      bool? scope_userLocation,
      bool? scope_werun,
      bool? scope_writePhotosAlbum}) {
    if (scope_addPhoneCalendar != null)
      $scope_addPhoneCalendar = scope_addPhoneCalendar;
    if (scope_addPhoneContact != null)
      $scope_addPhoneContact = scope_addPhoneContact;
    if (scope_address != null) $scope_address = scope_address;
    if (scope_bluetooth != null) $scope_bluetooth = scope_bluetooth;
    if (scope_camera != null) $scope_camera = scope_camera;
    if (scope_invoice != null) $scope_invoice = scope_invoice;
    if (scope_invoiceTitle != null) $scope_invoiceTitle = scope_invoiceTitle;
    if (scope_record != null) $scope_record = scope_record;
    if (scope_userInfo != null) $scope_userInfo = scope_userInfo;
    if (scope_userLocation != null) $scope_userLocation = scope_userLocation;
    if (scope_werun != null) $scope_werun = scope_werun;
    if (scope_writePhotosAlbum != null)
      $scope_writePhotosAlbum = scope_writePhotosAlbum;
  }

  Map toJson() {
    return {
      'scope.addPhoneCalendar': $scope_addPhoneCalendar,
      'scope.addPhoneContact': $scope_addPhoneContact,
      'scope.address': $scope_address,
      'scope.bluetooth': $scope_bluetooth,
      'scope.camera': $scope_camera,
      'scope.invoice': $scope_invoice,
      'scope.invoiceTitle': $scope_invoiceTitle,
      'scope.record': $scope_record,
      'scope.userInfo': $scope_userInfo,
      'scope.userLocation': $scope_userLocation,
      'scope.werun': $scope_werun,
      'scope.writePhotosAlbum': $scope_writePhotosAlbum
    }..removeWhere((key, value) => value == null);
  }
}

class AuthorizeForMiniProgramOption {
  mpjs.JsObject? $$context$$;

  dynamic $scope;

  Future<dynamic> get scope async {
    return await $$context$$?.getPropertyValue('scope') ?? $scope;
  }

  AuthorizeForMiniProgramCompleteCallback? $complete;

  Future<AuthorizeForMiniProgramCompleteCallback?> get complete async {
    return $complete;
  }

  AuthorizeForMiniProgramFailCallback? $fail;

  Future<AuthorizeForMiniProgramFailCallback?> get fail async {
    return $fail;
  }

  AuthorizeForMiniProgramSuccessCallback? $success;

  Future<AuthorizeForMiniProgramSuccessCallback?> get success async {
    return $success;
  }

  AuthorizeForMiniProgramOption({this.$$context$$});

  void setValues(
      {dynamic scope,
      AuthorizeForMiniProgramCompleteCallback? complete,
      AuthorizeForMiniProgramFailCallback? fail,
      AuthorizeForMiniProgramSuccessCallback? success}) {
    if (scope != null) $scope = scope;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'scope': $scope,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class AuthorizeOption {
  mpjs.JsObject? $$context$$;

  String $scope = "";

  Future<String> get scope async {
    return await $$context$$?.getPropertyValue('scope') ?? $scope;
  }

  AuthorizeCompleteCallback? $complete;

  Future<AuthorizeCompleteCallback?> get complete async {
    return $complete;
  }

  AuthorizeFailCallback? $fail;

  Future<AuthorizeFailCallback?> get fail async {
    return $fail;
  }

  AuthorizeSuccessCallback? $success;

  Future<AuthorizeSuccessCallback?> get success async {
    return $success;
  }

  AuthorizeOption({this.$$context$$});

  void setValues(
      {String? scope,
      AuthorizeCompleteCallback? complete,
      AuthorizeFailCallback? fail,
      AuthorizeSuccessCallback? success}) {
    if (scope != null) $scope = scope;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'scope': $scope,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class BLECharacteristic {
  mpjs.JsObject? $$context$$;

  BLECharacteristicProperties $properties = BLECharacteristicProperties();

  Future<BLECharacteristicProperties> get properties async {
    return BLECharacteristicProperties(
        $$context$$: $$context$$?.getProperty('properties'));
  }

  String $uuid = "";

  Future<String> get uuid async {
    return await $$context$$?.getPropertyValue('uuid') ?? $uuid;
  }

  BLECharacteristic({this.$$context$$});

  void setValues({BLECharacteristicProperties? properties, String? uuid}) {
    if (properties != null) $properties = properties;
    if (uuid != null) $uuid = uuid;
  }

  Map toJson() {
    return {'properties': $properties, 'uuid': $uuid}
      ..removeWhere((key, value) => value == null);
  }
}

class BLECharacteristicProperties {
  mpjs.JsObject? $$context$$;

  bool $indicate = false;

  Future<bool> get indicate async {
    return await $$context$$?.getPropertyValue('indicate') ?? $indicate;
  }

  bool $notify = false;

  Future<bool> get notify async {
    return await $$context$$?.getPropertyValue('notify') ?? $notify;
  }

  bool $read = false;

  Future<bool> get read async {
    return await $$context$$?.getPropertyValue('read') ?? $read;
  }

  bool $write = false;

  Future<bool> get write async {
    return await $$context$$?.getPropertyValue('write') ?? $write;
  }

  bool $writeDefault = false;

  Future<bool> get writeDefault async {
    return await $$context$$?.getPropertyValue('writeDefault') ?? $writeDefault;
  }

  bool $writeNoResponse = false;

  Future<bool> get writeNoResponse async {
    return await $$context$$?.getPropertyValue('writeNoResponse') ??
        $writeNoResponse;
  }

  BLECharacteristicProperties({this.$$context$$});

  void setValues(
      {bool? indicate,
      bool? notify,
      bool? read,
      bool? write,
      bool? writeDefault,
      bool? writeNoResponse}) {
    if (indicate != null) $indicate = indicate;
    if (notify != null) $notify = notify;
    if (read != null) $read = read;
    if (write != null) $write = write;
    if (writeDefault != null) $writeDefault = writeDefault;
    if (writeNoResponse != null) $writeNoResponse = writeNoResponse;
  }

  Map toJson() {
    return {
      'indicate': $indicate,
      'notify': $notify,
      'read': $read,
      'write': $write,
      'writeDefault': $writeDefault,
      'writeNoResponse': $writeNoResponse
    }..removeWhere((key, value) => value == null);
  }
}

class BLEPeripheralServerCloseOption {
  mpjs.JsObject? $$context$$;

  FileSystemManagerCloseCompleteCallback? $complete;

  Future<FileSystemManagerCloseCompleteCallback?> get complete async {
    return $complete;
  }

  SocketTaskCloseFailCallback? $fail;

  Future<SocketTaskCloseFailCallback?> get fail async {
    return $fail;
  }

  FileSystemManagerCloseSuccessCallback? $success;

  Future<FileSystemManagerCloseSuccessCallback?> get success async {
    return $success;
  }

  BLEPeripheralServerCloseOption({this.$$context$$});

  void setValues(
      {FileSystemManagerCloseCompleteCallback? complete,
      SocketTaskCloseFailCallback? fail,
      FileSystemManagerCloseSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class BLEPeripheralService {
  mpjs.JsObject? $$context$$;

  List<Characteristic> $characteristics = <Characteristic>[];

  Future<List<Characteristic>> get characteristics async {
    return ((await $$context$$?.getPropertyValue('characteristics')) as List)
        .map((it) => Characteristic($$context$$: it))
        .toList();
  }

  String $uuid = "";

  Future<String> get uuid async {
    return await $$context$$?.getPropertyValue('uuid') ?? $uuid;
  }

  BLEPeripheralService({this.$$context$$});

  void setValues({List<Characteristic>? characteristics, String? uuid}) {
    if (characteristics != null) $characteristics = characteristics;
    if (uuid != null) $uuid = uuid;
  }

  Map toJson() {
    return {'characteristics': $characteristics, 'uuid': $uuid}
      ..removeWhere((key, value) => value == null);
  }
}

class BLEService {
  mpjs.JsObject? $$context$$;

  bool $isPrimary = false;

  Future<bool> get isPrimary async {
    return await $$context$$?.getPropertyValue('isPrimary') ?? $isPrimary;
  }

  String $uuid = "";

  Future<String> get uuid async {
    return await $$context$$?.getPropertyValue('uuid') ?? $uuid;
  }

  BLEService({this.$$context$$});

  void setValues({bool? isPrimary, String? uuid}) {
    if (isPrimary != null) $isPrimary = isPrimary;
    if (uuid != null) $uuid = uuid;
  }

  Map toJson() {
    return {'isPrimary': $isPrimary, 'uuid': $uuid}
      ..removeWhere((key, value) => value == null);
  }
}

class BackgroundAudioManager {
  mpjs.JsObject? $$context$$;

  num $buffered = 0;

  Future<num> get buffered async {
    return await $$context$$?.getPropertyValue('buffered') ?? $buffered;
  }

  String $coverImgUrl = "";

  Future<String> get coverImgUrl async {
    return await $$context$$?.getPropertyValue('coverImgUrl') ?? $coverImgUrl;
  }

  num $currentTime = 0;

  Future<num> get currentTime async {
    return await $$context$$?.getPropertyValue('currentTime') ?? $currentTime;
  }

  num $duration = 0;

  Future<num> get duration async {
    return await $$context$$?.getPropertyValue('duration') ?? $duration;
  }

  String $epname = "";

  Future<String> get epname async {
    return await $$context$$?.getPropertyValue('epname') ?? $epname;
  }

  bool $paused = false;

  Future<bool> get paused async {
    return await $$context$$?.getPropertyValue('paused') ?? $paused;
  }

  num $playbackRate = 0;

  Future<num> get playbackRate async {
    return await $$context$$?.getPropertyValue('playbackRate') ?? $playbackRate;
  }

  String $protocol = "";

  Future<String> get protocol async {
    return await $$context$$?.getPropertyValue('protocol') ?? $protocol;
  }

  String $referrerPolicy = "";

  Future<String> get referrerPolicy async {
    return await $$context$$?.getPropertyValue('referrerPolicy') ??
        $referrerPolicy;
  }

  String $singer = "";

  Future<String> get singer async {
    return await $$context$$?.getPropertyValue('singer') ?? $singer;
  }

  String $src = "";

  Future<String> get src async {
    return await $$context$$?.getPropertyValue('src') ?? $src;
  }

  num $startTime = 0;

  Future<num> get startTime async {
    return await $$context$$?.getPropertyValue('startTime') ?? $startTime;
  }

  String $title = "";

  Future<String> get title async {
    return await $$context$$?.getPropertyValue('title') ?? $title;
  }

  String $webUrl = "";

  Future<String> get webUrl async {
    return await $$context$$?.getPropertyValue('webUrl') ?? $webUrl;
  }

  BackgroundAudioManager({this.$$context$$});

  void setValues(
      {num? buffered,
      String? coverImgUrl,
      num? currentTime,
      num? duration,
      String? epname,
      bool? paused,
      num? playbackRate,
      String? protocol,
      String? referrerPolicy,
      String? singer,
      String? src,
      num? startTime,
      String? title,
      String? webUrl}) {
    if (buffered != null) $buffered = buffered;
    if (coverImgUrl != null) $coverImgUrl = coverImgUrl;
    if (currentTime != null) $currentTime = currentTime;
    if (duration != null) $duration = duration;
    if (epname != null) $epname = epname;
    if (paused != null) $paused = paused;
    if (playbackRate != null) $playbackRate = playbackRate;
    if (protocol != null) $protocol = protocol;
    if (referrerPolicy != null) $referrerPolicy = referrerPolicy;
    if (singer != null) $singer = singer;
    if (src != null) $src = src;
    if (startTime != null) $startTime = startTime;
    if (title != null) $title = title;
    if (webUrl != null) $webUrl = webUrl;
  }

  Map toJson() {
    return {
      'buffered': $buffered,
      'coverImgUrl': $coverImgUrl,
      'currentTime': $currentTime,
      'duration': $duration,
      'epname': $epname,
      'paused': $paused,
      'playbackRate': $playbackRate,
      'protocol': $protocol,
      'referrerPolicy': $referrerPolicy,
      'singer': $singer,
      'src': $src,
      'startTime': $startTime,
      'title': $title,
      'webUrl': $webUrl
    }..removeWhere((key, value) => value == null);
  }

  Future<void> onCanplay(OnCanplayCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onCanplay', [listener]);
    return result;
  }

  Future<void> onEnded(OnEndedCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onEnded', [listener]);
    return result;
  }

  Future<void> onError(BackgroundAudioManagerOnErrorCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onError', [listener]);
    return result;
  }

  Future<void> onNext(OnNextCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onNext', [listener]);
    return result;
  }

  Future<void> onPause(OnPauseCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onPause', [listener]);
    return result;
  }

  Future<void> onPlay(OnPlayCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onPlay', [listener]);
    return result;
  }

  Future<void> onPrev(OnPrevCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onPrev', [listener]);
    return result;
  }

  Future<void> onSeeked(OnSeekedCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onSeeked', [listener]);
    return result;
  }

  Future<void> onSeeking(OnSeekingCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onSeeking', [listener]);
    return result;
  }

  Future<void> onStop(InnerAudioContextOnStopCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onStop', [listener]);
    return result;
  }

  Future<void> onTimeUpdate(OnTimeUpdateCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onTimeUpdate', [listener]);
    return result;
  }

  Future<void> onWaiting(OnWaitingCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onWaiting', [listener]);
    return result;
  }

  Future<void> pause() async {
    final result = await $$context$$?.callMethod('pause', []);
    return result;
  }

  Future<void> play() async {
    final result = await $$context$$?.callMethod('play', []);
    return result;
  }

  Future<void> seek(num currentTime) async {
    final result = await $$context$$?.callMethod('seek', [currentTime]);
    return result;
  }

  Future<void> stop() async {
    final result = await $$context$$?.callMethod('stop', []);
    return result;
  }
}

class BatchGetStorageOption {
  mpjs.JsObject? $$context$$;

  List<String> $keyList = <String>[];

  Future<List<String>> get keyList async {
    return await $$context$$?.getPropertyValue('keyList') ?? $keyList;
  }

  BatchGetStorageCompleteCallback? $complete;

  Future<BatchGetStorageCompleteCallback?> get complete async {
    return $complete;
  }

  BatchGetStorageFailCallback? $fail;

  Future<BatchGetStorageFailCallback?> get fail async {
    return $fail;
  }

  BatchGetStorageSuccessCallback? $success;

  Future<BatchGetStorageSuccessCallback?> get success async {
    return $success;
  }

  BatchGetStorageOption({this.$$context$$});

  void setValues(
      {List<String>? keyList,
      BatchGetStorageCompleteCallback? complete,
      BatchGetStorageFailCallback? fail,
      BatchGetStorageSuccessCallback? success}) {
    if (keyList != null) $keyList = keyList;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'keyList': $keyList,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class BatchSetStorageOption {
  mpjs.JsObject? $$context$$;

  List<dynamic> $kvList = <dynamic>[];

  Future<List<dynamic>> get kvList async {
    return await $$context$$?.getPropertyValue('kvList') ?? $kvList;
  }

  BatchSetStorageCompleteCallback? $complete;

  Future<BatchSetStorageCompleteCallback?> get complete async {
    return $complete;
  }

  BatchSetStorageFailCallback? $fail;

  Future<BatchSetStorageFailCallback?> get fail async {
    return $fail;
  }

  BatchSetStorageSuccessCallback? $success;

  Future<BatchSetStorageSuccessCallback?> get success async {
    return $success;
  }

  BatchSetStorageOption({this.$$context$$});

  void setValues(
      {List<dynamic>? kvList,
      BatchSetStorageCompleteCallback? complete,
      BatchSetStorageFailCallback? fail,
      BatchSetStorageSuccessCallback? success}) {
    if (kvList != null) $kvList = kvList;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'kvList': $kvList,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class BeaconInfo {
  mpjs.JsObject? $$context$$;

  num $accuracy = 0;

  Future<num> get accuracy async {
    return await $$context$$?.getPropertyValue('accuracy') ?? $accuracy;
  }

  num $major = 0;

  Future<num> get major async {
    return await $$context$$?.getPropertyValue('major') ?? $major;
  }

  num $minor = 0;

  Future<num> get minor async {
    return await $$context$$?.getPropertyValue('minor') ?? $minor;
  }

  dynamic $proximity;

  Future<dynamic> get proximity async {
    return await $$context$$?.getPropertyValue('proximity') ?? $proximity;
  }

  num $rssi = 0;

  Future<num> get rssi async {
    return await $$context$$?.getPropertyValue('rssi') ?? $rssi;
  }

  String $uuid = "";

  Future<String> get uuid async {
    return await $$context$$?.getPropertyValue('uuid') ?? $uuid;
  }

  BeaconInfo({this.$$context$$});

  void setValues(
      {num? accuracy,
      num? major,
      num? minor,
      dynamic proximity,
      num? rssi,
      String? uuid}) {
    if (accuracy != null) $accuracy = accuracy;
    if (major != null) $major = major;
    if (minor != null) $minor = minor;
    if (proximity != null) $proximity = proximity;
    if (rssi != null) $rssi = rssi;
    if (uuid != null) $uuid = uuid;
  }

  Map toJson() {
    return {
      'accuracy': $accuracy,
      'major': $major,
      'minor': $minor,
      'proximity': $proximity,
      'rssi': $rssi,
      'uuid': $uuid
    }..removeWhere((key, value) => value == null);
  }
}

class BeaconInfoObj {
  mpjs.JsObject? $$context$$;

  num $major = 0;

  Future<num> get major async {
    return await $$context$$?.getPropertyValue('major') ?? $major;
  }

  num $minor = 0;

  Future<num> get minor async {
    return await $$context$$?.getPropertyValue('minor') ?? $minor;
  }

  String $uuid = "";

  Future<String> get uuid async {
    return await $$context$$?.getPropertyValue('uuid') ?? $uuid;
  }

  num? $measuredPower;

  Future<num?> get measuredPower async {
    return await $$context$$?.getPropertyValue('measuredPower') ??
        $measuredPower;
  }

  BeaconInfoObj({this.$$context$$});

  void setValues({num? major, num? minor, String? uuid, num? measuredPower}) {
    if (major != null) $major = major;
    if (minor != null) $minor = minor;
    if (uuid != null) $uuid = uuid;
    if (measuredPower != null) $measuredPower = measuredPower;
  }

  Map toJson() {
    return {
      'major': $major,
      'minor': $minor,
      'uuid': $uuid,
      'measuredPower': $measuredPower
    }..removeWhere((key, value) => value == null);
  }
}

class BindWifiOption {
  mpjs.JsObject? $$context$$;

  String $BSSID = "";

  Future<String> get BSSID async {
    return await $$context$$?.getPropertyValue('BSSID') ?? $BSSID;
  }

  BindWifiOption({this.$$context$$});

  void setValues({String? BSSID}) {
    if (BSSID != null) $BSSID = BSSID;
  }

  Map toJson() {
    return {'BSSID': $BSSID}..removeWhere((key, value) => value == null);
  }
}

class BlueToothDevice {
  mpjs.JsObject? $$context$$;

  num $RSSI = 0;

  Future<num> get RSSI async {
    return await $$context$$?.getPropertyValue('RSSI') ?? $RSSI;
  }

  ArrayBuffer $advertisData = ArrayBuffer();

  Future<ArrayBuffer> get advertisData async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('advertisData'));
  }

  List<String> $advertisServiceUUIDs = <String>[];

  Future<List<String>> get advertisServiceUUIDs async {
    return await $$context$$?.getPropertyValue('advertisServiceUUIDs') ??
        $advertisServiceUUIDs;
  }

  bool $connectable = false;

  Future<bool> get connectable async {
    return await $$context$$?.getPropertyValue('connectable') ?? $connectable;
  }

  String $deviceId = "";

  Future<String> get deviceId async {
    return await $$context$$?.getPropertyValue('deviceId') ?? $deviceId;
  }

  String $localName = "";

  Future<String> get localName async {
    return await $$context$$?.getPropertyValue('localName') ?? $localName;
  }

  String $name = "";

  Future<String> get name async {
    return await $$context$$?.getPropertyValue('name') ?? $name;
  }

  IAnyObject $serviceData = IAnyObject();

  Future<IAnyObject> get serviceData async {
    return IAnyObject($$context$$: $$context$$?.getProperty('serviceData'));
  }

  BlueToothDevice({this.$$context$$});

  void setValues(
      {num? RSSI,
      ArrayBuffer? advertisData,
      List<String>? advertisServiceUUIDs,
      bool? connectable,
      String? deviceId,
      String? localName,
      String? name,
      IAnyObject? serviceData}) {
    if (RSSI != null) $RSSI = RSSI;
    if (advertisData != null) $advertisData = advertisData;
    if (advertisServiceUUIDs != null)
      $advertisServiceUUIDs = advertisServiceUUIDs;
    if (connectable != null) $connectable = connectable;
    if (deviceId != null) $deviceId = deviceId;
    if (localName != null) $localName = localName;
    if (name != null) $name = name;
    if (serviceData != null) $serviceData = serviceData;
  }

  Map toJson() {
    return {
      'RSSI': $RSSI,
      'advertisData': $advertisData,
      'advertisServiceUUIDs': $advertisServiceUUIDs,
      'connectable': $connectable,
      'deviceId': $deviceId,
      'localName': $localName,
      'name': $name,
      'serviceData': $serviceData
    }..removeWhere((key, value) => value == null);
  }
}

class BluetoothDeviceInfo {
  mpjs.JsObject? $$context$$;

  String $deviceId = "";

  Future<String> get deviceId async {
    return await $$context$$?.getPropertyValue('deviceId') ?? $deviceId;
  }

  String $name = "";

  Future<String> get name async {
    return await $$context$$?.getPropertyValue('name') ?? $name;
  }

  BluetoothDeviceInfo({this.$$context$$});

  void setValues({String? deviceId, String? name}) {
    if (deviceId != null) $deviceId = deviceId;
    if (name != null) $name = name;
  }

  Map toJson() {
    return {'deviceId': $deviceId, 'name': $name}
      ..removeWhere((key, value) => value == null);
  }
}

class BlurOption {
  mpjs.JsObject? $$context$$;

  BlurCompleteCallback? $complete;

  Future<BlurCompleteCallback?> get complete async {
    return $complete;
  }

  BlurFailCallback? $fail;

  Future<BlurFailCallback?> get fail async {
    return $fail;
  }

  BlurSuccessCallback? $success;

  Future<BlurSuccessCallback?> get success async {
    return $success;
  }

  BlurOption({this.$$context$$});

  void setValues(
      {BlurCompleteCallback? complete,
      BlurFailCallback? fail,
      BlurSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class BodyTrack {
  mpjs.JsObject? $$context$$;

  dynamic $mode;

  Future<dynamic> get mode async {
    return await $$context$$?.getPropertyValue('mode') ?? $mode;
  }

  BodyTrack({this.$$context$$});

  void setValues({dynamic mode}) {
    if (mode != null) $mode = mode;
  }

  Map toJson() {
    return {'mode': $mode}..removeWhere((key, value) => value == null);
  }
}

class BoundingClientRectCallbackResult {
  mpjs.JsObject? $$context$$;

  num $bottom = 0;

  Future<num> get bottom async {
    return await $$context$$?.getPropertyValue('bottom') ?? $bottom;
  }

  IAnyObject $dataset = IAnyObject();

  Future<IAnyObject> get dataset async {
    return IAnyObject($$context$$: $$context$$?.getProperty('dataset'));
  }

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  String $id = "";

  Future<String> get id async {
    return await $$context$$?.getPropertyValue('id') ?? $id;
  }

  num $left = 0;

  Future<num> get left async {
    return await $$context$$?.getPropertyValue('left') ?? $left;
  }

  num $right = 0;

  Future<num> get right async {
    return await $$context$$?.getPropertyValue('right') ?? $right;
  }

  num $top = 0;

  Future<num> get top async {
    return await $$context$$?.getPropertyValue('top') ?? $top;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  BoundingClientRectCallbackResult({this.$$context$$});

  void setValues(
      {num? bottom,
      IAnyObject? dataset,
      num? height,
      String? id,
      num? left,
      num? right,
      num? top,
      num? width}) {
    if (bottom != null) $bottom = bottom;
    if (dataset != null) $dataset = dataset;
    if (height != null) $height = height;
    if (id != null) $id = id;
    if (left != null) $left = left;
    if (right != null) $right = right;
    if (top != null) $top = top;
    if (width != null) $width = width;
  }

  Map toJson() {
    return {
      'bottom': $bottom,
      'dataset': $dataset,
      'height': $height,
      'id': $id,
      'left': $left,
      'right': $right,
      'top': $top,
      'width': $width
    }..removeWhere((key, value) => value == null);
  }
}

class BoundingClientRectResult {
  mpjs.JsObject? $$context$$;

  num $bottom = 0;

  Future<num> get bottom async {
    return await $$context$$?.getPropertyValue('bottom') ?? $bottom;
  }

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  num $left = 0;

  Future<num> get left async {
    return await $$context$$?.getPropertyValue('left') ?? $left;
  }

  num $right = 0;

  Future<num> get right async {
    return await $$context$$?.getPropertyValue('right') ?? $right;
  }

  num $top = 0;

  Future<num> get top async {
    return await $$context$$?.getPropertyValue('top') ?? $top;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  BoundingClientRectResult({this.$$context$$});

  void setValues(
      {num? bottom, num? height, num? left, num? right, num? top, num? width}) {
    if (bottom != null) $bottom = bottom;
    if (height != null) $height = height;
    if (left != null) $left = left;
    if (right != null) $right = right;
    if (top != null) $top = top;
    if (width != null) $width = width;
  }

  Map toJson() {
    return {
      'bottom': $bottom,
      'height': $height,
      'left': $left,
      'right': $right,
      'top': $top,
      'width': $width
    }..removeWhere((key, value) => value == null);
  }
}

class CacheManager {
  mpjs.JsObject? $$context$$;

  String $maxAge = "";

  Future<String> get maxAge async {
    return await $$context$$?.getPropertyValue('maxAge') ?? $maxAge;
  }

  dynamic $mode;

  Future<dynamic> get mode async {
    return await $$context$$?.getPropertyValue('mode') ?? $mode;
  }

  String $origin = "";

  Future<String> get origin async {
    return await $$context$$?.getPropertyValue('origin') ?? $origin;
  }

  dynamic $state;

  Future<dynamic> get state async {
    return await $$context$$?.getPropertyValue('state') ?? $state;
  }

  CacheManager({this.$$context$$});

  void setValues(
      {String? maxAge, dynamic mode, String? origin, dynamic state}) {
    if (maxAge != null) $maxAge = maxAge;
    if (mode != null) $mode = mode;
    if (origin != null) $origin = origin;
    if (state != null) $state = state;
  }

  Map toJson() {
    return {
      'maxAge': $maxAge,
      'mode': $mode,
      'origin': $origin,
      'state': $state
    }..removeWhere((key, value) => value == null);
  }

  Future<List<String>> addRules(IAnyObject rules) async {
    final result = await $$context$$?.callMethod('addRules', [rules.toJson()]);
    return result;
  }

  Future<void> clearCaches() async {
    final result = await $$context$$?.callMethod('clearCaches', []);
    return result;
  }

  Future<void> clearRules() async {
    final result = await $$context$$?.callMethod('clearRules', []);
    return result;
  }

  Future<void> deleteCache(String id) async {
    final result = await $$context$$?.callMethod('deleteCache', [id]);
    return result;
  }

  Future<void> deleteCaches(List<String> ids) async {
    final result = await $$context$$?.callMethod('deleteCaches', [ids]);
    return result;
  }

  Future<void> deleteRule(String id) async {
    final result = await $$context$$?.callMethod('deleteRule', [id]);
    return result;
  }

  Future<void> deleteRules(List<String> ids) async {
    final result = await $$context$$?.callMethod('deleteRules', [ids]);
    return result;
  }

  Future<void> off(String eventName, dynamic handler) async {
    final result = await $$context$$?.callMethod('off', [eventName, handler]);
    return result;
  }

  Future<void> on(dynamic eventName, dynamic handler) async {
    final result = await $$context$$?.callMethod('on', [eventName, handler]);
    return result;
  }

  Future<void> start() async {
    final result = await $$context$$?.callMethod('start', []);
    return result;
  }

  Future<void> stop() async {
    final result = await $$context$$?.callMethod('stop', []);
    return result;
  }

  Future<MatchCache> match(IAnyObject evt) async {
    final result = await $$context$$?.callMethod('match', [evt.toJson()]);

    return MatchCache($$context$$: result);
  }

  Future<String> addRule(IAnyObject rule) async {
    final result = await $$context$$?.callMethod('addRule', [rule.toJson()]);
    return result;
  }
}

class CameraContextStartRecordOption {
  mpjs.JsObject? $$context$$;

  StartRecordCompleteCallback? $complete;

  Future<StartRecordCompleteCallback?> get complete async {
    return $complete;
  }

  StartRecordFailCallback? $fail;

  Future<StartRecordFailCallback?> get fail async {
    return $fail;
  }

  bool? $selfieMirror;

  Future<bool?> get selfieMirror async {
    return await $$context$$?.getPropertyValue('selfieMirror') ?? $selfieMirror;
  }

  CameraContextStartRecordSuccessCallback? $success;

  Future<CameraContextStartRecordSuccessCallback?> get success async {
    return $success;
  }

  num? $timeout;

  Future<num?> get timeout async {
    return await $$context$$?.getPropertyValue('timeout') ?? $timeout;
  }

  StartRecordTimeoutCallback? $timeoutCallback;

  Future<StartRecordTimeoutCallback?> get timeoutCallback async {
    return $timeoutCallback;
  }

  CameraContextStartRecordOption({this.$$context$$});

  void setValues(
      {StartRecordCompleteCallback? complete,
      StartRecordFailCallback? fail,
      bool? selfieMirror,
      CameraContextStartRecordSuccessCallback? success,
      num? timeout,
      StartRecordTimeoutCallback? timeoutCallback}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (selfieMirror != null) $selfieMirror = selfieMirror;
    if (success != null) $success = success;
    if (timeout != null) $timeout = timeout;
    if (timeoutCallback != null) $timeoutCallback = timeoutCallback;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'selfieMirror': $selfieMirror,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'timeout': $timeout,
      'timeoutCallback': $timeoutCallback != null
          ? mpjs.JsFunction($timeoutCallback!,
              [(e) => StartRecordTimeoutCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class CameraContextStopRecordOption {
  mpjs.JsObject? $$context$$;

  StopRecordCompleteCallback? $complete;

  Future<StopRecordCompleteCallback?> get complete async {
    return $complete;
  }

  bool? $compressed;

  Future<bool?> get compressed async {
    return await $$context$$?.getPropertyValue('compressed') ?? $compressed;
  }

  StopRecordFailCallback? $fail;

  Future<StopRecordFailCallback?> get fail async {
    return $fail;
  }

  CameraContextStopRecordSuccessCallback? $success;

  Future<CameraContextStopRecordSuccessCallback?> get success async {
    return $success;
  }

  CameraContextStopRecordOption({this.$$context$$});

  void setValues(
      {StopRecordCompleteCallback? complete,
      bool? compressed,
      StopRecordFailCallback? fail,
      CameraContextStopRecordSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (compressed != null) $compressed = compressed;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'compressed': $compressed,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => StopRecordSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class CameraFrameListenerStartOption {
  mpjs.JsObject? $$context$$;

  StartCompleteCallback? $complete;

  Future<StartCompleteCallback?> get complete async {
    return $complete;
  }

  StartFailCallback? $fail;

  Future<StartFailCallback?> get fail async {
    return $fail;
  }

  StartSuccessCallback? $success;

  Future<StartSuccessCallback?> get success async {
    return $success;
  }

  Worker? $worker;

  Future<Worker?> get worker async {
    return Worker($$context$$: $$context$$?.getProperty('worker'));
  }

  CameraFrameListenerStartOption({this.$$context$$});

  void setValues(
      {StartCompleteCallback? complete,
      StartFailCallback? fail,
      StartSuccessCallback? success,
      Worker? worker}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
    if (worker != null) $worker = worker;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'worker': $worker
    }..removeWhere((key, value) => value == null);
  }
}

class Canvas {
  mpjs.JsObject? $$context$$;

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  Canvas({this.$$context$$});

  void setValues({num? height, num? width}) {
    if (height != null) $height = height;
    if (width != null) $width = width;
  }

  Map toJson() {
    return {'height': $height, 'width': $width}
      ..removeWhere((key, value) => value == null);
  }

  Future<void> cancelAnimationFrame(num requestID) async {
    final result =
        await $$context$$?.callMethod('cancelAnimationFrame', [requestID]);
    return result;
  }

  Future<ImageData> createImageData() async {
    final result = await $$context$$?.callMethod('createImageData', []);

    return ImageData($$context$$: result);
  }

  Future<Image> createImage() async {
    final result = await $$context$$?.callMethod('createImage', []);

    return Image($$context$$: result);
  }

  Future<Path2D> createPath2D(Path2D path) async {
    final result =
        await $$context$$?.callMethod('createPath2D', [path.toJson()]);

    return Path2D($$context$$: result);
  }

  Future<dynamic> getContext(String contextType) async {
    final result = await $$context$$?.callMethod('getContext', [contextType]);
    return result;
  }

  Future<num> requestAnimationFrame(dynamic callback) async {
    final result =
        await $$context$$?.callMethod('requestAnimationFrame', [callback]);
    return result;
  }

  Future<String> toDataURL(String type, num encoderOptions) async {
    final result =
        await $$context$$?.callMethod('toDataURL', [type, encoderOptions]);
    return result;
  }
}

class CanvasContext {
  mpjs.JsObject? $$context$$;

  dynamic $fillStyle;

  Future<dynamic> get fillStyle async {
    return await $$context$$?.getPropertyValue('fillStyle') ?? $fillStyle;
  }

  String $font = "";

  Future<String> get font async {
    return await $$context$$?.getPropertyValue('font') ?? $font;
  }

  num $globalAlpha = 0;

  Future<num> get globalAlpha async {
    return await $$context$$?.getPropertyValue('globalAlpha') ?? $globalAlpha;
  }

  String $globalCompositeOperation = "";

  Future<String> get globalCompositeOperation async {
    return await $$context$$?.getPropertyValue('globalCompositeOperation') ??
        $globalCompositeOperation;
  }

  String $lineCap = "";

  Future<String> get lineCap async {
    return await $$context$$?.getPropertyValue('lineCap') ?? $lineCap;
  }

  num $lineDashOffset = 0;

  Future<num> get lineDashOffset async {
    return await $$context$$?.getPropertyValue('lineDashOffset') ??
        $lineDashOffset;
  }

  dynamic $lineJoin;

  Future<dynamic> get lineJoin async {
    return await $$context$$?.getPropertyValue('lineJoin') ?? $lineJoin;
  }

  num $lineWidth = 0;

  Future<num> get lineWidth async {
    return await $$context$$?.getPropertyValue('lineWidth') ?? $lineWidth;
  }

  num $miterLimit = 0;

  Future<num> get miterLimit async {
    return await $$context$$?.getPropertyValue('miterLimit') ?? $miterLimit;
  }

  num $shadowBlur = 0;

  Future<num> get shadowBlur async {
    return await $$context$$?.getPropertyValue('shadowBlur') ?? $shadowBlur;
  }

  num $shadowColor = 0;

  Future<num> get shadowColor async {
    return await $$context$$?.getPropertyValue('shadowColor') ?? $shadowColor;
  }

  num $shadowOffsetX = 0;

  Future<num> get shadowOffsetX async {
    return await $$context$$?.getPropertyValue('shadowOffsetX') ??
        $shadowOffsetX;
  }

  num $shadowOffsetY = 0;

  Future<num> get shadowOffsetY async {
    return await $$context$$?.getPropertyValue('shadowOffsetY') ??
        $shadowOffsetY;
  }

  dynamic $strokeStyle;

  Future<dynamic> get strokeStyle async {
    return await $$context$$?.getPropertyValue('strokeStyle') ?? $strokeStyle;
  }

  CanvasContext({this.$$context$$});

  void setValues(
      {dynamic fillStyle,
      String? font,
      num? globalAlpha,
      String? globalCompositeOperation,
      String? lineCap,
      num? lineDashOffset,
      dynamic lineJoin,
      num? lineWidth,
      num? miterLimit,
      num? shadowBlur,
      num? shadowColor,
      num? shadowOffsetX,
      num? shadowOffsetY,
      dynamic strokeStyle}) {
    if (fillStyle != null) $fillStyle = fillStyle;
    if (font != null) $font = font;
    if (globalAlpha != null) $globalAlpha = globalAlpha;
    if (globalCompositeOperation != null)
      $globalCompositeOperation = globalCompositeOperation;
    if (lineCap != null) $lineCap = lineCap;
    if (lineDashOffset != null) $lineDashOffset = lineDashOffset;
    if (lineJoin != null) $lineJoin = lineJoin;
    if (lineWidth != null) $lineWidth = lineWidth;
    if (miterLimit != null) $miterLimit = miterLimit;
    if (shadowBlur != null) $shadowBlur = shadowBlur;
    if (shadowColor != null) $shadowColor = shadowColor;
    if (shadowOffsetX != null) $shadowOffsetX = shadowOffsetX;
    if (shadowOffsetY != null) $shadowOffsetY = shadowOffsetY;
    if (strokeStyle != null) $strokeStyle = strokeStyle;
  }

  Map toJson() {
    return {
      'fillStyle': $fillStyle,
      'font': $font,
      'globalAlpha': $globalAlpha,
      'globalCompositeOperation': $globalCompositeOperation,
      'lineCap': $lineCap,
      'lineDashOffset': $lineDashOffset,
      'lineJoin': $lineJoin,
      'lineWidth': $lineWidth,
      'miterLimit': $miterLimit,
      'shadowBlur': $shadowBlur,
      'shadowColor': $shadowColor,
      'shadowOffsetX': $shadowOffsetX,
      'shadowOffsetY': $shadowOffsetY,
      'strokeStyle': $strokeStyle
    }..removeWhere((key, value) => value == null);
  }

  Future<void> arc(num x, num y, num r, num sAngle, num eAngle,
      [bool? counterclockwise]) async {
    final result = await $$context$$
        ?.callMethod('arc', [x, y, r, sAngle, eAngle, counterclockwise]);
    return result;
  }

  Future<void> arcTo(num x1, num y1, num x2, num y2, num radius) async {
    final result =
        await $$context$$?.callMethod('arcTo', [x1, y1, x2, y2, radius]);
    return result;
  }

  Future<void> beginPath() async {
    final result = await $$context$$?.callMethod('beginPath', []);
    return result;
  }

  Future<void> bezierCurveTo(
      num cp1x, num cp1y, num cp2x, num cp2y, num x, num y) async {
    final result = await $$context$$
        ?.callMethod('bezierCurveTo', [cp1x, cp1y, cp2x, cp2y, x, y]);
    return result;
  }

  Future<void> clearRect(num x, num y, num width, num height) async {
    final result =
        await $$context$$?.callMethod('clearRect', [x, y, width, height]);
    return result;
  }

  Future<void> clip() async {
    final result = await $$context$$?.callMethod('clip', []);
    return result;
  }

  Future<void> closePath() async {
    final result = await $$context$$?.callMethod('closePath', []);
    return result;
  }

  Future<void> createPattern(String image, dynamic repetition) async {
    final result =
        await $$context$$?.callMethod('createPattern', [image, repetition]);
    return result;
  }

  Future<void> draw([bool? reserve, dynamic callback]) async {
    final result = await $$context$$?.callMethod('draw', [reserve, callback]);
    return result;
  }

  Future<void> drawImage(String imageResource, num dx, num dy) async {
    final result =
        await $$context$$?.callMethod('drawImage', [imageResource, dx, dy]);
    return result;
  }

  Future<void> drawImageRect(
      String imageResource, num dx, num dy, num dWidth, num dHeight) async {
    final result = await $$context$$
        ?.callMethod('drawImage', [imageResource, dx, dy, dWidth, dHeight]);
    return result;
  }

  Future<void> drawImageRect2(String imageResource, num sx, num sy, num sWidth,
      num sHeight, num dx, num dy, num dWidth, num dHeight) async {
    final result = await $$context$$?.callMethod('drawImage',
        [imageResource, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight]);
    return result;
  }

  Future<void> fill() async {
    final result = await $$context$$?.callMethod('fill', []);
    return result;
  }

  Future<void> fillRect(num x, num y, num width, num height) async {
    final result =
        await $$context$$?.callMethod('fillRect', [x, y, width, height]);
    return result;
  }

  Future<void> fillText(String text, num x, num y, [num? maxWidth]) async {
    final result =
        await $$context$$?.callMethod('fillText', [text, x, y, maxWidth]);
    return result;
  }

  Future<void> lineTo(num x, num y) async {
    final result = await $$context$$?.callMethod('lineTo', [x, y]);
    return result;
  }

  Future<void> moveTo(num x, num y) async {
    final result = await $$context$$?.callMethod('moveTo', [x, y]);
    return result;
  }

  Future<void> quadraticCurveTo(num cpx, num cpy, num x, num y) async {
    final result =
        await $$context$$?.callMethod('quadraticCurveTo', [cpx, cpy, x, y]);
    return result;
  }

  Future<void> rect(num x, num y, num width, num height) async {
    final result = await $$context$$?.callMethod('rect', [x, y, width, height]);
    return result;
  }

  Future<void> restore() async {
    final result = await $$context$$?.callMethod('restore', []);
    return result;
  }

  Future<void> rotate(num rotate) async {
    final result = await $$context$$?.callMethod('rotate', [rotate]);
    return result;
  }

  Future<void> save() async {
    final result = await $$context$$?.callMethod('save', []);
    return result;
  }

  Future<void> scale(num scaleWidth, num scaleHeight) async {
    final result =
        await $$context$$?.callMethod('scale', [scaleWidth, scaleHeight]);
    return result;
  }

  Future<void> setFillStyle(dynamic color) async {
    final result = await $$context$$?.callMethod('setFillStyle', [color]);
    return result;
  }

  Future<void> setFontSize(num fontSize) async {
    final result = await $$context$$?.callMethod('setFontSize', [fontSize]);
    return result;
  }

  Future<void> setGlobalAlpha(num alpha) async {
    final result = await $$context$$?.callMethod('setGlobalAlpha', [alpha]);
    return result;
  }

  Future<void> setLineCap(dynamic lineCap) async {
    final result = await $$context$$?.callMethod('setLineCap', [lineCap]);
    return result;
  }

  Future<void> setLineDash(List<num> pattern, num offset) async {
    final result =
        await $$context$$?.callMethod('setLineDash', [pattern, offset]);
    return result;
  }

  Future<void> setLineJoin(dynamic lineJoin) async {
    final result = await $$context$$?.callMethod('setLineJoin', [lineJoin]);
    return result;
  }

  Future<void> setLineWidth(num lineWidth) async {
    final result = await $$context$$?.callMethod('setLineWidth', [lineWidth]);
    return result;
  }

  Future<void> setMiterLimit(num miterLimit) async {
    final result = await $$context$$?.callMethod('setMiterLimit', [miterLimit]);
    return result;
  }

  Future<void> setShadow(
      num offsetX, num offsetY, num blur, String color) async {
    final result = await $$context$$
        ?.callMethod('setShadow', [offsetX, offsetY, blur, color]);
    return result;
  }

  Future<void> setStrokeStyle(dynamic color) async {
    final result = await $$context$$?.callMethod('setStrokeStyle', [color]);
    return result;
  }

  Future<void> setTextAlign(dynamic align) async {
    final result = await $$context$$?.callMethod('setTextAlign', [align]);
    return result;
  }

  Future<void> setTextBaseline(dynamic textBaseline) async {
    final result =
        await $$context$$?.callMethod('setTextBaseline', [textBaseline]);
    return result;
  }

  Future<void> setTransform(num scaleX, num skewX, num skewY, num scaleY,
      num translateX, num translateY) async {
    final result = await $$context$$?.callMethod(
        'setTransform', [scaleX, skewX, skewY, scaleY, translateX, translateY]);
    return result;
  }

  Future<void> stroke() async {
    final result = await $$context$$?.callMethod('stroke', []);
    return result;
  }

  Future<void> strokeRect(num x, num y, num width, num height) async {
    final result =
        await $$context$$?.callMethod('strokeRect', [x, y, width, height]);
    return result;
  }

  Future<void> strokeText(String text, num x, num y, [num? maxWidth]) async {
    final result =
        await $$context$$?.callMethod('strokeText', [text, x, y, maxWidth]);
    return result;
  }

  Future<void> transform(num scaleX, num skewX, num skewY, num scaleY,
      num translateX, num translateY) async {
    final result = await $$context$$?.callMethod(
        'transform', [scaleX, skewX, skewY, scaleY, translateX, translateY]);
    return result;
  }

  Future<void> translate(num x, num y) async {
    final result = await $$context$$?.callMethod('translate', [x, y]);
    return result;
  }

  Future<TextMetrics> measureText(String text) async {
    final result = await $$context$$?.callMethod('measureText', [text]);

    return TextMetrics($$context$$: result);
  }

  Future<CanvasGradient> createCircularGradient(num x, num y, num r) async {
    final result =
        await $$context$$?.callMethod('createCircularGradient', [x, y, r]);

    return CanvasGradient($$context$$: result);
  }

  Future<CanvasGradient> createLinearGradient(
      num x0, num y0, num x1, num y1) async {
    final result =
        await $$context$$?.callMethod('createLinearGradient', [x0, y0, x1, y1]);

    return CanvasGradient($$context$$: result);
  }
}

class CanvasGetImageDataOption {
  mpjs.JsObject? $$context$$;

  String $canvasId = "";

  Future<String> get canvasId async {
    return await $$context$$?.getPropertyValue('canvasId') ?? $canvasId;
  }

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  num $x = 0;

  Future<num> get x async {
    return await $$context$$?.getPropertyValue('x') ?? $x;
  }

  num $y = 0;

  Future<num> get y async {
    return await $$context$$?.getPropertyValue('y') ?? $y;
  }

  CanvasGetImageDataCompleteCallback? $complete;

  Future<CanvasGetImageDataCompleteCallback?> get complete async {
    return $complete;
  }

  CanvasGetImageDataFailCallback? $fail;

  Future<CanvasGetImageDataFailCallback?> get fail async {
    return $fail;
  }

  CanvasGetImageDataSuccessCallback? $success;

  Future<CanvasGetImageDataSuccessCallback?> get success async {
    return $success;
  }

  CanvasGetImageDataOption({this.$$context$$});

  void setValues(
      {String? canvasId,
      num? height,
      num? width,
      num? x,
      num? y,
      CanvasGetImageDataCompleteCallback? complete,
      CanvasGetImageDataFailCallback? fail,
      CanvasGetImageDataSuccessCallback? success}) {
    if (canvasId != null) $canvasId = canvasId;
    if (height != null) $height = height;
    if (width != null) $width = width;
    if (x != null) $x = x;
    if (y != null) $y = y;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'canvasId': $canvasId,
      'height': $height,
      'width': $width,
      'x': $x,
      'y': $y,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => CanvasGetImageDataSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class CanvasGetImageDataSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  Uint8ClampedArray $data = Uint8ClampedArray();

  Future<Uint8ClampedArray> get data async {
    return Uint8ClampedArray($$context$$: $$context$$?.getProperty('data'));
  }

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  CanvasGetImageDataSuccessCallbackResult({this.$$context$$});

  void setValues(
      {Uint8ClampedArray? data, num? height, num? width, String? errMsg}) {
    if (data != null) $data = data;
    if (height != null) $height = height;
    if (width != null) $width = width;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'data': $data,
      'height': $height,
      'width': $width,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class CanvasPutImageDataOption {
  mpjs.JsObject? $$context$$;

  String $canvasId = "";

  Future<String> get canvasId async {
    return await $$context$$?.getPropertyValue('canvasId') ?? $canvasId;
  }

  Uint8ClampedArray $data = Uint8ClampedArray();

  Future<Uint8ClampedArray> get data async {
    return Uint8ClampedArray($$context$$: $$context$$?.getProperty('data'));
  }

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  num $x = 0;

  Future<num> get x async {
    return await $$context$$?.getPropertyValue('x') ?? $x;
  }

  num $y = 0;

  Future<num> get y async {
    return await $$context$$?.getPropertyValue('y') ?? $y;
  }

  CanvasPutImageDataCompleteCallback? $complete;

  Future<CanvasPutImageDataCompleteCallback?> get complete async {
    return $complete;
  }

  CanvasPutImageDataFailCallback? $fail;

  Future<CanvasPutImageDataFailCallback?> get fail async {
    return $fail;
  }

  CanvasPutImageDataSuccessCallback? $success;

  Future<CanvasPutImageDataSuccessCallback?> get success async {
    return $success;
  }

  CanvasPutImageDataOption({this.$$context$$});

  void setValues(
      {String? canvasId,
      Uint8ClampedArray? data,
      num? height,
      num? width,
      num? x,
      num? y,
      CanvasPutImageDataCompleteCallback? complete,
      CanvasPutImageDataFailCallback? fail,
      CanvasPutImageDataSuccessCallback? success}) {
    if (canvasId != null) $canvasId = canvasId;
    if (data != null) $data = data;
    if (height != null) $height = height;
    if (width != null) $width = width;
    if (x != null) $x = x;
    if (y != null) $y = y;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'canvasId': $canvasId,
      'data': $data,
      'height': $height,
      'width': $width,
      'x': $x,
      'y': $y,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class CanvasToTempFilePathOption {
  mpjs.JsObject? $$context$$;

  IAnyObject? $canvas;

  Future<IAnyObject?> get canvas async {
    return IAnyObject($$context$$: $$context$$?.getProperty('canvas'));
  }

  String? $canvasId;

  Future<String?> get canvasId async {
    return await $$context$$?.getPropertyValue('canvasId') ?? $canvasId;
  }

  CanvasToTempFilePathCompleteCallback? $complete;

  Future<CanvasToTempFilePathCompleteCallback?> get complete async {
    return $complete;
  }

  num? $destHeight;

  Future<num?> get destHeight async {
    return await $$context$$?.getPropertyValue('destHeight') ?? $destHeight;
  }

  num? $destWidth;

  Future<num?> get destWidth async {
    return await $$context$$?.getPropertyValue('destWidth') ?? $destWidth;
  }

  CanvasToTempFilePathFailCallback? $fail;

  Future<CanvasToTempFilePathFailCallback?> get fail async {
    return $fail;
  }

  dynamic $fileType;

  Future<dynamic> get fileType async {
    return await $$context$$?.getPropertyValue('fileType') ?? $fileType;
  }

  num? $height;

  Future<num?> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  num? $quality;

  Future<num?> get quality async {
    return await $$context$$?.getPropertyValue('quality') ?? $quality;
  }

  CanvasToTempFilePathSuccessCallback? $success;

  Future<CanvasToTempFilePathSuccessCallback?> get success async {
    return $success;
  }

  num? $width;

  Future<num?> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  num? $x;

  Future<num?> get x async {
    return await $$context$$?.getPropertyValue('x') ?? $x;
  }

  num? $y;

  Future<num?> get y async {
    return await $$context$$?.getPropertyValue('y') ?? $y;
  }

  CanvasToTempFilePathOption({this.$$context$$});

  void setValues(
      {IAnyObject? canvas,
      String? canvasId,
      CanvasToTempFilePathCompleteCallback? complete,
      num? destHeight,
      num? destWidth,
      CanvasToTempFilePathFailCallback? fail,
      dynamic fileType,
      num? height,
      num? quality,
      CanvasToTempFilePathSuccessCallback? success,
      num? width,
      num? x,
      num? y}) {
    if (canvas != null) $canvas = canvas;
    if (canvasId != null) $canvasId = canvasId;
    if (complete != null) $complete = complete;
    if (destHeight != null) $destHeight = destHeight;
    if (destWidth != null) $destWidth = destWidth;
    if (fail != null) $fail = fail;
    if (fileType != null) $fileType = fileType;
    if (height != null) $height = height;
    if (quality != null) $quality = quality;
    if (success != null) $success = success;
    if (width != null) $width = width;
    if (x != null) $x = x;
    if (y != null) $y = y;
  }

  Map toJson() {
    return {
      'canvas': $canvas,
      'canvasId': $canvasId,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'destHeight': $destHeight,
      'destWidth': $destWidth,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fileType': $fileType,
      'height': $height,
      'quality': $quality,
      'success': $success != null
          ? mpjs.JsFunction($success!, [
              (e) => CanvasToTempFilePathSuccessCallbackResult($$context$$: e)
            ])
          : null,
      'width': $width,
      'x': $x,
      'y': $y
    }..removeWhere((key, value) => value == null);
  }
}

class CanvasToTempFilePathSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $tempFilePath = "";

  Future<String> get tempFilePath async {
    return await $$context$$?.getPropertyValue('tempFilePath') ?? $tempFilePath;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  CanvasToTempFilePathSuccessCallbackResult({this.$$context$$});

  void setValues({String? tempFilePath, String? errMsg}) {
    if (tempFilePath != null) $tempFilePath = tempFilePath;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'tempFilePath': $tempFilePath, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class Characteristic {
  mpjs.JsObject? $$context$$;

  String $uuid = "";

  Future<String> get uuid async {
    return await $$context$$?.getPropertyValue('uuid') ?? $uuid;
  }

  List<CharacteristicDescriptor>? $descriptors;

  Future<List<CharacteristicDescriptor>?> get descriptors async {
    return ((await $$context$$?.getPropertyValue('descriptors')) as List)
        .map((it) => CharacteristicDescriptor($$context$$: it))
        .toList();
  }

  CharacteristicPermission? $permission;

  Future<CharacteristicPermission?> get permission async {
    return CharacteristicPermission(
        $$context$$: $$context$$?.getProperty('permission'));
  }

  CharacteristicProperties? $properties;

  Future<CharacteristicProperties?> get properties async {
    return CharacteristicProperties(
        $$context$$: $$context$$?.getProperty('properties'));
  }

  ArrayBuffer? $value;

  Future<ArrayBuffer?> get value async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('value'));
  }

  Characteristic({this.$$context$$});

  void setValues(
      {String? uuid,
      List<CharacteristicDescriptor>? descriptors,
      CharacteristicPermission? permission,
      CharacteristicProperties? properties,
      ArrayBuffer? value}) {
    if (uuid != null) $uuid = uuid;
    if (descriptors != null) $descriptors = descriptors;
    if (permission != null) $permission = permission;
    if (properties != null) $properties = properties;
    if (value != null) $value = value;
  }

  Map toJson() {
    return {
      'uuid': $uuid,
      'descriptors': $descriptors,
      'permission': $permission,
      'properties': $properties,
      'value': $value
    }..removeWhere((key, value) => value == null);
  }
}

class CharacteristicDescriptor {
  mpjs.JsObject? $$context$$;

  String $uuid = "";

  Future<String> get uuid async {
    return await $$context$$?.getPropertyValue('uuid') ?? $uuid;
  }

  DescriptorPermission? $permission;

  Future<DescriptorPermission?> get permission async {
    return DescriptorPermission(
        $$context$$: $$context$$?.getProperty('permission'));
  }

  ArrayBuffer? $value;

  Future<ArrayBuffer?> get value async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('value'));
  }

  CharacteristicDescriptor({this.$$context$$});

  void setValues(
      {String? uuid, DescriptorPermission? permission, ArrayBuffer? value}) {
    if (uuid != null) $uuid = uuid;
    if (permission != null) $permission = permission;
    if (value != null) $value = value;
  }

  Map toJson() {
    return {'uuid': $uuid, 'permission': $permission, 'value': $value}
      ..removeWhere((key, value) => value == null);
  }
}

class CharacteristicPermission {
  mpjs.JsObject? $$context$$;

  bool? $readEncryptionRequired;

  Future<bool?> get readEncryptionRequired async {
    return await $$context$$?.getPropertyValue('readEncryptionRequired') ??
        $readEncryptionRequired;
  }

  bool? $readable;

  Future<bool?> get readable async {
    return await $$context$$?.getPropertyValue('readable') ?? $readable;
  }

  bool? $writeEncryptionRequired;

  Future<bool?> get writeEncryptionRequired async {
    return await $$context$$?.getPropertyValue('writeEncryptionRequired') ??
        $writeEncryptionRequired;
  }

  bool? $writeable;

  Future<bool?> get writeable async {
    return await $$context$$?.getPropertyValue('writeable') ?? $writeable;
  }

  CharacteristicPermission({this.$$context$$});

  void setValues(
      {bool? readEncryptionRequired,
      bool? readable,
      bool? writeEncryptionRequired,
      bool? writeable}) {
    if (readEncryptionRequired != null)
      $readEncryptionRequired = readEncryptionRequired;
    if (readable != null) $readable = readable;
    if (writeEncryptionRequired != null)
      $writeEncryptionRequired = writeEncryptionRequired;
    if (writeable != null) $writeable = writeable;
  }

  Map toJson() {
    return {
      'readEncryptionRequired': $readEncryptionRequired,
      'readable': $readable,
      'writeEncryptionRequired': $writeEncryptionRequired,
      'writeable': $writeable
    }..removeWhere((key, value) => value == null);
  }
}

class CharacteristicProperties {
  mpjs.JsObject? $$context$$;

  bool? $indicate;

  Future<bool?> get indicate async {
    return await $$context$$?.getPropertyValue('indicate') ?? $indicate;
  }

  bool? $notify;

  Future<bool?> get notify async {
    return await $$context$$?.getPropertyValue('notify') ?? $notify;
  }

  bool? $read;

  Future<bool?> get read async {
    return await $$context$$?.getPropertyValue('read') ?? $read;
  }

  bool? $write;

  Future<bool?> get write async {
    return await $$context$$?.getPropertyValue('write') ?? $write;
  }

  bool? $writeNoResponse;

  Future<bool?> get writeNoResponse async {
    return await $$context$$?.getPropertyValue('writeNoResponse') ??
        $writeNoResponse;
  }

  CharacteristicProperties({this.$$context$$});

  void setValues(
      {bool? indicate,
      bool? notify,
      bool? read,
      bool? write,
      bool? writeNoResponse}) {
    if (indicate != null) $indicate = indicate;
    if (notify != null) $notify = notify;
    if (read != null) $read = read;
    if (write != null) $write = write;
    if (writeNoResponse != null) $writeNoResponse = writeNoResponse;
  }

  Map toJson() {
    return {
      'indicate': $indicate,
      'notify': $notify,
      'read': $read,
      'write': $write,
      'writeNoResponse': $writeNoResponse
    }..removeWhere((key, value) => value == null);
  }
}

class CheckIsAddedToMyMiniProgramOption {
  mpjs.JsObject? $$context$$;

  CheckIsAddedToMyMiniProgramCompleteCallback? $complete;

  Future<CheckIsAddedToMyMiniProgramCompleteCallback?> get complete async {
    return $complete;
  }

  CheckIsAddedToMyMiniProgramFailCallback? $fail;

  Future<CheckIsAddedToMyMiniProgramFailCallback?> get fail async {
    return $fail;
  }

  CheckIsAddedToMyMiniProgramSuccessCallback? $success;

  Future<CheckIsAddedToMyMiniProgramSuccessCallback?> get success async {
    return $success;
  }

  CheckIsAddedToMyMiniProgramOption({this.$$context$$});

  void setValues(
      {CheckIsAddedToMyMiniProgramCompleteCallback? complete,
      CheckIsAddedToMyMiniProgramFailCallback? fail,
      CheckIsAddedToMyMiniProgramSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [
              (e) => CheckIsAddedToMyMiniProgramSuccessCallbackResult(
                  $$context$$: e)
            ])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class CheckIsAddedToMyMiniProgramSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  bool $added = false;

  Future<bool> get added async {
    return await $$context$$?.getPropertyValue('added') ?? $added;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  CheckIsAddedToMyMiniProgramSuccessCallbackResult({this.$$context$$});

  void setValues({bool? added, String? errMsg}) {
    if (added != null) $added = added;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'added': $added, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class CheckIsOpenAccessibilityOption {
  mpjs.JsObject? $$context$$;

  CheckIsOpenAccessibilityCompleteCallback? $complete;

  Future<CheckIsOpenAccessibilityCompleteCallback?> get complete async {
    return $complete;
  }

  CheckIsOpenAccessibilityFailCallback? $fail;

  Future<CheckIsOpenAccessibilityFailCallback?> get fail async {
    return $fail;
  }

  CheckIsOpenAccessibilitySuccessCallback? $success;

  Future<CheckIsOpenAccessibilitySuccessCallback?> get success async {
    return $success;
  }

  CheckIsOpenAccessibilityOption({this.$$context$$});

  void setValues(
      {CheckIsOpenAccessibilityCompleteCallback? complete,
      CheckIsOpenAccessibilityFailCallback? fail,
      CheckIsOpenAccessibilitySuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [
              (e) =>
                  CheckIsOpenAccessibilitySuccessCallbackOption($$context$$: e)
            ])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class CheckIsOpenAccessibilitySuccessCallbackOption {
  mpjs.JsObject? $$context$$;

  bool $open = false;

  Future<bool> get open async {
    return await $$context$$?.getPropertyValue('open') ?? $open;
  }

  CheckIsOpenAccessibilitySuccessCallbackOption({this.$$context$$});

  void setValues({bool? open}) {
    if (open != null) $open = open;
  }

  Map toJson() {
    return {'open': $open}..removeWhere((key, value) => value == null);
  }
}

class CheckIsSoterEnrolledInDeviceOption {
  mpjs.JsObject? $$context$$;

  dynamic $checkAuthMode;

  Future<dynamic> get checkAuthMode async {
    return await $$context$$?.getPropertyValue('checkAuthMode') ??
        $checkAuthMode;
  }

  CheckIsSoterEnrolledInDeviceCompleteCallback? $complete;

  Future<CheckIsSoterEnrolledInDeviceCompleteCallback?> get complete async {
    return $complete;
  }

  CheckIsSoterEnrolledInDeviceFailCallback? $fail;

  Future<CheckIsSoterEnrolledInDeviceFailCallback?> get fail async {
    return $fail;
  }

  CheckIsSoterEnrolledInDeviceSuccessCallback? $success;

  Future<CheckIsSoterEnrolledInDeviceSuccessCallback?> get success async {
    return $success;
  }

  CheckIsSoterEnrolledInDeviceOption({this.$$context$$});

  void setValues(
      {dynamic checkAuthMode,
      CheckIsSoterEnrolledInDeviceCompleteCallback? complete,
      CheckIsSoterEnrolledInDeviceFailCallback? fail,
      CheckIsSoterEnrolledInDeviceSuccessCallback? success}) {
    if (checkAuthMode != null) $checkAuthMode = checkAuthMode;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'checkAuthMode': $checkAuthMode,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [
              (e) => CheckIsSoterEnrolledInDeviceSuccessCallbackResult(
                  $$context$$: e)
            ])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class CheckIsSoterEnrolledInDeviceSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  bool $isEnrolled = false;

  Future<bool> get isEnrolled async {
    return await $$context$$?.getPropertyValue('isEnrolled') ?? $isEnrolled;
  }

  CheckIsSoterEnrolledInDeviceSuccessCallbackResult({this.$$context$$});

  void setValues({String? errMsg, bool? isEnrolled}) {
    if (errMsg != null) $errMsg = errMsg;
    if (isEnrolled != null) $isEnrolled = isEnrolled;
  }

  Map toJson() {
    return {'errMsg': $errMsg, 'isEnrolled': $isEnrolled}
      ..removeWhere((key, value) => value == null);
  }
}

class CheckIsSupportSoterAuthenticationOption {
  mpjs.JsObject? $$context$$;

  CheckIsSupportSoterAuthenticationCompleteCallback? $complete;

  Future<CheckIsSupportSoterAuthenticationCompleteCallback?>
      get complete async {
    return $complete;
  }

  CheckIsSupportSoterAuthenticationFailCallback? $fail;

  Future<CheckIsSupportSoterAuthenticationFailCallback?> get fail async {
    return $fail;
  }

  CheckIsSupportSoterAuthenticationSuccessCallback? $success;

  Future<CheckIsSupportSoterAuthenticationSuccessCallback?> get success async {
    return $success;
  }

  CheckIsSupportSoterAuthenticationOption({this.$$context$$});

  void setValues(
      {CheckIsSupportSoterAuthenticationCompleteCallback? complete,
      CheckIsSupportSoterAuthenticationFailCallback? fail,
      CheckIsSupportSoterAuthenticationSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [
              (e) => CheckIsSupportSoterAuthenticationSuccessCallbackResult(
                  $$context$$: e)
            ])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class CheckIsSupportSoterAuthenticationSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  Array<dynamic> $supportMode = [];

  Future<Array<dynamic>> get supportMode async {
    return $supportMode;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  CheckIsSupportSoterAuthenticationSuccessCallbackResult({this.$$context$$});

  void setValues({Array<dynamic>? supportMode, String? errMsg}) {
    if (supportMode != null) $supportMode = supportMode;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'supportMode': $supportMode, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class CheckSessionOption {
  mpjs.JsObject? $$context$$;

  CheckSessionCompleteCallback? $complete;

  Future<CheckSessionCompleteCallback?> get complete async {
    return $complete;
  }

  CheckSessionFailCallback? $fail;

  Future<CheckSessionFailCallback?> get fail async {
    return $fail;
  }

  CheckSessionSuccessCallback? $success;

  Future<CheckSessionSuccessCallback?> get success async {
    return $success;
  }

  CheckSessionOption({this.$$context$$});

  void setValues(
      {CheckSessionCompleteCallback? complete,
      CheckSessionFailCallback? fail,
      CheckSessionSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ChooseAddressOption {
  mpjs.JsObject? $$context$$;

  ChooseAddressCompleteCallback? $complete;

  Future<ChooseAddressCompleteCallback?> get complete async {
    return $complete;
  }

  ChooseAddressFailCallback? $fail;

  Future<ChooseAddressFailCallback?> get fail async {
    return $fail;
  }

  ChooseAddressSuccessCallback? $success;

  Future<ChooseAddressSuccessCallback?> get success async {
    return $success;
  }

  ChooseAddressOption({this.$$context$$});

  void setValues(
      {ChooseAddressCompleteCallback? complete,
      ChooseAddressFailCallback? fail,
      ChooseAddressSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => ChooseAddressSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ChooseAddressSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $cityName = "";

  Future<String> get cityName async {
    return await $$context$$?.getPropertyValue('cityName') ?? $cityName;
  }

  String $countyName = "";

  Future<String> get countyName async {
    return await $$context$$?.getPropertyValue('countyName') ?? $countyName;
  }

  String $detailInfo = "";

  Future<String> get detailInfo async {
    return await $$context$$?.getPropertyValue('detailInfo') ?? $detailInfo;
  }

  String $detailInfoNew = "";

  Future<String> get detailInfoNew async {
    return await $$context$$?.getPropertyValue('detailInfoNew') ??
        $detailInfoNew;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  String $nationalCode = "";

  Future<String> get nationalCode async {
    return await $$context$$?.getPropertyValue('nationalCode') ?? $nationalCode;
  }

  String $postalCode = "";

  Future<String> get postalCode async {
    return await $$context$$?.getPropertyValue('postalCode') ?? $postalCode;
  }

  String $provinceName = "";

  Future<String> get provinceName async {
    return await $$context$$?.getPropertyValue('provinceName') ?? $provinceName;
  }

  String $streetName = "";

  Future<String> get streetName async {
    return await $$context$$?.getPropertyValue('streetName') ?? $streetName;
  }

  String $telNumber = "";

  Future<String> get telNumber async {
    return await $$context$$?.getPropertyValue('telNumber') ?? $telNumber;
  }

  String $userName = "";

  Future<String> get userName async {
    return await $$context$$?.getPropertyValue('userName') ?? $userName;
  }

  ChooseAddressSuccessCallbackResult({this.$$context$$});

  void setValues(
      {String? cityName,
      String? countyName,
      String? detailInfo,
      String? detailInfoNew,
      String? errMsg,
      String? nationalCode,
      String? postalCode,
      String? provinceName,
      String? streetName,
      String? telNumber,
      String? userName}) {
    if (cityName != null) $cityName = cityName;
    if (countyName != null) $countyName = countyName;
    if (detailInfo != null) $detailInfo = detailInfo;
    if (detailInfoNew != null) $detailInfoNew = detailInfoNew;
    if (errMsg != null) $errMsg = errMsg;
    if (nationalCode != null) $nationalCode = nationalCode;
    if (postalCode != null) $postalCode = postalCode;
    if (provinceName != null) $provinceName = provinceName;
    if (streetName != null) $streetName = streetName;
    if (telNumber != null) $telNumber = telNumber;
    if (userName != null) $userName = userName;
  }

  Map toJson() {
    return {
      'cityName': $cityName,
      'countyName': $countyName,
      'detailInfo': $detailInfo,
      'detailInfoNew': $detailInfoNew,
      'errMsg': $errMsg,
      'nationalCode': $nationalCode,
      'postalCode': $postalCode,
      'provinceName': $provinceName,
      'streetName': $streetName,
      'telNumber': $telNumber,
      'userName': $userName
    }..removeWhere((key, value) => value == null);
  }
}

class ChooseContactOption {
  mpjs.JsObject? $$context$$;

  ChooseContactCompleteCallback? $complete;

  Future<ChooseContactCompleteCallback?> get complete async {
    return $complete;
  }

  ChooseContactFailCallback? $fail;

  Future<ChooseContactFailCallback?> get fail async {
    return $fail;
  }

  ChooseContactSuccessCallback? $success;

  Future<ChooseContactSuccessCallback?> get success async {
    return $success;
  }

  ChooseContactOption({this.$$context$$});

  void setValues(
      {ChooseContactCompleteCallback? complete,
      ChooseContactFailCallback? fail,
      ChooseContactSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => ChooseContactSuccessCallbackOption($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ChooseContactSuccessCallbackOption {
  mpjs.JsObject? $$context$$;

  String $displayName = "";

  Future<String> get displayName async {
    return await $$context$$?.getPropertyValue('displayName') ?? $displayName;
  }

  String $phoneNumber = "";

  Future<String> get phoneNumber async {
    return await $$context$$?.getPropertyValue('phoneNumber') ?? $phoneNumber;
  }

  String $phoneNumberList = "";

  Future<String> get phoneNumberList async {
    return await $$context$$?.getPropertyValue('phoneNumberList') ??
        $phoneNumberList;
  }

  ChooseContactSuccessCallbackOption({this.$$context$$});

  void setValues(
      {String? displayName, String? phoneNumber, String? phoneNumberList}) {
    if (displayName != null) $displayName = displayName;
    if (phoneNumber != null) $phoneNumber = phoneNumber;
    if (phoneNumberList != null) $phoneNumberList = phoneNumberList;
  }

  Map toJson() {
    return {
      'displayName': $displayName,
      'phoneNumber': $phoneNumber,
      'phoneNumberList': $phoneNumberList
    }..removeWhere((key, value) => value == null);
  }
}

class ChooseFile {
  mpjs.JsObject? $$context$$;

  String $name = "";

  Future<String> get name async {
    return await $$context$$?.getPropertyValue('name') ?? $name;
  }

  String $path = "";

  Future<String> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  num $size = 0;

  Future<num> get size async {
    return await $$context$$?.getPropertyValue('size') ?? $size;
  }

  num $time = 0;

  Future<num> get time async {
    return await $$context$$?.getPropertyValue('time') ?? $time;
  }

  dynamic $type;

  Future<dynamic> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  ChooseFile({this.$$context$$});

  void setValues(
      {String? name, String? path, num? size, num? time, dynamic type}) {
    if (name != null) $name = name;
    if (path != null) $path = path;
    if (size != null) $size = size;
    if (time != null) $time = time;
    if (type != null) $type = type;
  }

  Map toJson() {
    return {
      'name': $name,
      'path': $path,
      'size': $size,
      'time': $time,
      'type': $type
    }..removeWhere((key, value) => value == null);
  }
}

class ChooseImageOption {
  mpjs.JsObject? $$context$$;

  ChooseImageCompleteCallback? $complete;

  Future<ChooseImageCompleteCallback?> get complete async {
    return $complete;
  }

  num? $count;

  Future<num?> get count async {
    return await $$context$$?.getPropertyValue('count') ?? $count;
  }

  ChooseImageFailCallback? $fail;

  Future<ChooseImageFailCallback?> get fail async {
    return $fail;
  }

  Array<dynamic>? $sizeType;

  Future<Array<dynamic>?> get sizeType async {
    return $sizeType;
  }

  Array<dynamic>? $sourceType;

  Future<Array<dynamic>?> get sourceType async {
    return $sourceType;
  }

  ChooseImageSuccessCallback? $success;

  Future<ChooseImageSuccessCallback?> get success async {
    return $success;
  }

  ChooseImageOption({this.$$context$$});

  void setValues(
      {ChooseImageCompleteCallback? complete,
      num? count,
      ChooseImageFailCallback? fail,
      Array<dynamic>? sizeType,
      Array<dynamic>? sourceType,
      ChooseImageSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (count != null) $count = count;
    if (fail != null) $fail = fail;
    if (sizeType != null) $sizeType = sizeType;
    if (sourceType != null) $sourceType = sourceType;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'count': $count,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'sizeType': $sizeType,
      'sourceType': $sourceType,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => ChooseImageSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ChooseImageSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  List<String> $tempFilePaths = <String>[];

  Future<List<String>> get tempFilePaths async {
    return await $$context$$?.getPropertyValue('tempFilePaths') ??
        $tempFilePaths;
  }

  List<ImageFile> $tempFiles = <ImageFile>[];

  Future<List<ImageFile>> get tempFiles async {
    return ((await $$context$$?.getPropertyValue('tempFiles')) as List)
        .map((it) => ImageFile($$context$$: it))
        .toList();
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  ChooseImageSuccessCallbackResult({this.$$context$$});

  void setValues(
      {List<String>? tempFilePaths,
      List<ImageFile>? tempFiles,
      String? errMsg}) {
    if (tempFilePaths != null) $tempFilePaths = tempFilePaths;
    if (tempFiles != null) $tempFiles = tempFiles;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'tempFilePaths': $tempFilePaths,
      'tempFiles': $tempFiles,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class ChooseInvoiceOption {
  mpjs.JsObject? $$context$$;

  ChooseInvoiceCompleteCallback? $complete;

  Future<ChooseInvoiceCompleteCallback?> get complete async {
    return $complete;
  }

  ChooseInvoiceFailCallback? $fail;

  Future<ChooseInvoiceFailCallback?> get fail async {
    return $fail;
  }

  ChooseInvoiceSuccessCallback? $success;

  Future<ChooseInvoiceSuccessCallback?> get success async {
    return $success;
  }

  ChooseInvoiceOption({this.$$context$$});

  void setValues(
      {ChooseInvoiceCompleteCallback? complete,
      ChooseInvoiceFailCallback? fail,
      ChooseInvoiceSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => ChooseInvoiceSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ChooseInvoiceSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $invoiceInfo = "";

  Future<String> get invoiceInfo async {
    return await $$context$$?.getPropertyValue('invoiceInfo') ?? $invoiceInfo;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  ChooseInvoiceSuccessCallbackResult({this.$$context$$});

  void setValues({String? invoiceInfo, String? errMsg}) {
    if (invoiceInfo != null) $invoiceInfo = invoiceInfo;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'invoiceInfo': $invoiceInfo, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class ChooseInvoiceTitleOption {
  mpjs.JsObject? $$context$$;

  ChooseInvoiceTitleCompleteCallback? $complete;

  Future<ChooseInvoiceTitleCompleteCallback?> get complete async {
    return $complete;
  }

  ChooseInvoiceTitleFailCallback? $fail;

  Future<ChooseInvoiceTitleFailCallback?> get fail async {
    return $fail;
  }

  ChooseInvoiceTitleSuccessCallback? $success;

  Future<ChooseInvoiceTitleSuccessCallback?> get success async {
    return $success;
  }

  ChooseInvoiceTitleOption({this.$$context$$});

  void setValues(
      {ChooseInvoiceTitleCompleteCallback? complete,
      ChooseInvoiceTitleFailCallback? fail,
      ChooseInvoiceTitleSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => ChooseInvoiceTitleSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ChooseInvoiceTitleSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $bankAccount = "";

  Future<String> get bankAccount async {
    return await $$context$$?.getPropertyValue('bankAccount') ?? $bankAccount;
  }

  String $bankName = "";

  Future<String> get bankName async {
    return await $$context$$?.getPropertyValue('bankName') ?? $bankName;
  }

  String $companyAddress = "";

  Future<String> get companyAddress async {
    return await $$context$$?.getPropertyValue('companyAddress') ??
        $companyAddress;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  String $taxNumber = "";

  Future<String> get taxNumber async {
    return await $$context$$?.getPropertyValue('taxNumber') ?? $taxNumber;
  }

  String $telephone = "";

  Future<String> get telephone async {
    return await $$context$$?.getPropertyValue('telephone') ?? $telephone;
  }

  String $title = "";

  Future<String> get title async {
    return await $$context$$?.getPropertyValue('title') ?? $title;
  }

  dynamic $type;

  Future<dynamic> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  ChooseInvoiceTitleSuccessCallbackResult({this.$$context$$});

  void setValues(
      {String? bankAccount,
      String? bankName,
      String? companyAddress,
      String? errMsg,
      String? taxNumber,
      String? telephone,
      String? title,
      dynamic type}) {
    if (bankAccount != null) $bankAccount = bankAccount;
    if (bankName != null) $bankName = bankName;
    if (companyAddress != null) $companyAddress = companyAddress;
    if (errMsg != null) $errMsg = errMsg;
    if (taxNumber != null) $taxNumber = taxNumber;
    if (telephone != null) $telephone = telephone;
    if (title != null) $title = title;
    if (type != null) $type = type;
  }

  Map toJson() {
    return {
      'bankAccount': $bankAccount,
      'bankName': $bankName,
      'companyAddress': $companyAddress,
      'errMsg': $errMsg,
      'taxNumber': $taxNumber,
      'telephone': $telephone,
      'title': $title,
      'type': $type
    }..removeWhere((key, value) => value == null);
  }
}

class ChooseLicensePlateOption {
  mpjs.JsObject? $$context$$;

  ChooseLicensePlateCompleteCallback? $complete;

  Future<ChooseLicensePlateCompleteCallback?> get complete async {
    return $complete;
  }

  ChooseLicensePlateFailCallback? $fail;

  Future<ChooseLicensePlateFailCallback?> get fail async {
    return $fail;
  }

  ChooseLicensePlateSuccessCallback? $success;

  Future<ChooseLicensePlateSuccessCallback?> get success async {
    return $success;
  }

  ChooseLicensePlateOption({this.$$context$$});

  void setValues(
      {ChooseLicensePlateCompleteCallback? complete,
      ChooseLicensePlateFailCallback? fail,
      ChooseLicensePlateSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => ChooseLicensePlateSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ChooseLicensePlateSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $plateNumber = "";

  Future<String> get plateNumber async {
    return await $$context$$?.getPropertyValue('plateNumber') ?? $plateNumber;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  ChooseLicensePlateSuccessCallbackResult({this.$$context$$});

  void setValues({String? plateNumber, String? errMsg}) {
    if (plateNumber != null) $plateNumber = plateNumber;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'plateNumber': $plateNumber, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class ChooseLocationOption {
  mpjs.JsObject? $$context$$;

  ChooseLocationCompleteCallback? $complete;

  Future<ChooseLocationCompleteCallback?> get complete async {
    return $complete;
  }

  ChooseLocationFailCallback? $fail;

  Future<ChooseLocationFailCallback?> get fail async {
    return $fail;
  }

  num? $latitude;

  Future<num?> get latitude async {
    return await $$context$$?.getPropertyValue('latitude') ?? $latitude;
  }

  num? $longitude;

  Future<num?> get longitude async {
    return await $$context$$?.getPropertyValue('longitude') ?? $longitude;
  }

  ChooseLocationSuccessCallback? $success;

  Future<ChooseLocationSuccessCallback?> get success async {
    return $success;
  }

  ChooseLocationOption({this.$$context$$});

  void setValues(
      {ChooseLocationCompleteCallback? complete,
      ChooseLocationFailCallback? fail,
      num? latitude,
      num? longitude,
      ChooseLocationSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (latitude != null) $latitude = latitude;
    if (longitude != null) $longitude = longitude;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'latitude': $latitude,
      'longitude': $longitude,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => ChooseLocationSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ChooseLocationSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $address = "";

  Future<String> get address async {
    return await $$context$$?.getPropertyValue('address') ?? $address;
  }

  num $latitude = 0;

  Future<num> get latitude async {
    return await $$context$$?.getPropertyValue('latitude') ?? $latitude;
  }

  num $longitude = 0;

  Future<num> get longitude async {
    return await $$context$$?.getPropertyValue('longitude') ?? $longitude;
  }

  String $name = "";

  Future<String> get name async {
    return await $$context$$?.getPropertyValue('name') ?? $name;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  ChooseLocationSuccessCallbackResult({this.$$context$$});

  void setValues(
      {String? address,
      num? latitude,
      num? longitude,
      String? name,
      String? errMsg}) {
    if (address != null) $address = address;
    if (latitude != null) $latitude = latitude;
    if (longitude != null) $longitude = longitude;
    if (name != null) $name = name;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'address': $address,
      'latitude': $latitude,
      'longitude': $longitude,
      'name': $name,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class ChooseMediaOption {
  mpjs.JsObject? $$context$$;

  dynamic $camera;

  Future<dynamic> get camera async {
    return await $$context$$?.getPropertyValue('camera') ?? $camera;
  }

  ChooseMediaCompleteCallback? $complete;

  Future<ChooseMediaCompleteCallback?> get complete async {
    return $complete;
  }

  num? $count;

  Future<num?> get count async {
    return await $$context$$?.getPropertyValue('count') ?? $count;
  }

  ChooseMediaFailCallback? $fail;

  Future<ChooseMediaFailCallback?> get fail async {
    return $fail;
  }

  num? $maxDuration;

  Future<num?> get maxDuration async {
    return await $$context$$?.getPropertyValue('maxDuration') ?? $maxDuration;
  }

  Array<dynamic>? $mediaType;

  Future<Array<dynamic>?> get mediaType async {
    return $mediaType;
  }

  List<String>? $sizeType;

  Future<List<String>?> get sizeType async {
    return await $$context$$?.getPropertyValue('sizeType') ?? $sizeType;
  }

  Array<dynamic>? $sourceType;

  Future<Array<dynamic>?> get sourceType async {
    return $sourceType;
  }

  ChooseMediaSuccessCallback? $success;

  Future<ChooseMediaSuccessCallback?> get success async {
    return $success;
  }

  ChooseMediaOption({this.$$context$$});

  void setValues(
      {dynamic camera,
      ChooseMediaCompleteCallback? complete,
      num? count,
      ChooseMediaFailCallback? fail,
      num? maxDuration,
      Array<dynamic>? mediaType,
      List<String>? sizeType,
      Array<dynamic>? sourceType,
      ChooseMediaSuccessCallback? success}) {
    if (camera != null) $camera = camera;
    if (complete != null) $complete = complete;
    if (count != null) $count = count;
    if (fail != null) $fail = fail;
    if (maxDuration != null) $maxDuration = maxDuration;
    if (mediaType != null) $mediaType = mediaType;
    if (sizeType != null) $sizeType = sizeType;
    if (sourceType != null) $sourceType = sourceType;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'camera': $camera,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'count': $count,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'maxDuration': $maxDuration,
      'mediaType': $mediaType,
      'sizeType': $sizeType,
      'sourceType': $sourceType,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => ChooseMediaSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ChooseMediaSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  List<MediaFile> $tempFiles = <MediaFile>[];

  Future<List<MediaFile>> get tempFiles async {
    return ((await $$context$$?.getPropertyValue('tempFiles')) as List)
        .map((it) => MediaFile($$context$$: it))
        .toList();
  }

  String $type = "";

  Future<String> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  ChooseMediaSuccessCallbackResult({this.$$context$$});

  void setValues({List<MediaFile>? tempFiles, String? type, String? errMsg}) {
    if (tempFiles != null) $tempFiles = tempFiles;
    if (type != null) $type = type;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'tempFiles': $tempFiles, 'type': $type, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class ChooseMessageFileOption {
  mpjs.JsObject? $$context$$;

  num $count = 0;

  Future<num> get count async {
    return await $$context$$?.getPropertyValue('count') ?? $count;
  }

  ChooseMessageFileCompleteCallback? $complete;

  Future<ChooseMessageFileCompleteCallback?> get complete async {
    return $complete;
  }

  List<String>? $extension;

  Future<List<String>?> get extension async {
    return await $$context$$?.getPropertyValue('extension') ?? $extension;
  }

  ChooseMessageFileFailCallback? $fail;

  Future<ChooseMessageFileFailCallback?> get fail async {
    return $fail;
  }

  ChooseMessageFileSuccessCallback? $success;

  Future<ChooseMessageFileSuccessCallback?> get success async {
    return $success;
  }

  dynamic $type;

  Future<dynamic> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  ChooseMessageFileOption({this.$$context$$});

  void setValues(
      {num? count,
      ChooseMessageFileCompleteCallback? complete,
      List<String>? extension,
      ChooseMessageFileFailCallback? fail,
      ChooseMessageFileSuccessCallback? success,
      dynamic type}) {
    if (count != null) $count = count;
    if (complete != null) $complete = complete;
    if (extension != null) $extension = extension;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
    if (type != null) $type = type;
  }

  Map toJson() {
    return {
      'count': $count,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'extension': $extension,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => ChooseMessageFileSuccessCallbackResult($$context$$: e)])
          : null,
      'type': $type
    }..removeWhere((key, value) => value == null);
  }
}

class ChooseMessageFileSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  List<ChooseFile> $tempFiles = <ChooseFile>[];

  Future<List<ChooseFile>> get tempFiles async {
    return ((await $$context$$?.getPropertyValue('tempFiles')) as List)
        .map((it) => ChooseFile($$context$$: it))
        .toList();
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  ChooseMessageFileSuccessCallbackResult({this.$$context$$});

  void setValues({List<ChooseFile>? tempFiles, String? errMsg}) {
    if (tempFiles != null) $tempFiles = tempFiles;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'tempFiles': $tempFiles, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class ChoosePoiOption {
  mpjs.JsObject? $$context$$;

  ChoosePoiCompleteCallback? $complete;

  Future<ChoosePoiCompleteCallback?> get complete async {
    return $complete;
  }

  ChoosePoiFailCallback? $fail;

  Future<ChoosePoiFailCallback?> get fail async {
    return $fail;
  }

  ChoosePoiSuccessCallback? $success;

  Future<ChoosePoiSuccessCallback?> get success async {
    return $success;
  }

  ChoosePoiOption({this.$$context$$});

  void setValues(
      {ChoosePoiCompleteCallback? complete,
      ChoosePoiFailCallback? fail,
      ChoosePoiSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => ChoosePoiSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ChoosePoiSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $address = "";

  Future<String> get address async {
    return await $$context$$?.getPropertyValue('address') ?? $address;
  }

  num $city = 0;

  Future<num> get city async {
    return await $$context$$?.getPropertyValue('city') ?? $city;
  }

  num $latitude = 0;

  Future<num> get latitude async {
    return await $$context$$?.getPropertyValue('latitude') ?? $latitude;
  }

  num $longitude = 0;

  Future<num> get longitude async {
    return await $$context$$?.getPropertyValue('longitude') ?? $longitude;
  }

  String $name = "";

  Future<String> get name async {
    return await $$context$$?.getPropertyValue('name') ?? $name;
  }

  num $type = 0;

  Future<num> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  ChoosePoiSuccessCallbackResult({this.$$context$$});

  void setValues(
      {String? address,
      num? city,
      num? latitude,
      num? longitude,
      String? name,
      num? type,
      String? errMsg}) {
    if (address != null) $address = address;
    if (city != null) $city = city;
    if (latitude != null) $latitude = latitude;
    if (longitude != null) $longitude = longitude;
    if (name != null) $name = name;
    if (type != null) $type = type;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'address': $address,
      'city': $city,
      'latitude': $latitude,
      'longitude': $longitude,
      'name': $name,
      'type': $type,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class ChooseVideoOption {
  mpjs.JsObject? $$context$$;

  dynamic $camera;

  Future<dynamic> get camera async {
    return await $$context$$?.getPropertyValue('camera') ?? $camera;
  }

  ChooseVideoCompleteCallback? $complete;

  Future<ChooseVideoCompleteCallback?> get complete async {
    return $complete;
  }

  bool? $compressed;

  Future<bool?> get compressed async {
    return await $$context$$?.getPropertyValue('compressed') ?? $compressed;
  }

  ChooseVideoFailCallback? $fail;

  Future<ChooseVideoFailCallback?> get fail async {
    return $fail;
  }

  num? $maxDuration;

  Future<num?> get maxDuration async {
    return await $$context$$?.getPropertyValue('maxDuration') ?? $maxDuration;
  }

  Array<dynamic>? $sourceType;

  Future<Array<dynamic>?> get sourceType async {
    return $sourceType;
  }

  ChooseVideoSuccessCallback? $success;

  Future<ChooseVideoSuccessCallback?> get success async {
    return $success;
  }

  ChooseVideoOption({this.$$context$$});

  void setValues(
      {dynamic camera,
      ChooseVideoCompleteCallback? complete,
      bool? compressed,
      ChooseVideoFailCallback? fail,
      num? maxDuration,
      Array<dynamic>? sourceType,
      ChooseVideoSuccessCallback? success}) {
    if (camera != null) $camera = camera;
    if (complete != null) $complete = complete;
    if (compressed != null) $compressed = compressed;
    if (fail != null) $fail = fail;
    if (maxDuration != null) $maxDuration = maxDuration;
    if (sourceType != null) $sourceType = sourceType;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'camera': $camera,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'compressed': $compressed,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'maxDuration': $maxDuration,
      'sourceType': $sourceType,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => ChooseVideoSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ChooseVideoSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  num $duration = 0;

  Future<num> get duration async {
    return await $$context$$?.getPropertyValue('duration') ?? $duration;
  }

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  num $size = 0;

  Future<num> get size async {
    return await $$context$$?.getPropertyValue('size') ?? $size;
  }

  String $tempFilePath = "";

  Future<String> get tempFilePath async {
    return await $$context$$?.getPropertyValue('tempFilePath') ?? $tempFilePath;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  ChooseVideoSuccessCallbackResult({this.$$context$$});

  void setValues(
      {num? duration,
      num? height,
      num? size,
      String? tempFilePath,
      num? width,
      String? errMsg}) {
    if (duration != null) $duration = duration;
    if (height != null) $height = height;
    if (size != null) $size = size;
    if (tempFilePath != null) $tempFilePath = tempFilePath;
    if (width != null) $width = width;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'duration': $duration,
      'height': $height,
      'size': $size,
      'tempFilePath': $tempFilePath,
      'width': $width,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class ClearFiltersOption {
  mpjs.JsObject? $$context$$;

  ClearFiltersCompleteCallback? $complete;

  Future<ClearFiltersCompleteCallback?> get complete async {
    return $complete;
  }

  ClearFiltersFailCallback? $fail;

  Future<ClearFiltersFailCallback?> get fail async {
    return $fail;
  }

  ClearFiltersSuccessCallback? $success;

  Future<ClearFiltersSuccessCallback?> get success async {
    return $success;
  }

  ClearFiltersOption({this.$$context$$});

  void setValues(
      {ClearFiltersCompleteCallback? complete,
      ClearFiltersFailCallback? fail,
      ClearFiltersSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ClearMakeupsOption {
  mpjs.JsObject? $$context$$;

  ClearMakeupsCompleteCallback? $complete;

  Future<ClearMakeupsCompleteCallback?> get complete async {
    return $complete;
  }

  ClearMakeupsFailCallback? $fail;

  Future<ClearMakeupsFailCallback?> get fail async {
    return $fail;
  }

  ClearMakeupsSuccessCallback? $success;

  Future<ClearMakeupsSuccessCallback?> get success async {
    return $success;
  }

  ClearMakeupsOption({this.$$context$$});

  void setValues(
      {ClearMakeupsCompleteCallback? complete,
      ClearMakeupsFailCallback? fail,
      ClearMakeupsSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ClearOption {
  mpjs.JsObject? $$context$$;

  ClearCompleteCallback? $complete;

  Future<ClearCompleteCallback?> get complete async {
    return $complete;
  }

  ClearFailCallback? $fail;

  Future<ClearFailCallback?> get fail async {
    return $fail;
  }

  ClearSuccessCallback? $success;

  Future<ClearSuccessCallback?> get success async {
    return $success;
  }

  ClearOption({this.$$context$$});

  void setValues(
      {ClearCompleteCallback? complete,
      ClearFailCallback? fail,
      ClearSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ClearStickersOption {
  mpjs.JsObject? $$context$$;

  ClearStickersCompleteCallback? $complete;

  Future<ClearStickersCompleteCallback?> get complete async {
    return $complete;
  }

  ClearStickersFailCallback? $fail;

  Future<ClearStickersFailCallback?> get fail async {
    return $fail;
  }

  ClearStickersSuccessCallback? $success;

  Future<ClearStickersSuccessCallback?> get success async {
    return $success;
  }

  ClearStickersOption({this.$$context$$});

  void setValues(
      {ClearStickersCompleteCallback? complete,
      ClearStickersFailCallback? fail,
      ClearStickersSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ClearStorageOption {
  mpjs.JsObject? $$context$$;

  ClearStorageCompleteCallback? $complete;

  Future<ClearStorageCompleteCallback?> get complete async {
    return $complete;
  }

  ClearStorageFailCallback? $fail;

  Future<ClearStorageFailCallback?> get fail async {
    return $fail;
  }

  ClearStorageSuccessCallback? $success;

  Future<ClearStorageSuccessCallback?> get success async {
    return $success;
  }

  ClearStorageOption({this.$$context$$});

  void setValues(
      {ClearStorageCompleteCallback? complete,
      ClearStorageFailCallback? fail,
      ClearStorageSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ClientRect {
  mpjs.JsObject? $$context$$;

  num $bottom = 0;

  Future<num> get bottom async {
    return await $$context$$?.getPropertyValue('bottom') ?? $bottom;
  }

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  num $left = 0;

  Future<num> get left async {
    return await $$context$$?.getPropertyValue('left') ?? $left;
  }

  num $right = 0;

  Future<num> get right async {
    return await $$context$$?.getPropertyValue('right') ?? $right;
  }

  num $top = 0;

  Future<num> get top async {
    return await $$context$$?.getPropertyValue('top') ?? $top;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  ClientRect({this.$$context$$});

  void setValues(
      {num? bottom, num? height, num? left, num? right, num? top, num? width}) {
    if (bottom != null) $bottom = bottom;
    if (height != null) $height = height;
    if (left != null) $left = left;
    if (right != null) $right = right;
    if (top != null) $top = top;
    if (width != null) $width = width;
  }

  Map toJson() {
    return {
      'bottom': $bottom,
      'height': $height,
      'left': $left,
      'right': $right,
      'top': $top,
      'width': $width
    }..removeWhere((key, value) => value == null);
  }
}

class CloseBLEConnectionOption {
  mpjs.JsObject? $$context$$;

  String $deviceId = "";

  Future<String> get deviceId async {
    return await $$context$$?.getPropertyValue('deviceId') ?? $deviceId;
  }

  CloseBLEConnectionCompleteCallback? $complete;

  Future<CloseBLEConnectionCompleteCallback?> get complete async {
    return $complete;
  }

  CloseBLEConnectionFailCallback? $fail;

  Future<CloseBLEConnectionFailCallback?> get fail async {
    return $fail;
  }

  CloseBLEConnectionSuccessCallback? $success;

  Future<CloseBLEConnectionSuccessCallback?> get success async {
    return $success;
  }

  CloseBLEConnectionOption({this.$$context$$});

  void setValues(
      {String? deviceId,
      CloseBLEConnectionCompleteCallback? complete,
      CloseBLEConnectionFailCallback? fail,
      CloseBLEConnectionSuccessCallback? success}) {
    if (deviceId != null) $deviceId = deviceId;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'deviceId': $deviceId,
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => BluetoothError($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class CloseBluetoothAdapterOption {
  mpjs.JsObject? $$context$$;

  CloseBluetoothAdapterCompleteCallback? $complete;

  Future<CloseBluetoothAdapterCompleteCallback?> get complete async {
    return $complete;
  }

  CloseBluetoothAdapterFailCallback? $fail;

  Future<CloseBluetoothAdapterFailCallback?> get fail async {
    return $fail;
  }

  CloseBluetoothAdapterSuccessCallback? $success;

  Future<CloseBluetoothAdapterSuccessCallback?> get success async {
    return $success;
  }

  CloseBluetoothAdapterOption({this.$$context$$});

  void setValues(
      {CloseBluetoothAdapterCompleteCallback? complete,
      CloseBluetoothAdapterFailCallback? fail,
      CloseBluetoothAdapterSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => BluetoothError($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class CloseFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  CloseFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class CloseSocketOption {
  mpjs.JsObject? $$context$$;

  num? $code;

  Future<num?> get code async {
    return await $$context$$?.getPropertyValue('code') ?? $code;
  }

  CloseSocketCompleteCallback? $complete;

  Future<CloseSocketCompleteCallback?> get complete async {
    return $complete;
  }

  CloseSocketFailCallback? $fail;

  Future<CloseSocketFailCallback?> get fail async {
    return $fail;
  }

  String? $reason;

  Future<String?> get reason async {
    return await $$context$$?.getPropertyValue('reason') ?? $reason;
  }

  CloseSocketSuccessCallback? $success;

  Future<CloseSocketSuccessCallback?> get success async {
    return $success;
  }

  CloseSocketOption({this.$$context$$});

  void setValues(
      {num? code,
      CloseSocketCompleteCallback? complete,
      CloseSocketFailCallback? fail,
      String? reason,
      CloseSocketSuccessCallback? success}) {
    if (code != null) $code = code;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (reason != null) $reason = reason;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'code': $code,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'reason': $reason,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class CloseSyncOption {
  mpjs.JsObject? $$context$$;

  String $fd = "";

  Future<String> get fd async {
    return await $$context$$?.getPropertyValue('fd') ?? $fd;
  }

  CloseSyncOption({this.$$context$$});

  void setValues({String? fd}) {
    if (fd != null) $fd = fd;
  }

  Map toJson() {
    return {'fd': $fd}..removeWhere((key, value) => value == null);
  }
}

// class Color {
//   mpjs.JsObject? $$context$$;

//   Color({this.$$context$$});

//   Map toJson() {
//     return {}..removeWhere((key, value) => value == null);
//   }
// }

class CompressImageOption {
  mpjs.JsObject? $$context$$;

  String $src = "";

  Future<String> get src async {
    return await $$context$$?.getPropertyValue('src') ?? $src;
  }

  CompressImageCompleteCallback? $complete;

  Future<CompressImageCompleteCallback?> get complete async {
    return $complete;
  }

  num? $compressHeight;

  Future<num?> get compressHeight async {
    return await $$context$$?.getPropertyValue('compressHeight') ??
        $compressHeight;
  }

  num? $compressedWidth;

  Future<num?> get compressedWidth async {
    return await $$context$$?.getPropertyValue('compressedWidth') ??
        $compressedWidth;
  }

  CompressImageFailCallback? $fail;

  Future<CompressImageFailCallback?> get fail async {
    return $fail;
  }

  num? $quality;

  Future<num?> get quality async {
    return await $$context$$?.getPropertyValue('quality') ?? $quality;
  }

  CompressImageSuccessCallback? $success;

  Future<CompressImageSuccessCallback?> get success async {
    return $success;
  }

  CompressImageOption({this.$$context$$});

  void setValues(
      {String? src,
      CompressImageCompleteCallback? complete,
      num? compressHeight,
      num? compressedWidth,
      CompressImageFailCallback? fail,
      num? quality,
      CompressImageSuccessCallback? success}) {
    if (src != null) $src = src;
    if (complete != null) $complete = complete;
    if (compressHeight != null) $compressHeight = compressHeight;
    if (compressedWidth != null) $compressedWidth = compressedWidth;
    if (fail != null) $fail = fail;
    if (quality != null) $quality = quality;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'src': $src,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'compressHeight': $compressHeight,
      'compressedWidth': $compressedWidth,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'quality': $quality,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => CompressImageSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class CompressImageSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $tempFilePath = "";

  Future<String> get tempFilePath async {
    return await $$context$$?.getPropertyValue('tempFilePath') ?? $tempFilePath;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  CompressImageSuccessCallbackResult({this.$$context$$});

  void setValues({String? tempFilePath, String? errMsg}) {
    if (tempFilePath != null) $tempFilePath = tempFilePath;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'tempFilePath': $tempFilePath, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class CompressVideoOption {
  mpjs.JsObject? $$context$$;

  num $bitrate = 0;

  Future<num> get bitrate async {
    return await $$context$$?.getPropertyValue('bitrate') ?? $bitrate;
  }

  num $fps = 0;

  Future<num> get fps async {
    return await $$context$$?.getPropertyValue('fps') ?? $fps;
  }

  dynamic $quality;

  Future<dynamic> get quality async {
    return await $$context$$?.getPropertyValue('quality') ?? $quality;
  }

  num $resolution = 0;

  Future<num> get resolution async {
    return await $$context$$?.getPropertyValue('resolution') ?? $resolution;
  }

  String $src = "";

  Future<String> get src async {
    return await $$context$$?.getPropertyValue('src') ?? $src;
  }

  CompressVideoCompleteCallback? $complete;

  Future<CompressVideoCompleteCallback?> get complete async {
    return $complete;
  }

  CompressVideoFailCallback? $fail;

  Future<CompressVideoFailCallback?> get fail async {
    return $fail;
  }

  CompressVideoSuccessCallback? $success;

  Future<CompressVideoSuccessCallback?> get success async {
    return $success;
  }

  CompressVideoOption({this.$$context$$});

  void setValues(
      {num? bitrate,
      num? fps,
      dynamic quality,
      num? resolution,
      String? src,
      CompressVideoCompleteCallback? complete,
      CompressVideoFailCallback? fail,
      CompressVideoSuccessCallback? success}) {
    if (bitrate != null) $bitrate = bitrate;
    if (fps != null) $fps = fps;
    if (quality != null) $quality = quality;
    if (resolution != null) $resolution = resolution;
    if (src != null) $src = src;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'bitrate': $bitrate,
      'fps': $fps,
      'quality': $quality,
      'resolution': $resolution,
      'src': $src,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => CompressVideoSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class CompressVideoSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $size = "";

  Future<String> get size async {
    return await $$context$$?.getPropertyValue('size') ?? $size;
  }

  String $tempFilePath = "";

  Future<String> get tempFilePath async {
    return await $$context$$?.getPropertyValue('tempFilePath') ?? $tempFilePath;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  CompressVideoSuccessCallbackResult({this.$$context$$});

  void setValues({String? size, String? tempFilePath, String? errMsg}) {
    if (size != null) $size = size;
    if (tempFilePath != null) $tempFilePath = tempFilePath;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'size': $size, 'tempFilePath': $tempFilePath, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class ConnectSocketOption {
  mpjs.JsObject? $$context$$;

  String $url = "";

  Future<String> get url async {
    return await $$context$$?.getPropertyValue('url') ?? $url;
  }

  ConnectSocketCompleteCallback? $complete;

  Future<ConnectSocketCompleteCallback?> get complete async {
    return $complete;
  }

  ConnectSocketFailCallback? $fail;

  Future<ConnectSocketFailCallback?> get fail async {
    return $fail;
  }

  bool? $forceCellularNetwork;

  Future<bool?> get forceCellularNetwork async {
    return await $$context$$?.getPropertyValue('forceCellularNetwork') ??
        $forceCellularNetwork;
  }

  IAnyObject? $header;

  Future<IAnyObject?> get header async {
    return IAnyObject($$context$$: $$context$$?.getProperty('header'));
  }

  bool? $perMessageDeflate;

  Future<bool?> get perMessageDeflate async {
    return await $$context$$?.getPropertyValue('perMessageDeflate') ??
        $perMessageDeflate;
  }

  List<String>? $protocols;

  Future<List<String>?> get protocols async {
    return await $$context$$?.getPropertyValue('protocols') ?? $protocols;
  }

  ConnectSocketSuccessCallback? $success;

  Future<ConnectSocketSuccessCallback?> get success async {
    return $success;
  }

  bool? $tcpNoDelay;

  Future<bool?> get tcpNoDelay async {
    return await $$context$$?.getPropertyValue('tcpNoDelay') ?? $tcpNoDelay;
  }

  num? $timeout;

  Future<num?> get timeout async {
    return await $$context$$?.getPropertyValue('timeout') ?? $timeout;
  }

  ConnectSocketOption({this.$$context$$});

  void setValues(
      {String? url,
      ConnectSocketCompleteCallback? complete,
      ConnectSocketFailCallback? fail,
      bool? forceCellularNetwork,
      IAnyObject? header,
      bool? perMessageDeflate,
      List<String>? protocols,
      ConnectSocketSuccessCallback? success,
      bool? tcpNoDelay,
      num? timeout}) {
    if (url != null) $url = url;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (forceCellularNetwork != null)
      $forceCellularNetwork = forceCellularNetwork;
    if (header != null) $header = header;
    if (perMessageDeflate != null) $perMessageDeflate = perMessageDeflate;
    if (protocols != null) $protocols = protocols;
    if (success != null) $success = success;
    if (tcpNoDelay != null) $tcpNoDelay = tcpNoDelay;
    if (timeout != null) $timeout = timeout;
  }

  Map toJson() {
    return {
      'url': $url,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'forceCellularNetwork': $forceCellularNetwork,
      'header': $header,
      'perMessageDeflate': $perMessageDeflate,
      'protocols': $protocols,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'tcpNoDelay': $tcpNoDelay,
      'timeout': $timeout
    }..removeWhere((key, value) => value == null);
  }
}

class ConnectWifiOption {
  mpjs.JsObject? $$context$$;

  String $SSID = "";

  Future<String> get SSID async {
    return await $$context$$?.getPropertyValue('SSID') ?? $SSID;
  }

  String $password = "";

  Future<String> get password async {
    return await $$context$$?.getPropertyValue('password') ?? $password;
  }

  String? $BSSID;

  Future<String?> get BSSID async {
    return await $$context$$?.getPropertyValue('BSSID') ?? $BSSID;
  }

  ConnectWifiCompleteCallback? $complete;

  Future<ConnectWifiCompleteCallback?> get complete async {
    return $complete;
  }

  ConnectWifiFailCallback? $fail;

  Future<ConnectWifiFailCallback?> get fail async {
    return $fail;
  }

  bool? $maunal;

  Future<bool?> get maunal async {
    return await $$context$$?.getPropertyValue('maunal') ?? $maunal;
  }

  bool? $partialInfo;

  Future<bool?> get partialInfo async {
    return await $$context$$?.getPropertyValue('partialInfo') ?? $partialInfo;
  }

  ConnectWifiSuccessCallback? $success;

  Future<ConnectWifiSuccessCallback?> get success async {
    return $success;
  }

  ConnectWifiOption({this.$$context$$});

  void setValues(
      {String? SSID,
      String? password,
      String? BSSID,
      ConnectWifiCompleteCallback? complete,
      ConnectWifiFailCallback? fail,
      bool? maunal,
      bool? partialInfo,
      ConnectWifiSuccessCallback? success}) {
    if (SSID != null) $SSID = SSID;
    if (password != null) $password = password;
    if (BSSID != null) $BSSID = BSSID;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (maunal != null) $maunal = maunal;
    if (partialInfo != null) $partialInfo = partialInfo;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'SSID': $SSID,
      'password': $password,
      'BSSID': $BSSID,
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => WifiError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => WifiError($$context$$: e)])
          : null,
      'maunal': $maunal,
      'partialInfo': $partialInfo,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => WifiError($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class Constraints {
  mpjs.JsObject? $$context$$;

  bool? $disableNormalization;

  Future<bool?> get disableNormalization async {
    return await $$context$$?.getPropertyValue('disableNormalization') ??
        $disableNormalization;
  }

  Constraints({this.$$context$$});

  void setValues({bool? disableNormalization}) {
    if (disableNormalization != null)
      $disableNormalization = disableNormalization;
  }

  Map toJson() {
    return {'disableNormalization': $disableNormalization}
      ..removeWhere((key, value) => value == null);
  }
}

class ContextCallbackResult {
  mpjs.JsObject? $$context$$;

  IAnyObject $context = IAnyObject();

  Future<IAnyObject> get context async {
    return IAnyObject($$context$$: $$context$$?.getProperty('context'));
  }

  ContextCallbackResult({this.$$context$$});

  void setValues({IAnyObject? context}) {
    if (context != null) $context = context;
  }

  Map toJson() {
    return {'context': $context}..removeWhere((key, value) => value == null);
  }
}

class CopyFileFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  CopyFileFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class CopyFileOption {
  mpjs.JsObject? $$context$$;

  String $destPath = "";

  Future<String> get destPath async {
    return await $$context$$?.getPropertyValue('destPath') ?? $destPath;
  }

  String $srcPath = "";

  Future<String> get srcPath async {
    return await $$context$$?.getPropertyValue('srcPath') ?? $srcPath;
  }

  CopyFileCompleteCallback? $complete;

  Future<CopyFileCompleteCallback?> get complete async {
    return $complete;
  }

  CopyFileFailCallback? $fail;

  Future<CopyFileFailCallback?> get fail async {
    return $fail;
  }

  CopyFileSuccessCallback? $success;

  Future<CopyFileSuccessCallback?> get success async {
    return $success;
  }

  CopyFileOption({this.$$context$$});

  void setValues(
      {String? destPath,
      String? srcPath,
      CopyFileCompleteCallback? complete,
      CopyFileFailCallback? fail,
      CopyFileSuccessCallback? success}) {
    if (destPath != null) $destPath = destPath;
    if (srcPath != null) $srcPath = srcPath;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'destPath': $destPath,
      'srcPath': $srcPath,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => CopyFileFailCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class CreateBLEConnectionOption {
  mpjs.JsObject? $$context$$;

  String $deviceId = "";

  Future<String> get deviceId async {
    return await $$context$$?.getPropertyValue('deviceId') ?? $deviceId;
  }

  CreateBLEConnectionCompleteCallback? $complete;

  Future<CreateBLEConnectionCompleteCallback?> get complete async {
    return $complete;
  }

  CreateBLEConnectionFailCallback? $fail;

  Future<CreateBLEConnectionFailCallback?> get fail async {
    return $fail;
  }

  CreateBLEConnectionSuccessCallback? $success;

  Future<CreateBLEConnectionSuccessCallback?> get success async {
    return $success;
  }

  num? $timeout;

  Future<num?> get timeout async {
    return await $$context$$?.getPropertyValue('timeout') ?? $timeout;
  }

  CreateBLEConnectionOption({this.$$context$$});

  void setValues(
      {String? deviceId,
      CreateBLEConnectionCompleteCallback? complete,
      CreateBLEConnectionFailCallback? fail,
      CreateBLEConnectionSuccessCallback? success,
      num? timeout}) {
    if (deviceId != null) $deviceId = deviceId;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
    if (timeout != null) $timeout = timeout;
  }

  Map toJson() {
    return {
      'deviceId': $deviceId,
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'timeout': $timeout
    }..removeWhere((key, value) => value == null);
  }
}

class CreateBLEPeripheralServerOption {
  mpjs.JsObject? $$context$$;

  CreateBLEPeripheralServerCompleteCallback? $complete;

  Future<CreateBLEPeripheralServerCompleteCallback?> get complete async {
    return $complete;
  }

  CreateBLEPeripheralServerFailCallback? $fail;

  Future<CreateBLEPeripheralServerFailCallback?> get fail async {
    return $fail;
  }

  CreateBLEPeripheralServerSuccessCallback? $success;

  Future<CreateBLEPeripheralServerSuccessCallback?> get success async {
    return $success;
  }

  CreateBLEPeripheralServerOption({this.$$context$$});

  void setValues(
      {CreateBLEPeripheralServerCompleteCallback? complete,
      CreateBLEPeripheralServerFailCallback? fail,
      CreateBLEPeripheralServerSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [
              (e) =>
                  CreateBLEPeripheralServerSuccessCallbackResult($$context$$: e)
            ])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class CreateBLEPeripheralServerSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  BLEPeripheralServer $server = BLEPeripheralServer();

  Future<BLEPeripheralServer> get server async {
    return BLEPeripheralServer($$context$$: $$context$$?.getProperty('server'));
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  CreateBLEPeripheralServerSuccessCallbackResult({this.$$context$$});

  void setValues({BLEPeripheralServer? server, String? errMsg}) {
    if (server != null) $server = server;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'server': $server, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class CreateCacheManagerOption {
  mpjs.JsObject? $$context$$;

  ExtraOption? $extra;

  Future<ExtraOption?> get extra async {
    return ExtraOption($$context$$: $$context$$?.getProperty('extra'));
  }

  num? $maxAge;

  Future<num?> get maxAge async {
    return await $$context$$?.getPropertyValue('maxAge') ?? $maxAge;
  }

  dynamic $mode;

  Future<dynamic> get mode async {
    return await $$context$$?.getPropertyValue('mode') ?? $mode;
  }

  String? $origin;

  Future<String?> get origin async {
    return await $$context$$?.getPropertyValue('origin') ?? $origin;
  }

  CreateCacheManagerOption({this.$$context$$});

  void setValues(
      {ExtraOption? extra, num? maxAge, dynamic mode, String? origin}) {
    if (extra != null) $extra = extra;
    if (maxAge != null) $maxAge = maxAge;
    if (mode != null) $mode = mode;
    if (origin != null) $origin = origin;
  }

  Map toJson() {
    return {
      'extra': $extra,
      'maxAge': $maxAge,
      'mode': $mode,
      'origin': $origin
    }..removeWhere((key, value) => value == null);
  }
}

class CreateInnerAudioContextOption {
  mpjs.JsObject? $$context$$;

  bool? $useWebAudioImplement;

  Future<bool?> get useWebAudioImplement async {
    return await $$context$$?.getPropertyValue('useWebAudioImplement') ??
        $useWebAudioImplement;
  }

  CreateInnerAudioContextOption({this.$$context$$});

  void setValues({bool? useWebAudioImplement}) {
    if (useWebAudioImplement != null)
      $useWebAudioImplement = useWebAudioImplement;
  }

  Map toJson() {
    return {'useWebAudioImplement': $useWebAudioImplement}
      ..removeWhere((key, value) => value == null);
  }
}

class CreateIntersectionObserverOption {
  mpjs.JsObject? $$context$$;

  num? $initialRatio;

  Future<num?> get initialRatio async {
    return await $$context$$?.getPropertyValue('initialRatio') ?? $initialRatio;
  }

  bool? $observeAll;

  Future<bool?> get observeAll async {
    return await $$context$$?.getPropertyValue('observeAll') ?? $observeAll;
  }

  List<num>? $thresholds;

  Future<List<num>?> get thresholds async {
    return await $$context$$?.getPropertyValue('thresholds') ?? $thresholds;
  }

  CreateIntersectionObserverOption({this.$$context$$});

  void setValues({num? initialRatio, bool? observeAll, List<num>? thresholds}) {
    if (initialRatio != null) $initialRatio = initialRatio;
    if (observeAll != null) $observeAll = observeAll;
    if (thresholds != null) $thresholds = thresholds;
  }

  Map toJson() {
    return {
      'initialRatio': $initialRatio,
      'observeAll': $observeAll,
      'thresholds': $thresholds
    }..removeWhere((key, value) => value == null);
  }
}

class CreateInterstitialAdOption {
  mpjs.JsObject? $$context$$;

  String $adUnitId = "";

  Future<String> get adUnitId async {
    return await $$context$$?.getPropertyValue('adUnitId') ?? $adUnitId;
  }

  CreateInterstitialAdOption({this.$$context$$});

  void setValues({String? adUnitId}) {
    if (adUnitId != null) $adUnitId = adUnitId;
  }

  Map toJson() {
    return {'adUnitId': $adUnitId}..removeWhere((key, value) => value == null);
  }
}

class CreateMediaRecorderOption {
  mpjs.JsObject? $$context$$;

  num? $duration;

  Future<num?> get duration async {
    return await $$context$$?.getPropertyValue('duration') ?? $duration;
  }

  num? $fps;

  Future<num?> get fps async {
    return await $$context$$?.getPropertyValue('fps') ?? $fps;
  }

  num? $gop;

  Future<num?> get gop async {
    return await $$context$$?.getPropertyValue('gop') ?? $gop;
  }

  num? $videoBitsPerSecond;

  Future<num?> get videoBitsPerSecond async {
    return await $$context$$?.getPropertyValue('videoBitsPerSecond') ??
        $videoBitsPerSecond;
  }

  CreateMediaRecorderOption({this.$$context$$});

  void setValues({num? duration, num? fps, num? gop, num? videoBitsPerSecond}) {
    if (duration != null) $duration = duration;
    if (fps != null) $fps = fps;
    if (gop != null) $gop = gop;
    if (videoBitsPerSecond != null) $videoBitsPerSecond = videoBitsPerSecond;
  }

  Map toJson() {
    return {
      'duration': $duration,
      'fps': $fps,
      'gop': $gop,
      'videoBitsPerSecond': $videoBitsPerSecond
    }..removeWhere((key, value) => value == null);
  }
}

class CreateOffscreenCanvasOption {
  mpjs.JsObject? $$context$$;

  dynamic $compInst;

  Future<dynamic> get compInst async {
    return await $$context$$?.getPropertyValue('compInst') ?? $compInst;
  }

  num? $height;

  Future<num?> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  dynamic $type;

  Future<dynamic> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  num? $width;

  Future<num?> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  CreateOffscreenCanvasOption({this.$$context$$});

  void setValues({dynamic compInst, num? height, dynamic type, num? width}) {
    if (compInst != null) $compInst = compInst;
    if (height != null) $height = height;
    if (type != null) $type = type;
    if (width != null) $width = width;
  }

  Map toJson() {
    return {
      'compInst': $compInst,
      'height': $height,
      'type': $type,
      'width': $width
    }..removeWhere((key, value) => value == null);
  }
}

class CreateRewardedVideoAdOption {
  mpjs.JsObject? $$context$$;

  String $adUnitId = "";

  Future<String> get adUnitId async {
    return await $$context$$?.getPropertyValue('adUnitId') ?? $adUnitId;
  }

  bool? $multiton;

  Future<bool?> get multiton async {
    return await $$context$$?.getPropertyValue('multiton') ?? $multiton;
  }

  CreateRewardedVideoAdOption({this.$$context$$});

  void setValues({String? adUnitId, bool? multiton}) {
    if (adUnitId != null) $adUnitId = adUnitId;
    if (multiton != null) $multiton = multiton;
  }

  Map toJson() {
    return {'adUnitId': $adUnitId, 'multiton': $multiton}
      ..removeWhere((key, value) => value == null);
  }
}

class CreateWorkerOption {
  mpjs.JsObject? $$context$$;

  bool? $useExperimentalWorker;

  Future<bool?> get useExperimentalWorker async {
    return await $$context$$?.getPropertyValue('useExperimentalWorker') ??
        $useExperimentalWorker;
  }

  CreateWorkerOption({this.$$context$$});

  void setValues({bool? useExperimentalWorker}) {
    if (useExperimentalWorker != null)
      $useExperimentalWorker = useExperimentalWorker;
  }

  Map toJson() {
    return {'useExperimentalWorker': $useExperimentalWorker}
      ..removeWhere((key, value) => value == null);
  }
}

class CropImageOption {
  mpjs.JsObject? $$context$$;

  dynamic $cropScale;

  Future<dynamic> get cropScale async {
    return await $$context$$?.getPropertyValue('cropScale') ?? $cropScale;
  }

  String $src = "";

  Future<String> get src async {
    return await $$context$$?.getPropertyValue('src') ?? $src;
  }

  CropImageCompleteCallback? $complete;

  Future<CropImageCompleteCallback?> get complete async {
    return $complete;
  }

  CropImageFailCallback? $fail;

  Future<CropImageFailCallback?> get fail async {
    return $fail;
  }

  CropImageSuccessCallback? $success;

  Future<CropImageSuccessCallback?> get success async {
    return $success;
  }

  CropImageOption({this.$$context$$});

  void setValues(
      {dynamic cropScale,
      String? src,
      CropImageCompleteCallback? complete,
      CropImageFailCallback? fail,
      CropImageSuccessCallback? success}) {
    if (cropScale != null) $cropScale = cropScale;
    if (src != null) $src = src;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'cropScale': $cropScale,
      'src': $src,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => EditImageSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class CurrentState {
  mpjs.JsObject? $$context$$;

  num $logCount = 0;

  Future<num> get logCount async {
    return await $$context$$?.getPropertyValue('logCount') ?? $logCount;
  }

  num $maxLogCount = 0;

  Future<num> get maxLogCount async {
    return await $$context$$?.getPropertyValue('maxLogCount') ?? $maxLogCount;
  }

  num $maxSize = 0;

  Future<num> get maxSize async {
    return await $$context$$?.getPropertyValue('maxSize') ?? $maxSize;
  }

  num $size = 0;

  Future<num> get size async {
    return await $$context$$?.getPropertyValue('size') ?? $size;
  }

  CurrentState({this.$$context$$});

  void setValues({num? logCount, num? maxLogCount, num? maxSize, num? size}) {
    if (logCount != null) $logCount = logCount;
    if (maxLogCount != null) $maxLogCount = maxLogCount;
    if (maxSize != null) $maxSize = maxSize;
    if (size != null) $size = size;
  }

  Map toJson() {
    return {
      'logCount': $logCount,
      'maxLogCount': $maxLogCount,
      'maxSize': $maxSize,
      'size': $size
    }..removeWhere((key, value) => value == null);
  }
}

class Danmu {
  mpjs.JsObject? $$context$$;

  String $text = "";

  Future<String> get text async {
    return await $$context$$?.getPropertyValue('text') ?? $text;
  }

  String? $color;

  Future<String?> get color async {
    return await $$context$$?.getPropertyValue('color') ?? $color;
  }

  Danmu({this.$$context$$});

  void setValues({String? text, String? color}) {
    if (text != null) $text = text;
    if (color != null) $color = color;
  }

  Map toJson() {
    return {'text': $text, 'color': $color}
      ..removeWhere((key, value) => value == null);
  }
}

class DecayOption {
  mpjs.JsObject? $$context$$;

  List<dynamic>? $clamp;

  Future<List<dynamic>?> get clamp async {
    return await $$context$$?.getPropertyValue('clamp') ?? $clamp;
  }

  num? $deceleration;

  Future<num?> get deceleration async {
    return await $$context$$?.getPropertyValue('deceleration') ?? $deceleration;
  }

  num? $velocity;

  Future<num?> get velocity async {
    return await $$context$$?.getPropertyValue('velocity') ?? $velocity;
  }

  num? $velocityFactor;

  Future<num?> get velocityFactor async {
    return await $$context$$?.getPropertyValue('velocityFactor') ??
        $velocityFactor;
  }

  DecayOption({this.$$context$$});

  void setValues(
      {List<dynamic>? clamp,
      num? deceleration,
      num? velocity,
      num? velocityFactor}) {
    if (clamp != null) $clamp = clamp;
    if (deceleration != null) $deceleration = deceleration;
    if (velocity != null) $velocity = velocity;
    if (velocityFactor != null) $velocityFactor = velocityFactor;
  }

  Map toJson() {
    return {
      'clamp': $clamp,
      'deceleration': $deceleration,
      'velocity': $velocity,
      'velocityFactor': $velocityFactor
    }..removeWhere((key, value) => value == null);
  }
}

class DescOption {
  mpjs.JsObject? $$context$$;

  String? $style;

  Future<String?> get style async {
    return await $$context$$?.getPropertyValue('style') ?? $style;
  }

  String? $variant;

  Future<String?> get variant async {
    return await $$context$$?.getPropertyValue('variant') ?? $variant;
  }

  String? $weight;

  Future<String?> get weight async {
    return await $$context$$?.getPropertyValue('weight') ?? $weight;
  }

  DescOption({this.$$context$$});

  void setValues({String? style, String? variant, String? weight}) {
    if (style != null) $style = style;
    if (variant != null) $variant = variant;
    if (weight != null) $weight = weight;
  }

  Map toJson() {
    return {'style': $style, 'variant': $variant, 'weight': $weight}
      ..removeWhere((key, value) => value == null);
  }
}

class DescriptorPermission {
  mpjs.JsObject? $$context$$;

  bool? $read;

  Future<bool?> get read async {
    return await $$context$$?.getPropertyValue('read') ?? $read;
  }

  bool? $write;

  Future<bool?> get write async {
    return await $$context$$?.getPropertyValue('write') ?? $write;
  }

  DescriptorPermission({this.$$context$$});

  void setValues({bool? read, bool? write}) {
    if (read != null) $read = read;
    if (write != null) $write = write;
  }

  Map toJson() {
    return {'read': $read, 'write': $write}
      ..removeWhere((key, value) => value == null);
  }
}

class DestinationOption {
  mpjs.JsObject? $$context$$;

  num $latitude = 0;

  Future<num> get latitude async {
    return await $$context$$?.getPropertyValue('latitude') ?? $latitude;
  }

  num $longitude = 0;

  Future<num> get longitude async {
    return await $$context$$?.getPropertyValue('longitude') ?? $longitude;
  }

  DestinationOption({this.$$context$$});

  void setValues({num? latitude, num? longitude}) {
    if (latitude != null) $latitude = latitude;
    if (longitude != null) $longitude = longitude;
  }

  Map toJson() {
    return {'latitude': $latitude, 'longitude': $longitude}
      ..removeWhere((key, value) => value == null);
  }
}

class DetectBodyOption {
  mpjs.JsObject? $$context$$;

  ArrayBuffer $frameBuffer = ArrayBuffer();

  Future<ArrayBuffer> get frameBuffer async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('frameBuffer'));
  }

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  num? $scoreThreshold;

  Future<num?> get scoreThreshold async {
    return await $$context$$?.getPropertyValue('scoreThreshold') ??
        $scoreThreshold;
  }

  dynamic $sourceType;

  Future<dynamic> get sourceType async {
    return await $$context$$?.getPropertyValue('sourceType') ?? $sourceType;
  }

  DetectBodyOption({this.$$context$$});

  void setValues(
      {ArrayBuffer? frameBuffer,
      num? height,
      num? width,
      num? scoreThreshold,
      dynamic sourceType}) {
    if (frameBuffer != null) $frameBuffer = frameBuffer;
    if (height != null) $height = height;
    if (width != null) $width = width;
    if (scoreThreshold != null) $scoreThreshold = scoreThreshold;
    if (sourceType != null) $sourceType = sourceType;
  }

  Map toJson() {
    return {
      'frameBuffer': $frameBuffer,
      'height': $height,
      'width': $width,
      'scoreThreshold': $scoreThreshold,
      'sourceType': $sourceType
    }..removeWhere((key, value) => value == null);
  }
}

class DetectFaceOption {
  mpjs.JsObject? $$context$$;

  ArrayBuffer $frameBuffer = ArrayBuffer();

  Future<ArrayBuffer> get frameBuffer async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('frameBuffer'));
  }

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  dynamic $modelModel;

  Future<dynamic> get modelModel async {
    return await $$context$$?.getPropertyValue('modelModel') ?? $modelModel;
  }

  num? $scoreThreshold;

  Future<num?> get scoreThreshold async {
    return await $$context$$?.getPropertyValue('scoreThreshold') ??
        $scoreThreshold;
  }

  dynamic $sourceType;

  Future<dynamic> get sourceType async {
    return await $$context$$?.getPropertyValue('sourceType') ?? $sourceType;
  }

  DetectFaceOption({this.$$context$$});

  void setValues(
      {ArrayBuffer? frameBuffer,
      num? height,
      num? width,
      dynamic modelModel,
      num? scoreThreshold,
      dynamic sourceType}) {
    if (frameBuffer != null) $frameBuffer = frameBuffer;
    if (height != null) $height = height;
    if (width != null) $width = width;
    if (modelModel != null) $modelModel = modelModel;
    if (scoreThreshold != null) $scoreThreshold = scoreThreshold;
    if (sourceType != null) $sourceType = sourceType;
  }

  Map toJson() {
    return {
      'frameBuffer': $frameBuffer,
      'height': $height,
      'width': $width,
      'modelModel': $modelModel,
      'scoreThreshold': $scoreThreshold,
      'sourceType': $sourceType
    }..removeWhere((key, value) => value == null);
  }
}

class DetectHandOption {
  mpjs.JsObject? $$context$$;

  ArrayBuffer $frameBuffer = ArrayBuffer();

  Future<ArrayBuffer> get frameBuffer async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('frameBuffer'));
  }

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  dynamic $algoMode;

  Future<dynamic> get algoMode async {
    return await $$context$$?.getPropertyValue('algoMode') ?? $algoMode;
  }

  num? $scoreThreshold;

  Future<num?> get scoreThreshold async {
    return await $$context$$?.getPropertyValue('scoreThreshold') ??
        $scoreThreshold;
  }

  DetectHandOption({this.$$context$$});

  void setValues(
      {ArrayBuffer? frameBuffer,
      num? height,
      num? width,
      dynamic algoMode,
      num? scoreThreshold}) {
    if (frameBuffer != null) $frameBuffer = frameBuffer;
    if (height != null) $height = height;
    if (width != null) $width = width;
    if (algoMode != null) $algoMode = algoMode;
    if (scoreThreshold != null) $scoreThreshold = scoreThreshold;
  }

  Map toJson() {
    return {
      'frameBuffer': $frameBuffer,
      'height': $height,
      'width': $width,
      'algoMode': $algoMode,
      'scoreThreshold': $scoreThreshold
    }..removeWhere((key, value) => value == null);
  }
}

class DeviceInfo {
  mpjs.JsObject? $$context$$;

  String $CPUType = "";

  Future<String> get CPUType async {
    return await $$context$$?.getPropertyValue('CPUType') ?? $CPUType;
  }

  String $abi = "";

  Future<String> get abi async {
    return await $$context$$?.getPropertyValue('abi') ?? $abi;
  }

  num $benchmarkLevel = 0;

  Future<num> get benchmarkLevel async {
    return await $$context$$?.getPropertyValue('benchmarkLevel') ??
        $benchmarkLevel;
  }

  String $brand = "";

  Future<String> get brand async {
    return await $$context$$?.getPropertyValue('brand') ?? $brand;
  }

  String $deviceAbi = "";

  Future<String> get deviceAbi async {
    return await $$context$$?.getPropertyValue('deviceAbi') ?? $deviceAbi;
  }

  String $model = "";

  Future<String> get model async {
    return await $$context$$?.getPropertyValue('model') ?? $model;
  }

  String $platform = "";

  Future<String> get platform async {
    return await $$context$$?.getPropertyValue('platform') ?? $platform;
  }

  String $system = "";

  Future<String> get system async {
    return await $$context$$?.getPropertyValue('system') ?? $system;
  }

  DeviceInfo({this.$$context$$});

  void setValues(
      {String? CPUType,
      String? abi,
      num? benchmarkLevel,
      String? brand,
      String? deviceAbi,
      String? model,
      String? platform,
      String? system}) {
    if (CPUType != null) $CPUType = CPUType;
    if (abi != null) $abi = abi;
    if (benchmarkLevel != null) $benchmarkLevel = benchmarkLevel;
    if (brand != null) $brand = brand;
    if (deviceAbi != null) $deviceAbi = deviceAbi;
    if (model != null) $model = model;
    if (platform != null) $platform = platform;
    if (system != null) $system = system;
  }

  Map toJson() {
    return {
      'CPUType': $CPUType,
      'abi': $abi,
      'benchmarkLevel': $benchmarkLevel,
      'brand': $brand,
      'deviceAbi': $deviceAbi,
      'model': $model,
      'platform': $platform,
      'system': $system
    }..removeWhere((key, value) => value == null);
  }
}

class DisableAlertBeforeUnloadOption {
  mpjs.JsObject? $$context$$;

  DisableAlertBeforeUnloadCompleteCallback? $complete;

  Future<DisableAlertBeforeUnloadCompleteCallback?> get complete async {
    return $complete;
  }

  DisableAlertBeforeUnloadFailCallback? $fail;

  Future<DisableAlertBeforeUnloadFailCallback?> get fail async {
    return $fail;
  }

  DisableAlertBeforeUnloadSuccessCallback? $success;

  Future<DisableAlertBeforeUnloadSuccessCallback?> get success async {
    return $success;
  }

  DisableAlertBeforeUnloadOption({this.$$context$$});

  void setValues(
      {DisableAlertBeforeUnloadCompleteCallback? complete,
      DisableAlertBeforeUnloadFailCallback? fail,
      DisableAlertBeforeUnloadSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class DownloadFileOption {
  mpjs.JsObject? $$context$$;

  String $url = "";

  Future<String> get url async {
    return await $$context$$?.getPropertyValue('url') ?? $url;
  }

  DownloadFileCompleteCallback? $complete;

  Future<DownloadFileCompleteCallback?> get complete async {
    return $complete;
  }

  DownloadFileFailCallback? $fail;

  Future<DownloadFileFailCallback?> get fail async {
    return $fail;
  }

  String? $filePath;

  Future<String?> get filePath async {
    return await $$context$$?.getPropertyValue('filePath') ?? $filePath;
  }

  IAnyObject? $header;

  Future<IAnyObject?> get header async {
    return IAnyObject($$context$$: $$context$$?.getProperty('header'));
  }

  DownloadFileSuccessCallback? $success;

  Future<DownloadFileSuccessCallback?> get success async {
    return $success;
  }

  num? $timeout;

  Future<num?> get timeout async {
    return await $$context$$?.getPropertyValue('timeout') ?? $timeout;
  }

  DownloadFileOption({this.$$context$$});

  void setValues(
      {String? url,
      DownloadFileCompleteCallback? complete,
      DownloadFileFailCallback? fail,
      String? filePath,
      IAnyObject? header,
      DownloadFileSuccessCallback? success,
      num? timeout}) {
    if (url != null) $url = url;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (filePath != null) $filePath = filePath;
    if (header != null) $header = header;
    if (success != null) $success = success;
    if (timeout != null) $timeout = timeout;
  }

  Map toJson() {
    return {
      'url': $url,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'filePath': $filePath,
      'header': $header,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => DownloadFileSuccessCallbackResult($$context$$: e)])
          : null,
      'timeout': $timeout
    }..removeWhere((key, value) => value == null);
  }
}

class DownloadFileSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $filePath = "";

  Future<String> get filePath async {
    return await $$context$$?.getPropertyValue('filePath') ?? $filePath;
  }

  RequestProfile $profile = RequestProfile();

  Future<RequestProfile> get profile async {
    return RequestProfile($$context$$: $$context$$?.getProperty('profile'));
  }

  num $statusCode = 0;

  Future<num> get statusCode async {
    return await $$context$$?.getPropertyValue('statusCode') ?? $statusCode;
  }

  String $tempFilePath = "";

  Future<String> get tempFilePath async {
    return await $$context$$?.getPropertyValue('tempFilePath') ?? $tempFilePath;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  DownloadFileSuccessCallbackResult({this.$$context$$});

  void setValues(
      {String? filePath,
      RequestProfile? profile,
      num? statusCode,
      String? tempFilePath,
      String? errMsg}) {
    if (filePath != null) $filePath = filePath;
    if (profile != null) $profile = profile;
    if (statusCode != null) $statusCode = statusCode;
    if (tempFilePath != null) $tempFilePath = tempFilePath;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'filePath': $filePath,
      'profile': $profile,
      'statusCode': $statusCode,
      'tempFilePath': $tempFilePath,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class DownloadTaskOnProgressUpdateListenerResult {
  mpjs.JsObject? $$context$$;

  num $progress = 0;

  Future<num> get progress async {
    return await $$context$$?.getPropertyValue('progress') ?? $progress;
  }

  num $totalBytesExpectedToWrite = 0;

  Future<num> get totalBytesExpectedToWrite async {
    return await $$context$$?.getPropertyValue('totalBytesExpectedToWrite') ??
        $totalBytesExpectedToWrite;
  }

  num $totalBytesWritten = 0;

  Future<num> get totalBytesWritten async {
    return await $$context$$?.getPropertyValue('totalBytesWritten') ??
        $totalBytesWritten;
  }

  DownloadTaskOnProgressUpdateListenerResult({this.$$context$$});

  void setValues(
      {num? progress, num? totalBytesExpectedToWrite, num? totalBytesWritten}) {
    if (progress != null) $progress = progress;
    if (totalBytesExpectedToWrite != null)
      $totalBytesExpectedToWrite = totalBytesExpectedToWrite;
    if (totalBytesWritten != null) $totalBytesWritten = totalBytesWritten;
  }

  Map toJson() {
    return {
      'progress': $progress,
      'totalBytesExpectedToWrite': $totalBytesExpectedToWrite,
      'totalBytesWritten': $totalBytesWritten
    }..removeWhere((key, value) => value == null);
  }
}

class EditImageOption {
  mpjs.JsObject? $$context$$;

  String $src = "";

  Future<String> get src async {
    return await $$context$$?.getPropertyValue('src') ?? $src;
  }

  EditImageCompleteCallback? $complete;

  Future<EditImageCompleteCallback?> get complete async {
    return $complete;
  }

  EditImageFailCallback? $fail;

  Future<EditImageFailCallback?> get fail async {
    return $fail;
  }

  EditImageSuccessCallback? $success;

  Future<EditImageSuccessCallback?> get success async {
    return $success;
  }

  EditImageOption({this.$$context$$});

  void setValues(
      {String? src,
      EditImageCompleteCallback? complete,
      EditImageFailCallback? fail,
      EditImageSuccessCallback? success}) {
    if (src != null) $src = src;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'src': $src,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => EditImageSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class EditImageSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $tempFilePath = "";

  Future<String> get tempFilePath async {
    return await $$context$$?.getPropertyValue('tempFilePath') ?? $tempFilePath;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  EditImageSuccessCallbackResult({this.$$context$$});

  void setValues({String? tempFilePath, String? errMsg}) {
    if (tempFilePath != null) $tempFilePath = tempFilePath;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'tempFilePath': $tempFilePath, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class EnableAlertBeforeUnloadOption {
  mpjs.JsObject? $$context$$;

  String $message = "";

  Future<String> get message async {
    return await $$context$$?.getPropertyValue('message') ?? $message;
  }

  EnableAlertBeforeUnloadCompleteCallback? $complete;

  Future<EnableAlertBeforeUnloadCompleteCallback?> get complete async {
    return $complete;
  }

  EnableAlertBeforeUnloadFailCallback? $fail;

  Future<EnableAlertBeforeUnloadFailCallback?> get fail async {
    return $fail;
  }

  EnableAlertBeforeUnloadSuccessCallback? $success;

  Future<EnableAlertBeforeUnloadSuccessCallback?> get success async {
    return $success;
  }

  EnableAlertBeforeUnloadOption({this.$$context$$});

  void setValues(
      {String? message,
      EnableAlertBeforeUnloadCompleteCallback? complete,
      EnableAlertBeforeUnloadFailCallback? fail,
      EnableAlertBeforeUnloadSuccessCallback? success}) {
    if (message != null) $message = message;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'message': $message,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class EntriesResult {
  mpjs.JsObject? $$context$$;

  EntriesResult({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }
}

class EntryItem {
  mpjs.JsObject? $$context$$;

  String $path = "";

  Future<String> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  dynamic $encoding;

  Future<dynamic> get encoding async {
    return await $$context$$?.getPropertyValue('encoding') ?? $encoding;
  }

  num? $length;

  Future<num?> get length async {
    return await $$context$$?.getPropertyValue('length') ?? $length;
  }

  num? $position;

  Future<num?> get position async {
    return await $$context$$?.getPropertyValue('position') ?? $position;
  }

  EntryItem({this.$$context$$});

  void setValues({String? path, dynamic encoding, num? length, num? position}) {
    if (path != null) $path = path;
    if (encoding != null) $encoding = encoding;
    if (length != null) $length = length;
    if (position != null) $position = position;
  }

  Map toJson() {
    return {
      'path': $path,
      'encoding': $encoding,
      'length': $length,
      'position': $position
    }..removeWhere((key, value) => value == null);
  }
}

class Err {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  num $errno = 0;

  Future<num> get errno async {
    return await $$context$$?.getPropertyValue('errno') ?? $errno;
  }

  Err({this.$$context$$});

  void setValues({String? errMsg, num? errno}) {
    if (errMsg != null) $errMsg = errMsg;
    if (errno != null) $errno = errno;
  }

  Map toJson() {
    return {'errMsg': $errMsg, 'errno': $errno}
      ..removeWhere((key, value) => value == null);
  }
}

class ExecuteVisualLayerCommandOption {
  mpjs.JsObject? $$context$$;

  String $command = "";

  Future<String> get command async {
    return await $$context$$?.getPropertyValue('command') ?? $command;
  }

  String $layerId = "";

  Future<String> get layerId async {
    return await $$context$$?.getPropertyValue('layerId') ?? $layerId;
  }

  ExecuteVisualLayerCommandCompleteCallback? $complete;

  Future<ExecuteVisualLayerCommandCompleteCallback?> get complete async {
    return $complete;
  }

  ExecuteVisualLayerCommandFailCallback? $fail;

  Future<ExecuteVisualLayerCommandFailCallback?> get fail async {
    return $fail;
  }

  ExecuteVisualLayerCommandSuccessCallback? $success;

  Future<ExecuteVisualLayerCommandSuccessCallback?> get success async {
    return $success;
  }

  ExecuteVisualLayerCommandOption({this.$$context$$});

  void setValues(
      {String? command,
      String? layerId,
      ExecuteVisualLayerCommandCompleteCallback? complete,
      ExecuteVisualLayerCommandFailCallback? fail,
      ExecuteVisualLayerCommandSuccessCallback? success}) {
    if (command != null) $command = command;
    if (layerId != null) $layerId = layerId;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'command': $command,
      'layerId': $layerId,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [
              (e) =>
                  ExecuteVisualLayerCommandSuccessCallbackResult($$context$$: e)
            ])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ExecuteVisualLayerCommandSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $data = "";

  Future<String> get data async {
    return await $$context$$?.getPropertyValue('data') ?? $data;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  ExecuteVisualLayerCommandSuccessCallbackResult({this.$$context$$});

  void setValues({String? data, String? errMsg}) {
    if (data != null) $data = data;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'data': $data, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class ExitFullScreenOption {
  mpjs.JsObject? $$context$$;

  ExitFullScreenCompleteCallback? $complete;

  Future<ExitFullScreenCompleteCallback?> get complete async {
    return $complete;
  }

  ExitFullScreenFailCallback? $fail;

  Future<ExitFullScreenFailCallback?> get fail async {
    return $fail;
  }

  ExitFullScreenSuccessCallback? $success;

  Future<ExitFullScreenSuccessCallback?> get success async {
    return $success;
  }

  ExitFullScreenOption({this.$$context$$});

  void setValues(
      {ExitFullScreenCompleteCallback? complete,
      ExitFullScreenFailCallback? fail,
      ExitFullScreenSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ExitMiniProgramOption {
  mpjs.JsObject? $$context$$;

  ExitMiniProgramCompleteCallback? $complete;

  Future<ExitMiniProgramCompleteCallback?> get complete async {
    return $complete;
  }

  ExitMiniProgramFailCallback? $fail;

  Future<ExitMiniProgramFailCallback?> get fail async {
    return $fail;
  }

  ExitMiniProgramSuccessCallback? $success;

  Future<ExitMiniProgramSuccessCallback?> get success async {
    return $success;
  }

  ExitMiniProgramOption({this.$$context$$});

  void setValues(
      {ExitMiniProgramCompleteCallback? complete,
      ExitMiniProgramFailCallback? fail,
      ExitMiniProgramSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ExitPictureInPictureOption {
  mpjs.JsObject? $$context$$;

  ExitPictureInPictureCompleteCallback? $complete;

  Future<ExitPictureInPictureCompleteCallback?> get complete async {
    return $complete;
  }

  ExitPictureInPictureFailCallback? $fail;

  Future<ExitPictureInPictureFailCallback?> get fail async {
    return $fail;
  }

  ExitPictureInPictureSuccessCallback? $success;

  Future<ExitPictureInPictureSuccessCallback?> get success async {
    return $success;
  }

  ExitPictureInPictureOption({this.$$context$$});

  void setValues(
      {ExitPictureInPictureCompleteCallback? complete,
      ExitPictureInPictureFailCallback? fail,
      ExitPictureInPictureSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ExitVoIPChatOption {
  mpjs.JsObject? $$context$$;

  ExitVoIPChatCompleteCallback? $complete;

  Future<ExitVoIPChatCompleteCallback?> get complete async {
    return $complete;
  }

  ExitVoIPChatFailCallback? $fail;

  Future<ExitVoIPChatFailCallback?> get fail async {
    return $fail;
  }

  ExitVoIPChatSuccessCallback? $success;

  Future<ExitVoIPChatSuccessCallback?> get success async {
    return $success;
  }

  ExitVoIPChatOption({this.$$context$$});

  void setValues(
      {ExitVoIPChatCompleteCallback? complete,
      ExitVoIPChatFailCallback? fail,
      ExitVoIPChatSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ExtInfoOption {
  mpjs.JsObject? $$context$$;

  String $url = "";

  Future<String> get url async {
    return await $$context$$?.getPropertyValue('url') ?? $url;
  }

  ExtInfoOption({this.$$context$$});

  void setValues({String? url}) {
    if (url != null) $url = url;
  }

  Map toJson() {
    return {'url': $url}..removeWhere((key, value) => value == null);
  }
}

class ExtraOption {
  mpjs.JsObject? $$context$$;

  Array<dynamic>? $apiList;

  Future<Array<dynamic>?> get apiList async {
    return $apiList;
  }

  ExtraOption({this.$$context$$});

  void setValues({Array<dynamic>? apiList}) {
    if (apiList != null) $apiList = apiList;
  }

  Map toJson() {
    return {'apiList': $apiList}..removeWhere((key, value) => value == null);
  }
}

class ExtractDataSourceOption {
  mpjs.JsObject? $$context$$;

  String $source = "";

  Future<String> get source async {
    return await $$context$$?.getPropertyValue('source') ?? $source;
  }

  ExtractDataSourceOption({this.$$context$$});

  void setValues({String? source}) {
    if (source != null) $source = source;
  }

  Map toJson() {
    return {'source': $source}..removeWhere((key, value) => value == null);
  }
}

class FaceAngel {
  mpjs.JsObject? $$context$$;

  num $pitch = 0;

  Future<num> get pitch async {
    return await $$context$$?.getPropertyValue('pitch') ?? $pitch;
  }

  num $roll = 0;

  Future<num> get roll async {
    return await $$context$$?.getPropertyValue('roll') ?? $roll;
  }

  num $yaw = 0;

  Future<num> get yaw async {
    return await $$context$$?.getPropertyValue('yaw') ?? $yaw;
  }

  FaceAngel({this.$$context$$});

  void setValues({num? pitch, num? roll, num? yaw}) {
    if (pitch != null) $pitch = pitch;
    if (roll != null) $roll = roll;
    if (yaw != null) $yaw = yaw;
  }

  Map toJson() {
    return {'pitch': $pitch, 'roll': $roll, 'yaw': $yaw}
      ..removeWhere((key, value) => value == null);
  }
}

class FaceConf {
  mpjs.JsObject? $$context$$;

  num $global = 0;

  Future<num> get global async {
    return await $$context$$?.getPropertyValue('global') ?? $global;
  }

  num $leftEye = 0;

  Future<num> get leftEye async {
    return await $$context$$?.getPropertyValue('leftEye') ?? $leftEye;
  }

  num $mouth = 0;

  Future<num> get mouth async {
    return await $$context$$?.getPropertyValue('mouth') ?? $mouth;
  }

  num $nose = 0;

  Future<num> get nose async {
    return await $$context$$?.getPropertyValue('nose') ?? $nose;
  }

  num $rightEye = 0;

  Future<num> get rightEye async {
    return await $$context$$?.getPropertyValue('rightEye') ?? $rightEye;
  }

  FaceConf({this.$$context$$});

  void setValues(
      {num? global, num? leftEye, num? mouth, num? nose, num? rightEye}) {
    if (global != null) $global = global;
    if (leftEye != null) $leftEye = leftEye;
    if (mouth != null) $mouth = mouth;
    if (nose != null) $nose = nose;
    if (rightEye != null) $rightEye = rightEye;
  }

  Map toJson() {
    return {
      'global': $global,
      'leftEye': $leftEye,
      'mouth': $mouth,
      'nose': $nose,
      'rightEye': $rightEye
    }..removeWhere((key, value) => value == null);
  }
}

class FaceDetectOption {
  mpjs.JsObject? $$context$$;

  ArrayBuffer $frameBuffer = ArrayBuffer();

  Future<ArrayBuffer> get frameBuffer async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('frameBuffer'));
  }

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  FaceDetectCompleteCallback? $complete;

  Future<FaceDetectCompleteCallback?> get complete async {
    return $complete;
  }

  bool? $enableAngle;

  Future<bool?> get enableAngle async {
    return await $$context$$?.getPropertyValue('enableAngle') ?? $enableAngle;
  }

  bool? $enableConf;

  Future<bool?> get enableConf async {
    return await $$context$$?.getPropertyValue('enableConf') ?? $enableConf;
  }

  bool? $enableMultiFace;

  Future<bool?> get enableMultiFace async {
    return await $$context$$?.getPropertyValue('enableMultiFace') ??
        $enableMultiFace;
  }

  bool? $enablePoint;

  Future<bool?> get enablePoint async {
    return await $$context$$?.getPropertyValue('enablePoint') ?? $enablePoint;
  }

  FaceDetectFailCallback? $fail;

  Future<FaceDetectFailCallback?> get fail async {
    return $fail;
  }

  FaceDetectSuccessCallback? $success;

  Future<FaceDetectSuccessCallback?> get success async {
    return $success;
  }

  FaceDetectOption({this.$$context$$});

  void setValues(
      {ArrayBuffer? frameBuffer,
      num? height,
      num? width,
      FaceDetectCompleteCallback? complete,
      bool? enableAngle,
      bool? enableConf,
      bool? enableMultiFace,
      bool? enablePoint,
      FaceDetectFailCallback? fail,
      FaceDetectSuccessCallback? success}) {
    if (frameBuffer != null) $frameBuffer = frameBuffer;
    if (height != null) $height = height;
    if (width != null) $width = width;
    if (complete != null) $complete = complete;
    if (enableAngle != null) $enableAngle = enableAngle;
    if (enableConf != null) $enableConf = enableConf;
    if (enableMultiFace != null) $enableMultiFace = enableMultiFace;
    if (enablePoint != null) $enablePoint = enablePoint;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'frameBuffer': $frameBuffer,
      'height': $height,
      'width': $width,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'enableAngle': $enableAngle,
      'enableConf': $enableConf,
      'enableMultiFace': $enableMultiFace,
      'enablePoint': $enablePoint,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => FaceDetectSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class FaceDetectSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  FaceAngel $angleArray = FaceAngel();

  Future<FaceAngel> get angleArray async {
    return FaceAngel($$context$$: $$context$$?.getProperty('angleArray'));
  }

  FaceConf $confArray = FaceConf();

  Future<FaceConf> get confArray async {
    return FaceConf($$context$$: $$context$$?.getProperty('confArray'));
  }

  IAnyObject $detectRect = IAnyObject();

  Future<IAnyObject> get detectRect async {
    return IAnyObject($$context$$: $$context$$?.getProperty('detectRect'));
  }

  List<IAnyObject> $faceInfo = <IAnyObject>[];

  Future<List<IAnyObject>> get faceInfo async {
    return ((await $$context$$?.getPropertyValue('faceInfo')) as List)
        .map((it) => IAnyObject($$context$$: it))
        .toList();
  }

  List<IAnyObject> $pointArray = <IAnyObject>[];

  Future<List<IAnyObject>> get pointArray async {
    return ((await $$context$$?.getPropertyValue('pointArray')) as List)
        .map((it) => IAnyObject($$context$$: it))
        .toList();
  }

  num $x = 0;

  Future<num> get x async {
    return await $$context$$?.getPropertyValue('x') ?? $x;
  }

  num $y = 0;

  Future<num> get y async {
    return await $$context$$?.getPropertyValue('y') ?? $y;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  FaceDetectSuccessCallbackResult({this.$$context$$});

  void setValues(
      {FaceAngel? angleArray,
      FaceConf? confArray,
      IAnyObject? detectRect,
      List<IAnyObject>? faceInfo,
      List<IAnyObject>? pointArray,
      num? x,
      num? y,
      String? errMsg}) {
    if (angleArray != null) $angleArray = angleArray;
    if (confArray != null) $confArray = confArray;
    if (detectRect != null) $detectRect = detectRect;
    if (faceInfo != null) $faceInfo = faceInfo;
    if (pointArray != null) $pointArray = pointArray;
    if (x != null) $x = x;
    if (y != null) $y = y;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'angleArray': $angleArray,
      'confArray': $confArray,
      'detectRect': $detectRect,
      'faceInfo': $faceInfo,
      'pointArray': $pointArray,
      'x': $x,
      'y': $y,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class FaceTrack {
  mpjs.JsObject? $$context$$;

  dynamic $mode;

  Future<dynamic> get mode async {
    return await $$context$$?.getPropertyValue('mode') ?? $mode;
  }

  FaceTrack({this.$$context$$});

  void setValues({dynamic mode}) {
    if (mode != null) $mode = mode;
  }

  Map toJson() {
    return {'mode': $mode}..removeWhere((key, value) => value == null);
  }
}

class Fields {
  mpjs.JsObject? $$context$$;

  List<String>? $computedStyle;

  Future<List<String>?> get computedStyle async {
    return await $$context$$?.getPropertyValue('computedStyle') ??
        $computedStyle;
  }

  bool? $context;

  Future<bool?> get context async {
    return await $$context$$?.getPropertyValue('context') ?? $context;
  }

  bool? $dataset;

  Future<bool?> get dataset async {
    return await $$context$$?.getPropertyValue('dataset') ?? $dataset;
  }

  bool? $id;

  Future<bool?> get id async {
    return await $$context$$?.getPropertyValue('id') ?? $id;
  }

  bool? $mark;

  Future<bool?> get mark async {
    return await $$context$$?.getPropertyValue('mark') ?? $mark;
  }

  bool? $node;

  Future<bool?> get node async {
    return await $$context$$?.getPropertyValue('node') ?? $node;
  }

  List<String>? $properties;

  Future<List<String>?> get properties async {
    return await $$context$$?.getPropertyValue('properties') ?? $properties;
  }

  bool? $rect;

  Future<bool?> get rect async {
    return await $$context$$?.getPropertyValue('rect') ?? $rect;
  }

  bool? $scrollOffset;

  Future<bool?> get scrollOffset async {
    return await $$context$$?.getPropertyValue('scrollOffset') ?? $scrollOffset;
  }

  bool? $size;

  Future<bool?> get size async {
    return await $$context$$?.getPropertyValue('size') ?? $size;
  }

  Fields({this.$$context$$});

  void setValues(
      {List<String>? computedStyle,
      bool? context,
      bool? dataset,
      bool? id,
      bool? mark,
      bool? node,
      List<String>? properties,
      bool? rect,
      bool? scrollOffset,
      bool? size}) {
    if (computedStyle != null) $computedStyle = computedStyle;
    if (context != null) $context = context;
    if (dataset != null) $dataset = dataset;
    if (id != null) $id = id;
    if (mark != null) $mark = mark;
    if (node != null) $node = node;
    if (properties != null) $properties = properties;
    if (rect != null) $rect = rect;
    if (scrollOffset != null) $scrollOffset = scrollOffset;
    if (size != null) $size = size;
  }

  Map toJson() {
    return {
      'computedStyle': $computedStyle,
      'context': $context,
      'dataset': $dataset,
      'id': $id,
      'mark': $mark,
      'node': $node,
      'properties': $properties,
      'rect': $rect,
      'scrollOffset': $scrollOffset,
      'size': $size
    }..removeWhere((key, value) => value == null);
  }
}

class FileItem {
  mpjs.JsObject? $$context$$;

  num $createTime = 0;

  Future<num> get createTime async {
    return await $$context$$?.getPropertyValue('createTime') ?? $createTime;
  }

  String $filePath = "";

  Future<String> get filePath async {
    return await $$context$$?.getPropertyValue('filePath') ?? $filePath;
  }

  num $size = 0;

  Future<num> get size async {
    return await $$context$$?.getPropertyValue('size') ?? $size;
  }

  FileItem({this.$$context$$});

  void setValues({num? createTime, String? filePath, num? size}) {
    if (createTime != null) $createTime = createTime;
    if (filePath != null) $filePath = filePath;
    if (size != null) $size = size;
  }

  Map toJson() {
    return {'createTime': $createTime, 'filePath': $filePath, 'size': $size}
      ..removeWhere((key, value) => value == null);
  }
}

class FileSystemManagerCloseOption {
  mpjs.JsObject? $$context$$;

  String $fd = "";

  Future<String> get fd async {
    return await $$context$$?.getPropertyValue('fd') ?? $fd;
  }

  FileSystemManagerCloseCompleteCallback? $complete;

  Future<FileSystemManagerCloseCompleteCallback?> get complete async {
    return $complete;
  }

  FileSystemManagerCloseFailCallback? $fail;

  Future<FileSystemManagerCloseFailCallback?> get fail async {
    return $fail;
  }

  FileSystemManagerCloseSuccessCallback? $success;

  Future<FileSystemManagerCloseSuccessCallback?> get success async {
    return $success;
  }

  FileSystemManagerCloseOption({this.$$context$$});

  void setValues(
      {String? fd,
      FileSystemManagerCloseCompleteCallback? complete,
      FileSystemManagerCloseFailCallback? fail,
      FileSystemManagerCloseSuccessCallback? success}) {
    if (fd != null) $fd = fd;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'fd': $fd,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => CloseFailCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ForwardMaterials {
  mpjs.JsObject? $$context$$;

  String $name = "";

  Future<String> get name async {
    return await $$context$$?.getPropertyValue('name') ?? $name;
  }

  String $path = "";

  Future<String> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  num $size = 0;

  Future<num> get size async {
    return await $$context$$?.getPropertyValue('size') ?? $size;
  }

  String $type = "";

  Future<String> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  ForwardMaterials({this.$$context$$});

  void setValues({String? name, String? path, num? size, String? type}) {
    if (name != null) $name = name;
    if (path != null) $path = path;
    if (size != null) $size = size;
    if (type != null) $type = type;
  }

  Map toJson() {
    return {'name': $name, 'path': $path, 'size': $size, 'type': $type}
      ..removeWhere((key, value) => value == null);
  }
}

class FrameDataOptions {
  mpjs.JsObject? $$context$$;

  ArrayBuffer $data = ArrayBuffer();

  Future<ArrayBuffer> get data async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('data'));
  }

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  num $pkDts = 0;

  Future<num> get pkDts async {
    return await $$context$$?.getPropertyValue('pkDts') ?? $pkDts;
  }

  num $pkPts = 0;

  Future<num> get pkPts async {
    return await $$context$$?.getPropertyValue('pkPts') ?? $pkPts;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  FrameDataOptions({this.$$context$$});

  void setValues(
      {ArrayBuffer? data, num? height, num? pkDts, num? pkPts, num? width}) {
    if (data != null) $data = data;
    if (height != null) $height = height;
    if (pkDts != null) $pkDts = pkDts;
    if (pkPts != null) $pkPts = pkPts;
    if (width != null) $width = width;
  }

  Map toJson() {
    return {
      'data': $data,
      'height': $height,
      'pkDts': $pkDts,
      'pkPts': $pkPts,
      'width': $width
    }..removeWhere((key, value) => value == null);
  }
}

class FromScreenLocationOption {
  mpjs.JsObject? $$context$$;

  num $x = 0;

  Future<num> get x async {
    return await $$context$$?.getPropertyValue('x') ?? $x;
  }

  num $y = 0;

  Future<num> get y async {
    return await $$context$$?.getPropertyValue('y') ?? $y;
  }

  FromScreenLocationCompleteCallback? $complete;

  Future<FromScreenLocationCompleteCallback?> get complete async {
    return $complete;
  }

  FromScreenLocationFailCallback? $fail;

  Future<FromScreenLocationFailCallback?> get fail async {
    return $fail;
  }

  FromScreenLocationSuccessCallback? $success;

  Future<FromScreenLocationSuccessCallback?> get success async {
    return $success;
  }

  FromScreenLocationOption({this.$$context$$});

  void setValues(
      {num? x,
      num? y,
      FromScreenLocationCompleteCallback? complete,
      FromScreenLocationFailCallback? fail,
      FromScreenLocationSuccessCallback? success}) {
    if (x != null) $x = x;
    if (y != null) $y = y;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'x': $x,
      'y': $y,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetCenterLocationSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class FstatFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  FstatFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class FstatOption {
  mpjs.JsObject? $$context$$;

  String $fd = "";

  Future<String> get fd async {
    return await $$context$$?.getPropertyValue('fd') ?? $fd;
  }

  FstatCompleteCallback? $complete;

  Future<FstatCompleteCallback?> get complete async {
    return $complete;
  }

  FstatFailCallback? $fail;

  Future<FstatFailCallback?> get fail async {
    return $fail;
  }

  FstatSuccessCallback? $success;

  Future<FstatSuccessCallback?> get success async {
    return $success;
  }

  FstatOption({this.$$context$$});

  void setValues(
      {String? fd,
      FstatCompleteCallback? complete,
      FstatFailCallback? fail,
      FstatSuccessCallback? success}) {
    if (fd != null) $fd = fd;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'fd': $fd,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => FstatFailCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => FstatSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class FstatSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  Stats $stats = Stats();

  Future<Stats> get stats async {
    return Stats($$context$$: $$context$$?.getProperty('stats'));
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  FstatSuccessCallbackResult({this.$$context$$});

  void setValues({Stats? stats, String? errMsg}) {
    if (stats != null) $stats = stats;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'stats': $stats, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class FstatSyncOption {
  mpjs.JsObject? $$context$$;

  String $fd = "";

  Future<String> get fd async {
    return await $$context$$?.getPropertyValue('fd') ?? $fd;
  }

  FstatSyncOption({this.$$context$$});

  void setValues({String? fd}) {
    if (fd != null) $fd = fd;
  }

  Map toJson() {
    return {'fd': $fd}..removeWhere((key, value) => value == null);
  }
}

class FtruncateFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  FtruncateFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class FtruncateOption {
  mpjs.JsObject? $$context$$;

  String $fd = "";

  Future<String> get fd async {
    return await $$context$$?.getPropertyValue('fd') ?? $fd;
  }

  num $length = 0;

  Future<num> get length async {
    return await $$context$$?.getPropertyValue('length') ?? $length;
  }

  FtruncateCompleteCallback? $complete;

  Future<FtruncateCompleteCallback?> get complete async {
    return $complete;
  }

  FtruncateFailCallback? $fail;

  Future<FtruncateFailCallback?> get fail async {
    return $fail;
  }

  FtruncateSuccessCallback? $success;

  Future<FtruncateSuccessCallback?> get success async {
    return $success;
  }

  FtruncateOption({this.$$context$$});

  void setValues(
      {String? fd,
      num? length,
      FtruncateCompleteCallback? complete,
      FtruncateFailCallback? fail,
      FtruncateSuccessCallback? success}) {
    if (fd != null) $fd = fd;
    if (length != null) $length = length;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'fd': $fd,
      'length': $length,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => FtruncateFailCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class FtruncateSyncOption {
  mpjs.JsObject? $$context$$;

  String $fd = "";

  Future<String> get fd async {
    return await $$context$$?.getPropertyValue('fd') ?? $fd;
  }

  num $length = 0;

  Future<num> get length async {
    return await $$context$$?.getPropertyValue('length') ?? $length;
  }

  FtruncateSyncOption({this.$$context$$});

  void setValues({String? fd, num? length}) {
    if (fd != null) $fd = fd;
    if (length != null) $length = length;
  }

  Map toJson() {
    return {'fd': $fd, 'length': $length}
      ..removeWhere((key, value) => value == null);
  }
}

class GeneralCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GeneralCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class GetAtqaOption {
  mpjs.JsObject? $$context$$;

  GetAtqaCompleteCallback? $complete;

  Future<GetAtqaCompleteCallback?> get complete async {
    return $complete;
  }

  GetAtqaFailCallback? $fail;

  Future<GetAtqaFailCallback?> get fail async {
    return $fail;
  }

  GetAtqaSuccessCallback? $success;

  Future<GetAtqaSuccessCallback?> get success async {
    return $success;
  }

  GetAtqaOption({this.$$context$$});

  void setValues(
      {GetAtqaCompleteCallback? complete,
      GetAtqaFailCallback? fail,
      GetAtqaSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => Nfcrwerror($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => Nfcrwerror($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GetAtqaSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetAtqaSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  ArrayBuffer $atqa = ArrayBuffer();

  Future<ArrayBuffer> get atqa async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('atqa'));
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetAtqaSuccessCallbackResult({this.$$context$$});

  void setValues({ArrayBuffer? atqa, String? errMsg}) {
    if (atqa != null) $atqa = atqa;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'atqa': $atqa, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetAvailableAudioSourcesOption {
  mpjs.JsObject? $$context$$;

  GetAvailableAudioSourcesCompleteCallback? $complete;

  Future<GetAvailableAudioSourcesCompleteCallback?> get complete async {
    return $complete;
  }

  GetAvailableAudioSourcesFailCallback? $fail;

  Future<GetAvailableAudioSourcesFailCallback?> get fail async {
    return $fail;
  }

  GetAvailableAudioSourcesSuccessCallback? $success;

  Future<GetAvailableAudioSourcesSuccessCallback?> get success async {
    return $success;
  }

  GetAvailableAudioSourcesOption({this.$$context$$});

  void setValues(
      {GetAvailableAudioSourcesCompleteCallback? complete,
      GetAvailableAudioSourcesFailCallback? fail,
      GetAvailableAudioSourcesSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [
              (e) =>
                  GetAvailableAudioSourcesSuccessCallbackResult($$context$$: e)
            ])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetAvailableAudioSourcesSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  Array<dynamic> $audioSources = [];

  Future<Array<dynamic>> get audioSources async {
    return $audioSources;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetAvailableAudioSourcesSuccessCallbackResult({this.$$context$$});

  void setValues({Array<dynamic>? audioSources, String? errMsg}) {
    if (audioSources != null) $audioSources = audioSources;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'audioSources': $audioSources, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetBLEDeviceCharacteristicsOption {
  mpjs.JsObject? $$context$$;

  String $deviceId = "";

  Future<String> get deviceId async {
    return await $$context$$?.getPropertyValue('deviceId') ?? $deviceId;
  }

  String $serviceId = "";

  Future<String> get serviceId async {
    return await $$context$$?.getPropertyValue('serviceId') ?? $serviceId;
  }

  GetBLEDeviceCharacteristicsCompleteCallback? $complete;

  Future<GetBLEDeviceCharacteristicsCompleteCallback?> get complete async {
    return $complete;
  }

  GetBLEDeviceCharacteristicsFailCallback? $fail;

  Future<GetBLEDeviceCharacteristicsFailCallback?> get fail async {
    return $fail;
  }

  GetBLEDeviceCharacteristicsSuccessCallback? $success;

  Future<GetBLEDeviceCharacteristicsSuccessCallback?> get success async {
    return $success;
  }

  GetBLEDeviceCharacteristicsOption({this.$$context$$});

  void setValues(
      {String? deviceId,
      String? serviceId,
      GetBLEDeviceCharacteristicsCompleteCallback? complete,
      GetBLEDeviceCharacteristicsFailCallback? fail,
      GetBLEDeviceCharacteristicsSuccessCallback? success}) {
    if (deviceId != null) $deviceId = deviceId;
    if (serviceId != null) $serviceId = serviceId;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'deviceId': $deviceId,
      'serviceId': $serviceId,
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [
              (e) => GetBLEDeviceCharacteristicsSuccessCallbackResult(
                  $$context$$: e)
            ])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetBLEDeviceCharacteristicsSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  List<BLECharacteristic> $characteristics = <BLECharacteristic>[];

  Future<List<BLECharacteristic>> get characteristics async {
    return ((await $$context$$?.getPropertyValue('characteristics')) as List)
        .map((it) => BLECharacteristic($$context$$: it))
        .toList();
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetBLEDeviceCharacteristicsSuccessCallbackResult({this.$$context$$});

  void setValues({List<BLECharacteristic>? characteristics, String? errMsg}) {
    if (characteristics != null) $characteristics = characteristics;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'characteristics': $characteristics, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetBLEDeviceRSSIOption {
  mpjs.JsObject? $$context$$;

  String $deviceId = "";

  Future<String> get deviceId async {
    return await $$context$$?.getPropertyValue('deviceId') ?? $deviceId;
  }

  GetBLEDeviceRSSICompleteCallback? $complete;

  Future<GetBLEDeviceRSSICompleteCallback?> get complete async {
    return $complete;
  }

  GetBLEDeviceRSSIFailCallback? $fail;

  Future<GetBLEDeviceRSSIFailCallback?> get fail async {
    return $fail;
  }

  GetBLEDeviceRSSISuccessCallback? $success;

  Future<GetBLEDeviceRSSISuccessCallback?> get success async {
    return $success;
  }

  GetBLEDeviceRSSIOption({this.$$context$$});

  void setValues(
      {String? deviceId,
      GetBLEDeviceRSSICompleteCallback? complete,
      GetBLEDeviceRSSIFailCallback? fail,
      GetBLEDeviceRSSISuccessCallback? success}) {
    if (deviceId != null) $deviceId = deviceId;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'deviceId': $deviceId,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetBLEDeviceRSSISuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetBLEDeviceRSSISuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  num $RSSI = 0;

  Future<num> get RSSI async {
    return await $$context$$?.getPropertyValue('RSSI') ?? $RSSI;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetBLEDeviceRSSISuccessCallbackResult({this.$$context$$});

  void setValues({num? RSSI, String? errMsg}) {
    if (RSSI != null) $RSSI = RSSI;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'RSSI': $RSSI, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetBLEDeviceServicesOption {
  mpjs.JsObject? $$context$$;

  String $deviceId = "";

  Future<String> get deviceId async {
    return await $$context$$?.getPropertyValue('deviceId') ?? $deviceId;
  }

  GetBLEDeviceServicesCompleteCallback? $complete;

  Future<GetBLEDeviceServicesCompleteCallback?> get complete async {
    return $complete;
  }

  GetBLEDeviceServicesFailCallback? $fail;

  Future<GetBLEDeviceServicesFailCallback?> get fail async {
    return $fail;
  }

  GetBLEDeviceServicesSuccessCallback? $success;

  Future<GetBLEDeviceServicesSuccessCallback?> get success async {
    return $success;
  }

  GetBLEDeviceServicesOption({this.$$context$$});

  void setValues(
      {String? deviceId,
      GetBLEDeviceServicesCompleteCallback? complete,
      GetBLEDeviceServicesFailCallback? fail,
      GetBLEDeviceServicesSuccessCallback? success}) {
    if (deviceId != null) $deviceId = deviceId;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'deviceId': $deviceId,
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [
              (e) => GetBLEDeviceServicesSuccessCallbackResult($$context$$: e)
            ])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetBLEDeviceServicesSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  List<BLEService> $services = <BLEService>[];

  Future<List<BLEService>> get services async {
    return ((await $$context$$?.getPropertyValue('services')) as List)
        .map((it) => BLEService($$context$$: it))
        .toList();
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetBLEDeviceServicesSuccessCallbackResult({this.$$context$$});

  void setValues({List<BLEService>? services, String? errMsg}) {
    if (services != null) $services = services;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'services': $services, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetBLEMTUOption {
  mpjs.JsObject? $$context$$;

  String $deviceId = "";

  Future<String> get deviceId async {
    return await $$context$$?.getPropertyValue('deviceId') ?? $deviceId;
  }

  GetBLEMTUCompleteCallback? $complete;

  Future<GetBLEMTUCompleteCallback?> get complete async {
    return $complete;
  }

  GetBLEMTUFailCallback? $fail;

  Future<GetBLEMTUFailCallback?> get fail async {
    return $fail;
  }

  GetBLEMTUSuccessCallback? $success;

  Future<GetBLEMTUSuccessCallback?> get success async {
    return $success;
  }

  dynamic $writeType;

  Future<dynamic> get writeType async {
    return await $$context$$?.getPropertyValue('writeType') ?? $writeType;
  }

  GetBLEMTUOption({this.$$context$$});

  void setValues(
      {String? deviceId,
      GetBLEMTUCompleteCallback? complete,
      GetBLEMTUFailCallback? fail,
      GetBLEMTUSuccessCallback? success,
      dynamic writeType}) {
    if (deviceId != null) $deviceId = deviceId;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
    if (writeType != null) $writeType = writeType;
  }

  Map toJson() {
    return {
      'deviceId': $deviceId,
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetBLEMTUSuccessCallbackResult($$context$$: e)])
          : null,
      'writeType': $writeType
    }..removeWhere((key, value) => value == null);
  }
}

class GetBLEMTUSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  num $mtu = 0;

  Future<num> get mtu async {
    return await $$context$$?.getPropertyValue('mtu') ?? $mtu;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetBLEMTUSuccessCallbackResult({this.$$context$$});

  void setValues({num? mtu, String? errMsg}) {
    if (mtu != null) $mtu = mtu;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'mtu': $mtu, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetBackgroundAudioPlayerStateOption {
  mpjs.JsObject? $$context$$;

  GetBackgroundAudioPlayerStateCompleteCallback? $complete;

  Future<GetBackgroundAudioPlayerStateCompleteCallback?> get complete async {
    return $complete;
  }

  GetBackgroundAudioPlayerStateFailCallback? $fail;

  Future<GetBackgroundAudioPlayerStateFailCallback?> get fail async {
    return $fail;
  }

  GetBackgroundAudioPlayerStateSuccessCallback? $success;

  Future<GetBackgroundAudioPlayerStateSuccessCallback?> get success async {
    return $success;
  }

  GetBackgroundAudioPlayerStateOption({this.$$context$$});

  void setValues(
      {GetBackgroundAudioPlayerStateCompleteCallback? complete,
      GetBackgroundAudioPlayerStateFailCallback? fail,
      GetBackgroundAudioPlayerStateSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [
              (e) => GetBackgroundAudioPlayerStateSuccessCallbackResult(
                  $$context$$: e)
            ])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetBackgroundAudioPlayerStateSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  num $currentPosition = 0;

  Future<num> get currentPosition async {
    return await $$context$$?.getPropertyValue('currentPosition') ??
        $currentPosition;
  }

  String $dataUrl = "";

  Future<String> get dataUrl async {
    return await $$context$$?.getPropertyValue('dataUrl') ?? $dataUrl;
  }

  num $downloadPercent = 0;

  Future<num> get downloadPercent async {
    return await $$context$$?.getPropertyValue('downloadPercent') ??
        $downloadPercent;
  }

  num $duration = 0;

  Future<num> get duration async {
    return await $$context$$?.getPropertyValue('duration') ?? $duration;
  }

  dynamic $status;

  Future<dynamic> get status async {
    return await $$context$$?.getPropertyValue('status') ?? $status;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetBackgroundAudioPlayerStateSuccessCallbackResult({this.$$context$$});

  void setValues(
      {num? currentPosition,
      String? dataUrl,
      num? downloadPercent,
      num? duration,
      dynamic status,
      String? errMsg}) {
    if (currentPosition != null) $currentPosition = currentPosition;
    if (dataUrl != null) $dataUrl = dataUrl;
    if (downloadPercent != null) $downloadPercent = downloadPercent;
    if (duration != null) $duration = duration;
    if (status != null) $status = status;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'currentPosition': $currentPosition,
      'dataUrl': $dataUrl,
      'downloadPercent': $downloadPercent,
      'duration': $duration,
      'status': $status,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class GetBackgroundFetchDataOption {
  mpjs.JsObject? $$context$$;

  String $fetchType = "";

  Future<String> get fetchType async {
    return await $$context$$?.getPropertyValue('fetchType') ?? $fetchType;
  }

  GetBackgroundFetchDataCompleteCallback? $complete;

  Future<GetBackgroundFetchDataCompleteCallback?> get complete async {
    return $complete;
  }

  GetBackgroundFetchDataFailCallback? $fail;

  Future<GetBackgroundFetchDataFailCallback?> get fail async {
    return $fail;
  }

  GetBackgroundFetchDataSuccessCallback? $success;

  Future<GetBackgroundFetchDataSuccessCallback?> get success async {
    return $success;
  }

  GetBackgroundFetchDataOption({this.$$context$$});

  void setValues(
      {String? fetchType,
      GetBackgroundFetchDataCompleteCallback? complete,
      GetBackgroundFetchDataFailCallback? fail,
      GetBackgroundFetchDataSuccessCallback? success}) {
    if (fetchType != null) $fetchType = fetchType;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'fetchType': $fetchType,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [
              (e) => GetBackgroundFetchDataSuccessCallbackResult($$context$$: e)
            ])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetBackgroundFetchDataSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $fetchedData = "";

  Future<String> get fetchedData async {
    return await $$context$$?.getPropertyValue('fetchedData') ?? $fetchedData;
  }

  String $path = "";

  Future<String> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  String $query = "";

  Future<String> get query async {
    return await $$context$$?.getPropertyValue('query') ?? $query;
  }

  num $scene = 0;

  Future<num> get scene async {
    return await $$context$$?.getPropertyValue('scene') ?? $scene;
  }

  num $timeStamp = 0;

  Future<num> get timeStamp async {
    return await $$context$$?.getPropertyValue('timeStamp') ?? $timeStamp;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetBackgroundFetchDataSuccessCallbackResult({this.$$context$$});

  void setValues(
      {String? fetchedData,
      String? path,
      String? query,
      num? scene,
      num? timeStamp,
      String? errMsg}) {
    if (fetchedData != null) $fetchedData = fetchedData;
    if (path != null) $path = path;
    if (query != null) $query = query;
    if (scene != null) $scene = scene;
    if (timeStamp != null) $timeStamp = timeStamp;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'fetchedData': $fetchedData,
      'path': $path,
      'query': $query,
      'scene': $scene,
      'timeStamp': $timeStamp,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class GetBackgroundFetchTokenOption {
  mpjs.JsObject? $$context$$;

  GetBackgroundFetchTokenCompleteCallback? $complete;

  Future<GetBackgroundFetchTokenCompleteCallback?> get complete async {
    return $complete;
  }

  GetBackgroundFetchTokenFailCallback? $fail;

  Future<GetBackgroundFetchTokenFailCallback?> get fail async {
    return $fail;
  }

  GetBackgroundFetchTokenSuccessCallback? $success;

  Future<GetBackgroundFetchTokenSuccessCallback?> get success async {
    return $success;
  }

  GetBackgroundFetchTokenOption({this.$$context$$});

  void setValues(
      {GetBackgroundFetchTokenCompleteCallback? complete,
      GetBackgroundFetchTokenFailCallback? fail,
      GetBackgroundFetchTokenSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [
              (e) =>
                  GetBackgroundFetchTokenSuccessCallbackResult($$context$$: e)
            ])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetBackgroundFetchTokenSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  num $token = 0;

  Future<num> get token async {
    return await $$context$$?.getPropertyValue('token') ?? $token;
  }

  GetBackgroundFetchTokenSuccessCallbackResult({this.$$context$$});

  void setValues({String? errMsg, num? token}) {
    if (errMsg != null) $errMsg = errMsg;
    if (token != null) $token = token;
  }

  Map toJson() {
    return {'errMsg': $errMsg, 'token': $token}
      ..removeWhere((key, value) => value == null);
  }
}

class GetBatteryInfoOption {
  mpjs.JsObject? $$context$$;

  GetBatteryInfoCompleteCallback? $complete;

  Future<GetBatteryInfoCompleteCallback?> get complete async {
    return $complete;
  }

  GetBatteryInfoFailCallback? $fail;

  Future<GetBatteryInfoFailCallback?> get fail async {
    return $fail;
  }

  GetBatteryInfoSuccessCallback? $success;

  Future<GetBatteryInfoSuccessCallback?> get success async {
    return $success;
  }

  GetBatteryInfoOption({this.$$context$$});

  void setValues(
      {GetBatteryInfoCompleteCallback? complete,
      GetBatteryInfoFailCallback? fail,
      GetBatteryInfoSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetBatteryInfoSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetBatteryInfoSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  bool $isCharging = false;

  Future<bool> get isCharging async {
    return await $$context$$?.getPropertyValue('isCharging') ?? $isCharging;
  }

  num $level = 0;

  Future<num> get level async {
    return await $$context$$?.getPropertyValue('level') ?? $level;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetBatteryInfoSuccessCallbackResult({this.$$context$$});

  void setValues({bool? isCharging, num? level, String? errMsg}) {
    if (isCharging != null) $isCharging = isCharging;
    if (level != null) $level = level;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'isCharging': $isCharging, 'level': $level, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetBatteryInfoSyncResult {
  mpjs.JsObject? $$context$$;

  bool $isCharging = false;

  Future<bool> get isCharging async {
    return await $$context$$?.getPropertyValue('isCharging') ?? $isCharging;
  }

  num $level = 0;

  Future<num> get level async {
    return await $$context$$?.getPropertyValue('level') ?? $level;
  }

  GetBatteryInfoSyncResult({this.$$context$$});

  void setValues({bool? isCharging, num? level}) {
    if (isCharging != null) $isCharging = isCharging;
    if (level != null) $level = level;
  }

  Map toJson() {
    return {'isCharging': $isCharging, 'level': $level}
      ..removeWhere((key, value) => value == null);
  }
}

class GetBeaconsOption {
  mpjs.JsObject? $$context$$;

  GetBeaconsCompleteCallback? $complete;

  Future<GetBeaconsCompleteCallback?> get complete async {
    return $complete;
  }

  GetBeaconsFailCallback? $fail;

  Future<GetBeaconsFailCallback?> get fail async {
    return $fail;
  }

  GetBeaconsSuccessCallback? $success;

  Future<GetBeaconsSuccessCallback?> get success async {
    return $success;
  }

  GetBeaconsOption({this.$$context$$});

  void setValues(
      {GetBeaconsCompleteCallback? complete,
      GetBeaconsFailCallback? fail,
      GetBeaconsSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => BeaconError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => BeaconError($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetBeaconsSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetBeaconsSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  List<BeaconInfo> $beacons = <BeaconInfo>[];

  Future<List<BeaconInfo>> get beacons async {
    return ((await $$context$$?.getPropertyValue('beacons')) as List)
        .map((it) => BeaconInfo($$context$$: it))
        .toList();
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetBeaconsSuccessCallbackResult({this.$$context$$});

  void setValues({List<BeaconInfo>? beacons, String? errMsg}) {
    if (beacons != null) $beacons = beacons;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'beacons': $beacons, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetBluetoothAdapterStateOption {
  mpjs.JsObject? $$context$$;

  GetBluetoothAdapterStateCompleteCallback? $complete;

  Future<GetBluetoothAdapterStateCompleteCallback?> get complete async {
    return $complete;
  }

  GetBluetoothAdapterStateFailCallback? $fail;

  Future<GetBluetoothAdapterStateFailCallback?> get fail async {
    return $fail;
  }

  GetBluetoothAdapterStateSuccessCallback? $success;

  Future<GetBluetoothAdapterStateSuccessCallback?> get success async {
    return $success;
  }

  GetBluetoothAdapterStateOption({this.$$context$$});

  void setValues(
      {GetBluetoothAdapterStateCompleteCallback? complete,
      GetBluetoothAdapterStateFailCallback? fail,
      GetBluetoothAdapterStateSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [
              (e) =>
                  GetBluetoothAdapterStateSuccessCallbackResult($$context$$: e)
            ])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetBluetoothAdapterStateSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  bool $available = false;

  Future<bool> get available async {
    return await $$context$$?.getPropertyValue('available') ?? $available;
  }

  bool $discovering = false;

  Future<bool> get discovering async {
    return await $$context$$?.getPropertyValue('discovering') ?? $discovering;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetBluetoothAdapterStateSuccessCallbackResult({this.$$context$$});

  void setValues({bool? available, bool? discovering, String? errMsg}) {
    if (available != null) $available = available;
    if (discovering != null) $discovering = discovering;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'available': $available,
      'discovering': $discovering,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class GetBluetoothDevicesOption {
  mpjs.JsObject? $$context$$;

  GetBluetoothDevicesCompleteCallback? $complete;

  Future<GetBluetoothDevicesCompleteCallback?> get complete async {
    return $complete;
  }

  GetBluetoothDevicesFailCallback? $fail;

  Future<GetBluetoothDevicesFailCallback?> get fail async {
    return $fail;
  }

  GetBluetoothDevicesSuccessCallback? $success;

  Future<GetBluetoothDevicesSuccessCallback?> get success async {
    return $success;
  }

  GetBluetoothDevicesOption({this.$$context$$});

  void setValues(
      {GetBluetoothDevicesCompleteCallback? complete,
      GetBluetoothDevicesFailCallback? fail,
      GetBluetoothDevicesSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetBluetoothDevicesSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetBluetoothDevicesSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  List<BlueToothDevice> $devices = <BlueToothDevice>[];

  Future<List<BlueToothDevice>> get devices async {
    return ((await $$context$$?.getPropertyValue('devices')) as List)
        .map((it) => BlueToothDevice($$context$$: it))
        .toList();
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetBluetoothDevicesSuccessCallbackResult({this.$$context$$});

  void setValues({List<BlueToothDevice>? devices, String? errMsg}) {
    if (devices != null) $devices = devices;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'devices': $devices, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetCenterLocationOption {
  mpjs.JsObject? $$context$$;

  GetCenterLocationCompleteCallback? $complete;

  Future<GetCenterLocationCompleteCallback?> get complete async {
    return $complete;
  }

  GetCenterLocationFailCallback? $fail;

  Future<GetCenterLocationFailCallback?> get fail async {
    return $fail;
  }

  String? $iconPath;

  Future<String?> get iconPath async {
    return await $$context$$?.getPropertyValue('iconPath') ?? $iconPath;
  }

  GetCenterLocationSuccessCallback? $success;

  Future<GetCenterLocationSuccessCallback?> get success async {
    return $success;
  }

  GetCenterLocationOption({this.$$context$$});

  void setValues(
      {GetCenterLocationCompleteCallback? complete,
      GetCenterLocationFailCallback? fail,
      String? iconPath,
      GetCenterLocationSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (iconPath != null) $iconPath = iconPath;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'iconPath': $iconPath,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetCenterLocationSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetCenterLocationSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  num $latitude = 0;

  Future<num> get latitude async {
    return await $$context$$?.getPropertyValue('latitude') ?? $latitude;
  }

  num $longitude = 0;

  Future<num> get longitude async {
    return await $$context$$?.getPropertyValue('longitude') ?? $longitude;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetCenterLocationSuccessCallbackResult({this.$$context$$});

  void setValues({num? latitude, num? longitude, String? errMsg}) {
    if (latitude != null) $latitude = latitude;
    if (longitude != null) $longitude = longitude;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'latitude': $latitude, 'longitude': $longitude, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetChannelsLiveInfoOption {
  mpjs.JsObject? $$context$$;

  String $finderUserName = "";

  Future<String> get finderUserName async {
    return await $$context$$?.getPropertyValue('finderUserName') ??
        $finderUserName;
  }

  GetChannelsLiveInfoCompleteCallback? $complete;

  Future<GetChannelsLiveInfoCompleteCallback?> get complete async {
    return $complete;
  }

  num? $endTime;

  Future<num?> get endTime async {
    return await $$context$$?.getPropertyValue('endTime') ?? $endTime;
  }

  GetChannelsLiveInfoFailCallback? $fail;

  Future<GetChannelsLiveInfoFailCallback?> get fail async {
    return $fail;
  }

  num? $startTime;

  Future<num?> get startTime async {
    return await $$context$$?.getPropertyValue('startTime') ?? $startTime;
  }

  GetChannelsLiveInfoSuccessCallback? $success;

  Future<GetChannelsLiveInfoSuccessCallback?> get success async {
    return $success;
  }

  GetChannelsLiveInfoOption({this.$$context$$});

  void setValues(
      {String? finderUserName,
      GetChannelsLiveInfoCompleteCallback? complete,
      num? endTime,
      GetChannelsLiveInfoFailCallback? fail,
      num? startTime,
      GetChannelsLiveInfoSuccessCallback? success}) {
    if (finderUserName != null) $finderUserName = finderUserName;
    if (complete != null) $complete = complete;
    if (endTime != null) $endTime = endTime;
    if (fail != null) $fail = fail;
    if (startTime != null) $startTime = startTime;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'finderUserName': $finderUserName,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'endTime': $endTime,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'startTime': $startTime,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetChannelsLiveInfoSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetChannelsLiveInfoSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $description = "";

  Future<String> get description async {
    return await $$context$$?.getPropertyValue('description') ?? $description;
  }

  String $feedId = "";

  Future<String> get feedId async {
    return await $$context$$?.getPropertyValue('feedId') ?? $feedId;
  }

  String $headUrl = "";

  Future<String> get headUrl async {
    return await $$context$$?.getPropertyValue('headUrl') ?? $headUrl;
  }

  String $nickname = "";

  Future<String> get nickname async {
    return await $$context$$?.getPropertyValue('nickname') ?? $nickname;
  }

  String $nonceId = "";

  Future<String> get nonceId async {
    return await $$context$$?.getPropertyValue('nonceId') ?? $nonceId;
  }

  List<dynamic> $otherInfos = <dynamic>[];

  Future<List<dynamic>> get otherInfos async {
    return await $$context$$?.getPropertyValue('otherInfos') ?? $otherInfos;
  }

  String $replayStatus = "";

  Future<String> get replayStatus async {
    return await $$context$$?.getPropertyValue('replayStatus') ?? $replayStatus;
  }

  num $status = 0;

  Future<num> get status async {
    return await $$context$$?.getPropertyValue('status') ?? $status;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetChannelsLiveInfoSuccessCallbackResult({this.$$context$$});

  void setValues(
      {String? description,
      String? feedId,
      String? headUrl,
      String? nickname,
      String? nonceId,
      List<dynamic>? otherInfos,
      String? replayStatus,
      num? status,
      String? errMsg}) {
    if (description != null) $description = description;
    if (feedId != null) $feedId = feedId;
    if (headUrl != null) $headUrl = headUrl;
    if (nickname != null) $nickname = nickname;
    if (nonceId != null) $nonceId = nonceId;
    if (otherInfos != null) $otherInfos = otherInfos;
    if (replayStatus != null) $replayStatus = replayStatus;
    if (status != null) $status = status;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'description': $description,
      'feedId': $feedId,
      'headUrl': $headUrl,
      'nickname': $nickname,
      'nonceId': $nonceId,
      'otherInfos': $otherInfos,
      'replayStatus': $replayStatus,
      'status': $status,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class GetChannelsLiveNoticeInfoOption {
  mpjs.JsObject? $$context$$;

  String $finderUserName = "";

  Future<String> get finderUserName async {
    return await $$context$$?.getPropertyValue('finderUserName') ??
        $finderUserName;
  }

  GetChannelsLiveNoticeInfoCompleteCallback? $complete;

  Future<GetChannelsLiveNoticeInfoCompleteCallback?> get complete async {
    return $complete;
  }

  GetChannelsLiveNoticeInfoFailCallback? $fail;

  Future<GetChannelsLiveNoticeInfoFailCallback?> get fail async {
    return $fail;
  }

  GetChannelsLiveNoticeInfoSuccessCallback? $success;

  Future<GetChannelsLiveNoticeInfoSuccessCallback?> get success async {
    return $success;
  }

  GetChannelsLiveNoticeInfoOption({this.$$context$$});

  void setValues(
      {String? finderUserName,
      GetChannelsLiveNoticeInfoCompleteCallback? complete,
      GetChannelsLiveNoticeInfoFailCallback? fail,
      GetChannelsLiveNoticeInfoSuccessCallback? success}) {
    if (finderUserName != null) $finderUserName = finderUserName;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'finderUserName': $finderUserName,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [
              (e) =>
                  GetChannelsLiveNoticeInfoSuccessCallbackResult($$context$$: e)
            ])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetChannelsLiveNoticeInfoSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $headUrl = "";

  Future<String> get headUrl async {
    return await $$context$$?.getPropertyValue('headUrl') ?? $headUrl;
  }

  String $nickname = "";

  Future<String> get nickname async {
    return await $$context$$?.getPropertyValue('nickname') ?? $nickname;
  }

  String $noticeId = "";

  Future<String> get noticeId async {
    return await $$context$$?.getPropertyValue('noticeId') ?? $noticeId;
  }

  List<dynamic> $otherInfos = <dynamic>[];

  Future<List<dynamic>> get otherInfos async {
    return await $$context$$?.getPropertyValue('otherInfos') ?? $otherInfos;
  }

  bool $reservable = false;

  Future<bool> get reservable async {
    return await $$context$$?.getPropertyValue('reservable') ?? $reservable;
  }

  String $startTime = "";

  Future<String> get startTime async {
    return await $$context$$?.getPropertyValue('startTime') ?? $startTime;
  }

  num $status = 0;

  Future<num> get status async {
    return await $$context$$?.getPropertyValue('status') ?? $status;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetChannelsLiveNoticeInfoSuccessCallbackResult({this.$$context$$});

  void setValues(
      {String? headUrl,
      String? nickname,
      String? noticeId,
      List<dynamic>? otherInfos,
      bool? reservable,
      String? startTime,
      num? status,
      String? errMsg}) {
    if (headUrl != null) $headUrl = headUrl;
    if (nickname != null) $nickname = nickname;
    if (noticeId != null) $noticeId = noticeId;
    if (otherInfos != null) $otherInfos = otherInfos;
    if (reservable != null) $reservable = reservable;
    if (startTime != null) $startTime = startTime;
    if (status != null) $status = status;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'headUrl': $headUrl,
      'nickname': $nickname,
      'noticeId': $noticeId,
      'otherInfos': $otherInfos,
      'reservable': $reservable,
      'startTime': $startTime,
      'status': $status,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class GetChannelsShareKeyOption {
  mpjs.JsObject? $$context$$;

  GetChannelsShareKeyCompleteCallback? $complete;

  Future<GetChannelsShareKeyCompleteCallback?> get complete async {
    return $complete;
  }

  GetChannelsShareKeyFailCallback? $fail;

  Future<GetChannelsShareKeyFailCallback?> get fail async {
    return $fail;
  }

  GetChannelsShareKeySuccessCallback? $success;

  Future<GetChannelsShareKeySuccessCallback?> get success async {
    return $success;
  }

  GetChannelsShareKeyOption({this.$$context$$});

  void setValues(
      {GetChannelsShareKeyCompleteCallback? complete,
      GetChannelsShareKeyFailCallback? fail,
      GetChannelsShareKeySuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetChannelsShareKeySuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetChannelsShareKeySuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  PromoterResult $promoter = PromoterResult();

  Future<PromoterResult> get promoter async {
    return PromoterResult($$context$$: $$context$$?.getProperty('promoter'));
  }

  String $sharerOpenId = "";

  Future<String> get sharerOpenId async {
    return await $$context$$?.getPropertyValue('sharerOpenId') ?? $sharerOpenId;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetChannelsShareKeySuccessCallbackResult({this.$$context$$});

  void setValues(
      {PromoterResult? promoter, String? sharerOpenId, String? errMsg}) {
    if (promoter != null) $promoter = promoter;
    if (sharerOpenId != null) $sharerOpenId = sharerOpenId;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'promoter': $promoter,
      'sharerOpenId': $sharerOpenId,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class GetClipboardDataOption {
  mpjs.JsObject? $$context$$;

  GetClipboardDataCompleteCallback? $complete;

  Future<GetClipboardDataCompleteCallback?> get complete async {
    return $complete;
  }

  GetClipboardDataFailCallback? $fail;

  Future<GetClipboardDataFailCallback?> get fail async {
    return $fail;
  }

  GetClipboardDataSuccessCallback? $success;

  Future<GetClipboardDataSuccessCallback?> get success async {
    return $success;
  }

  GetClipboardDataOption({this.$$context$$});

  void setValues(
      {GetClipboardDataCompleteCallback? complete,
      GetClipboardDataFailCallback? fail,
      GetClipboardDataSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetClipboardDataSuccessCallbackOption($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetClipboardDataSuccessCallbackOption {
  mpjs.JsObject? $$context$$;

  String $data = "";

  Future<String> get data async {
    return await $$context$$?.getPropertyValue('data') ?? $data;
  }

  GetClipboardDataSuccessCallbackOption({this.$$context$$});

  void setValues({String? data}) {
    if (data != null) $data = data;
  }

  Map toJson() {
    return {'data': $data}..removeWhere((key, value) => value == null);
  }
}

class GetConnectedBluetoothDevicesOption {
  mpjs.JsObject? $$context$$;

  List<String> $services = <String>[];

  Future<List<String>> get services async {
    return await $$context$$?.getPropertyValue('services') ?? $services;
  }

  GetConnectedBluetoothDevicesCompleteCallback? $complete;

  Future<GetConnectedBluetoothDevicesCompleteCallback?> get complete async {
    return $complete;
  }

  GetConnectedBluetoothDevicesFailCallback? $fail;

  Future<GetConnectedBluetoothDevicesFailCallback?> get fail async {
    return $fail;
  }

  GetConnectedBluetoothDevicesSuccessCallback? $success;

  Future<GetConnectedBluetoothDevicesSuccessCallback?> get success async {
    return $success;
  }

  GetConnectedBluetoothDevicesOption({this.$$context$$});

  void setValues(
      {List<String>? services,
      GetConnectedBluetoothDevicesCompleteCallback? complete,
      GetConnectedBluetoothDevicesFailCallback? fail,
      GetConnectedBluetoothDevicesSuccessCallback? success}) {
    if (services != null) $services = services;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'services': $services,
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [
              (e) => GetConnectedBluetoothDevicesSuccessCallbackResult(
                  $$context$$: e)
            ])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetConnectedBluetoothDevicesSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  List<BluetoothDeviceInfo> $devices = <BluetoothDeviceInfo>[];

  Future<List<BluetoothDeviceInfo>> get devices async {
    return ((await $$context$$?.getPropertyValue('devices')) as List)
        .map((it) => BluetoothDeviceInfo($$context$$: it))
        .toList();
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetConnectedBluetoothDevicesSuccessCallbackResult({this.$$context$$});

  void setValues({List<BluetoothDeviceInfo>? devices, String? errMsg}) {
    if (devices != null) $devices = devices;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'devices': $devices, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetConnectedWifiOption {
  mpjs.JsObject? $$context$$;

  GetConnectedWifiCompleteCallback? $complete;

  Future<GetConnectedWifiCompleteCallback?> get complete async {
    return $complete;
  }

  GetConnectedWifiFailCallback? $fail;

  Future<GetConnectedWifiFailCallback?> get fail async {
    return $fail;
  }

  bool? $partialInfo;

  Future<bool?> get partialInfo async {
    return await $$context$$?.getPropertyValue('partialInfo') ?? $partialInfo;
  }

  GetConnectedWifiSuccessCallback? $success;

  Future<GetConnectedWifiSuccessCallback?> get success async {
    return $success;
  }

  GetConnectedWifiOption({this.$$context$$});

  void setValues(
      {GetConnectedWifiCompleteCallback? complete,
      GetConnectedWifiFailCallback? fail,
      bool? partialInfo,
      GetConnectedWifiSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (partialInfo != null) $partialInfo = partialInfo;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => WifiError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => WifiError($$context$$: e)])
          : null,
      'partialInfo': $partialInfo,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetConnectedWifiSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetConnectedWifiSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  WifiInfo $wifi = WifiInfo();

  Future<WifiInfo> get wifi async {
    return WifiInfo($$context$$: $$context$$?.getProperty('wifi'));
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetConnectedWifiSuccessCallbackResult({this.$$context$$});

  void setValues({WifiInfo? wifi, String? errMsg}) {
    if (wifi != null) $wifi = wifi;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'wifi': $wifi, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetContentsOption {
  mpjs.JsObject? $$context$$;

  GetContentsCompleteCallback? $complete;

  Future<GetContentsCompleteCallback?> get complete async {
    return $complete;
  }

  GetContentsFailCallback? $fail;

  Future<GetContentsFailCallback?> get fail async {
    return $fail;
  }

  GetContentsSuccessCallback? $success;

  Future<GetContentsSuccessCallback?> get success async {
    return $success;
  }

  GetContentsOption({this.$$context$$});

  void setValues(
      {GetContentsCompleteCallback? complete,
      GetContentsFailCallback? fail,
      GetContentsSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetContentsSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetContentsSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  IAnyObject $delta = IAnyObject();

  Future<IAnyObject> get delta async {
    return IAnyObject($$context$$: $$context$$?.getProperty('delta'));
  }

  String $html = "";

  Future<String> get html async {
    return await $$context$$?.getPropertyValue('html') ?? $html;
  }

  String $text = "";

  Future<String> get text async {
    return await $$context$$?.getPropertyValue('text') ?? $text;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetContentsSuccessCallbackResult({this.$$context$$});

  void setValues(
      {IAnyObject? delta, String? html, String? text, String? errMsg}) {
    if (delta != null) $delta = delta;
    if (html != null) $html = html;
    if (text != null) $text = text;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'delta': $delta, 'html': $html, 'text': $text, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetExtConfigOption {
  mpjs.JsObject? $$context$$;

  GetExtConfigCompleteCallback? $complete;

  Future<GetExtConfigCompleteCallback?> get complete async {
    return $complete;
  }

  GetExtConfigFailCallback? $fail;

  Future<GetExtConfigFailCallback?> get fail async {
    return $fail;
  }

  GetExtConfigSuccessCallback? $success;

  Future<GetExtConfigSuccessCallback?> get success async {
    return $success;
  }

  GetExtConfigOption({this.$$context$$});

  void setValues(
      {GetExtConfigCompleteCallback? complete,
      GetExtConfigFailCallback? fail,
      GetExtConfigSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetExtConfigSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetExtConfigSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  IAnyObject $extConfig = IAnyObject();

  Future<IAnyObject> get extConfig async {
    return IAnyObject($$context$$: $$context$$?.getProperty('extConfig'));
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetExtConfigSuccessCallbackResult({this.$$context$$});

  void setValues({IAnyObject? extConfig, String? errMsg}) {
    if (extConfig != null) $extConfig = extConfig;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'extConfig': $extConfig, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetFileInfoFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetFileInfoFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class GetFileInfoOption {
  mpjs.JsObject? $$context$$;

  String $filePath = "";

  Future<String> get filePath async {
    return await $$context$$?.getPropertyValue('filePath') ?? $filePath;
  }

  GetFileInfoCompleteCallback? $complete;

  Future<GetFileInfoCompleteCallback?> get complete async {
    return $complete;
  }

  GetFileInfoFailCallback? $fail;

  Future<GetFileInfoFailCallback?> get fail async {
    return $fail;
  }

  GetFileInfoSuccessCallback? $success;

  Future<GetFileInfoSuccessCallback?> get success async {
    return $success;
  }

  GetFileInfoOption({this.$$context$$});

  void setValues(
      {String? filePath,
      GetFileInfoCompleteCallback? complete,
      GetFileInfoFailCallback? fail,
      GetFileInfoSuccessCallback? success}) {
    if (filePath != null) $filePath = filePath;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'filePath': $filePath,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GetFileInfoFailCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetFileInfoSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetFileInfoSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  num $size = 0;

  Future<num> get size async {
    return await $$context$$?.getPropertyValue('size') ?? $size;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetFileInfoSuccessCallbackResult({this.$$context$$});

  void setValues({num? size, String? errMsg}) {
    if (size != null) $size = size;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'size': $size, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetFuzzyLocationOption {
  mpjs.JsObject? $$context$$;

  GetFuzzyLocationCompleteCallback? $complete;

  Future<GetFuzzyLocationCompleteCallback?> get complete async {
    return $complete;
  }

  GetFuzzyLocationFailCallback? $fail;

  Future<GetFuzzyLocationFailCallback?> get fail async {
    return $fail;
  }

  GetFuzzyLocationSuccessCallback? $success;

  Future<GetFuzzyLocationSuccessCallback?> get success async {
    return $success;
  }

  String? $type;

  Future<String?> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  GetFuzzyLocationOption({this.$$context$$});

  void setValues(
      {GetFuzzyLocationCompleteCallback? complete,
      GetFuzzyLocationFailCallback? fail,
      GetFuzzyLocationSuccessCallback? success,
      String? type}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
    if (type != null) $type = type;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetFuzzyLocationSuccessCallbackResult($$context$$: e)])
          : null,
      'type': $type
    }..removeWhere((key, value) => value == null);
  }
}

class GetFuzzyLocationSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  num $latitude = 0;

  Future<num> get latitude async {
    return await $$context$$?.getPropertyValue('latitude') ?? $latitude;
  }

  num $longitude = 0;

  Future<num> get longitude async {
    return await $$context$$?.getPropertyValue('longitude') ?? $longitude;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetFuzzyLocationSuccessCallbackResult({this.$$context$$});

  void setValues({num? latitude, num? longitude, String? errMsg}) {
    if (latitude != null) $latitude = latitude;
    if (longitude != null) $longitude = longitude;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'latitude': $latitude, 'longitude': $longitude, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetGroupEnterInfoOption {
  mpjs.JsObject? $$context$$;

  GetGroupEnterInfoCompleteCallback? $complete;

  Future<GetGroupEnterInfoCompleteCallback?> get complete async {
    return $complete;
  }

  GetGroupEnterInfoFailCallback? $fail;

  Future<GetGroupEnterInfoFailCallback?> get fail async {
    return $fail;
  }

  GetGroupEnterInfoSuccessCallback? $success;

  Future<GetGroupEnterInfoSuccessCallback?> get success async {
    return $success;
  }

  GetGroupEnterInfoOption({this.$$context$$});

  void setValues(
      {GetGroupEnterInfoCompleteCallback? complete,
      GetGroupEnterInfoFailCallback? fail,
      GetGroupEnterInfoSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetGroupEnterInfoSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetGroupEnterInfoSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $cloudID = "";

  Future<String> get cloudID async {
    return await $$context$$?.getPropertyValue('cloudID') ?? $cloudID;
  }

  String $encryptedData = "";

  Future<String> get encryptedData async {
    return await $$context$$?.getPropertyValue('encryptedData') ??
        $encryptedData;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  String $iv = "";

  Future<String> get iv async {
    return await $$context$$?.getPropertyValue('iv') ?? $iv;
  }

  GetGroupEnterInfoSuccessCallbackResult({this.$$context$$});

  void setValues(
      {String? cloudID, String? encryptedData, String? errMsg, String? iv}) {
    if (cloudID != null) $cloudID = cloudID;
    if (encryptedData != null) $encryptedData = encryptedData;
    if (errMsg != null) $errMsg = errMsg;
    if (iv != null) $iv = iv;
  }

  Map toJson() {
    return {
      'cloudID': $cloudID,
      'encryptedData': $encryptedData,
      'errMsg': $errMsg,
      'iv': $iv
    }..removeWhere((key, value) => value == null);
  }
}

class GetHCEStateOption {
  mpjs.JsObject? $$context$$;

  GetHCEStateCompleteCallback? $complete;

  Future<GetHCEStateCompleteCallback?> get complete async {
    return $complete;
  }

  GetHCEStateFailCallback? $fail;

  Future<GetHCEStateFailCallback?> get fail async {
    return $fail;
  }

  GetHCEStateSuccessCallback? $success;

  Future<GetHCEStateSuccessCallback?> get success async {
    return $success;
  }

  GetHCEStateOption({this.$$context$$});

  void setValues(
      {GetHCEStateCompleteCallback? complete,
      GetHCEStateFailCallback? fail,
      GetHCEStateSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => NFCError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => NFCError($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => NFCError($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetHistoricalBytesOption {
  mpjs.JsObject? $$context$$;

  GetHistoricalBytesCompleteCallback? $complete;

  Future<GetHistoricalBytesCompleteCallback?> get complete async {
    return $complete;
  }

  GetHistoricalBytesFailCallback? $fail;

  Future<GetHistoricalBytesFailCallback?> get fail async {
    return $fail;
  }

  GetHistoricalBytesSuccessCallback? $success;

  Future<GetHistoricalBytesSuccessCallback?> get success async {
    return $success;
  }

  GetHistoricalBytesOption({this.$$context$$});

  void setValues(
      {GetHistoricalBytesCompleteCallback? complete,
      GetHistoricalBytesFailCallback? fail,
      GetHistoricalBytesSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => Nfcrwerror($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => Nfcrwerror($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetHistoricalBytesSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetHistoricalBytesSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  ArrayBuffer $histBytes = ArrayBuffer();

  Future<ArrayBuffer> get histBytes async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('histBytes'));
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetHistoricalBytesSuccessCallbackResult({this.$$context$$});

  void setValues({ArrayBuffer? histBytes, String? errMsg}) {
    if (histBytes != null) $histBytes = histBytes;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'histBytes': $histBytes, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetImageInfoOption {
  mpjs.JsObject? $$context$$;

  String $src = "";

  Future<String> get src async {
    return await $$context$$?.getPropertyValue('src') ?? $src;
  }

  GetImageInfoCompleteCallback? $complete;

  Future<GetImageInfoCompleteCallback?> get complete async {
    return $complete;
  }

  GetImageInfoFailCallback? $fail;

  Future<GetImageInfoFailCallback?> get fail async {
    return $fail;
  }

  GetImageInfoSuccessCallback? $success;

  Future<GetImageInfoSuccessCallback?> get success async {
    return $success;
  }

  GetImageInfoOption({this.$$context$$});

  void setValues(
      {String? src,
      GetImageInfoCompleteCallback? complete,
      GetImageInfoFailCallback? fail,
      GetImageInfoSuccessCallback? success}) {
    if (src != null) $src = src;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'src': $src,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetImageInfoSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetImageInfoSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  dynamic $orientation;

  Future<dynamic> get orientation async {
    return await $$context$$?.getPropertyValue('orientation') ?? $orientation;
  }

  String $path = "";

  Future<String> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  dynamic $type;

  Future<dynamic> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetImageInfoSuccessCallbackResult({this.$$context$$});

  void setValues(
      {num? height,
      dynamic orientation,
      String? path,
      dynamic type,
      num? width,
      String? errMsg}) {
    if (height != null) $height = height;
    if (orientation != null) $orientation = orientation;
    if (path != null) $path = path;
    if (type != null) $type = type;
    if (width != null) $width = width;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'height': $height,
      'orientation': $orientation,
      'path': $path,
      'type': $type,
      'width': $width,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class GetLatestUserKeyOption {
  mpjs.JsObject? $$context$$;

  GetLatestUserKeyCompleteCallback? $complete;

  Future<GetLatestUserKeyCompleteCallback?> get complete async {
    return $complete;
  }

  GetLatestUserKeyFailCallback? $fail;

  Future<GetLatestUserKeyFailCallback?> get fail async {
    return $fail;
  }

  GetLatestUserKeySuccessCallback? $success;

  Future<GetLatestUserKeySuccessCallback?> get success async {
    return $success;
  }

  GetLatestUserKeyOption({this.$$context$$});

  void setValues(
      {GetLatestUserKeyCompleteCallback? complete,
      GetLatestUserKeyFailCallback? fail,
      GetLatestUserKeySuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetLatestUserKeySuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetLatestUserKeySuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $encryptKey = "";

  Future<String> get encryptKey async {
    return await $$context$$?.getPropertyValue('encryptKey') ?? $encryptKey;
  }

  num $expireTime = 0;

  Future<num> get expireTime async {
    return await $$context$$?.getPropertyValue('expireTime') ?? $expireTime;
  }

  String $iv = "";

  Future<String> get iv async {
    return await $$context$$?.getPropertyValue('iv') ?? $iv;
  }

  num $version = 0;

  Future<num> get version async {
    return await $$context$$?.getPropertyValue('version') ?? $version;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetLatestUserKeySuccessCallbackResult({this.$$context$$});

  void setValues(
      {String? encryptKey,
      num? expireTime,
      String? iv,
      num? version,
      String? errMsg}) {
    if (encryptKey != null) $encryptKey = encryptKey;
    if (expireTime != null) $expireTime = expireTime;
    if (iv != null) $iv = iv;
    if (version != null) $version = version;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'encryptKey': $encryptKey,
      'expireTime': $expireTime,
      'iv': $iv,
      'version': $version,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class GetLocalIPAddressOption {
  mpjs.JsObject? $$context$$;

  GetLocalIPAddressCompleteCallback? $complete;

  Future<GetLocalIPAddressCompleteCallback?> get complete async {
    return $complete;
  }

  GetLocalIPAddressFailCallback? $fail;

  Future<GetLocalIPAddressFailCallback?> get fail async {
    return $fail;
  }

  GetLocalIPAddressSuccessCallback? $success;

  Future<GetLocalIPAddressSuccessCallback?> get success async {
    return $success;
  }

  GetLocalIPAddressOption({this.$$context$$});

  void setValues(
      {GetLocalIPAddressCompleteCallback? complete,
      GetLocalIPAddressFailCallback? fail,
      GetLocalIPAddressSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetLocalIPAddressSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetLocalIPAddressSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  String $localip = "";

  Future<String> get localip async {
    return await $$context$$?.getPropertyValue('localip') ?? $localip;
  }

  String $netmask = "";

  Future<String> get netmask async {
    return await $$context$$?.getPropertyValue('netmask') ?? $netmask;
  }

  GetLocalIPAddressSuccessCallbackResult({this.$$context$$});

  void setValues({String? errMsg, String? localip, String? netmask}) {
    if (errMsg != null) $errMsg = errMsg;
    if (localip != null) $localip = localip;
    if (netmask != null) $netmask = netmask;
  }

  Map toJson() {
    return {'errMsg': $errMsg, 'localip': $localip, 'netmask': $netmask}
      ..removeWhere((key, value) => value == null);
  }
}

class GetLocationOption {
  mpjs.JsObject? $$context$$;

  bool? $altitude;

  Future<bool?> get altitude async {
    return await $$context$$?.getPropertyValue('altitude') ?? $altitude;
  }

  GetLocationCompleteCallback? $complete;

  Future<GetLocationCompleteCallback?> get complete async {
    return $complete;
  }

  GetLocationFailCallback? $fail;

  Future<GetLocationFailCallback?> get fail async {
    return $fail;
  }

  num? $highAccuracyExpireTime;

  Future<num?> get highAccuracyExpireTime async {
    return await $$context$$?.getPropertyValue('highAccuracyExpireTime') ??
        $highAccuracyExpireTime;
  }

  bool? $isHighAccuracy;

  Future<bool?> get isHighAccuracy async {
    return await $$context$$?.getPropertyValue('isHighAccuracy') ??
        $isHighAccuracy;
  }

  GetLocationSuccessCallback? $success;

  Future<GetLocationSuccessCallback?> get success async {
    return $success;
  }

  String? $type;

  Future<String?> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  GetLocationOption({this.$$context$$});

  void setValues(
      {bool? altitude,
      GetLocationCompleteCallback? complete,
      GetLocationFailCallback? fail,
      num? highAccuracyExpireTime,
      bool? isHighAccuracy,
      GetLocationSuccessCallback? success,
      String? type}) {
    if (altitude != null) $altitude = altitude;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (highAccuracyExpireTime != null)
      $highAccuracyExpireTime = highAccuracyExpireTime;
    if (isHighAccuracy != null) $isHighAccuracy = isHighAccuracy;
    if (success != null) $success = success;
    if (type != null) $type = type;
  }

  Map toJson() {
    return {
      'altitude': $altitude,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'highAccuracyExpireTime': $highAccuracyExpireTime,
      'isHighAccuracy': $isHighAccuracy,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetLocationSuccessCallbackResult($$context$$: e)])
          : null,
      'type': $type
    }..removeWhere((key, value) => value == null);
  }
}

class GetLocationSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  num $accuracy = 0;

  Future<num> get accuracy async {
    return await $$context$$?.getPropertyValue('accuracy') ?? $accuracy;
  }

  num $altitude = 0;

  Future<num> get altitude async {
    return await $$context$$?.getPropertyValue('altitude') ?? $altitude;
  }

  num $horizontalAccuracy = 0;

  Future<num> get horizontalAccuracy async {
    return await $$context$$?.getPropertyValue('horizontalAccuracy') ??
        $horizontalAccuracy;
  }

  num $latitude = 0;

  Future<num> get latitude async {
    return await $$context$$?.getPropertyValue('latitude') ?? $latitude;
  }

  num $longitude = 0;

  Future<num> get longitude async {
    return await $$context$$?.getPropertyValue('longitude') ?? $longitude;
  }

  num $speed = 0;

  Future<num> get speed async {
    return await $$context$$?.getPropertyValue('speed') ?? $speed;
  }

  num $verticalAccuracy = 0;

  Future<num> get verticalAccuracy async {
    return await $$context$$?.getPropertyValue('verticalAccuracy') ??
        $verticalAccuracy;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetLocationSuccessCallbackResult({this.$$context$$});

  void setValues(
      {num? accuracy,
      num? altitude,
      num? horizontalAccuracy,
      num? latitude,
      num? longitude,
      num? speed,
      num? verticalAccuracy,
      String? errMsg}) {
    if (accuracy != null) $accuracy = accuracy;
    if (altitude != null) $altitude = altitude;
    if (horizontalAccuracy != null) $horizontalAccuracy = horizontalAccuracy;
    if (latitude != null) $latitude = latitude;
    if (longitude != null) $longitude = longitude;
    if (speed != null) $speed = speed;
    if (verticalAccuracy != null) $verticalAccuracy = verticalAccuracy;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'accuracy': $accuracy,
      'altitude': $altitude,
      'horizontalAccuracy': $horizontalAccuracy,
      'latitude': $latitude,
      'longitude': $longitude,
      'speed': $speed,
      'verticalAccuracy': $verticalAccuracy,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class GetLogManagerOption {
  mpjs.JsObject? $$context$$;

  num? $level;

  Future<num?> get level async {
    return await $$context$$?.getPropertyValue('level') ?? $level;
  }

  GetLogManagerOption({this.$$context$$});

  void setValues({num? level}) {
    if (level != null) $level = level;
  }

  Map toJson() {
    return {'level': $level}..removeWhere((key, value) => value == null);
  }
}

class GetMaxTransceiveLengthOption {
  mpjs.JsObject? $$context$$;

  GetMaxTransceiveLengthCompleteCallback? $complete;

  Future<GetMaxTransceiveLengthCompleteCallback?> get complete async {
    return $complete;
  }

  GetMaxTransceiveLengthFailCallback? $fail;

  Future<GetMaxTransceiveLengthFailCallback?> get fail async {
    return $fail;
  }

  GetMaxTransceiveLengthSuccessCallback? $success;

  Future<GetMaxTransceiveLengthSuccessCallback?> get success async {
    return $success;
  }

  GetMaxTransceiveLengthOption({this.$$context$$});

  void setValues(
      {GetMaxTransceiveLengthCompleteCallback? complete,
      GetMaxTransceiveLengthFailCallback? fail,
      GetMaxTransceiveLengthSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => Nfcrwerror($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => Nfcrwerror($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [
              (e) => GetMaxTransceiveLengthSuccessCallbackResult($$context$$: e)
            ])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetMaxTransceiveLengthSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  num $length = 0;

  Future<num> get length async {
    return await $$context$$?.getPropertyValue('length') ?? $length;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetMaxTransceiveLengthSuccessCallbackResult({this.$$context$$});

  void setValues({num? length, String? errMsg}) {
    if (length != null) $length = length;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'length': $length, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetNetworkTypeOption {
  mpjs.JsObject? $$context$$;

  GetNetworkTypeCompleteCallback? $complete;

  Future<GetNetworkTypeCompleteCallback?> get complete async {
    return $complete;
  }

  GetNetworkTypeFailCallback? $fail;

  Future<GetNetworkTypeFailCallback?> get fail async {
    return $fail;
  }

  GetNetworkTypeSuccessCallback? $success;

  Future<GetNetworkTypeSuccessCallback?> get success async {
    return $success;
  }

  GetNetworkTypeOption({this.$$context$$});

  void setValues(
      {GetNetworkTypeCompleteCallback? complete,
      GetNetworkTypeFailCallback? fail,
      GetNetworkTypeSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetNetworkTypeSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetNetworkTypeSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  bool $hasSystemProxy = false;

  Future<bool> get hasSystemProxy async {
    return await $$context$$?.getPropertyValue('hasSystemProxy') ??
        $hasSystemProxy;
  }

  dynamic $networkType;

  Future<dynamic> get networkType async {
    return await $$context$$?.getPropertyValue('networkType') ?? $networkType;
  }

  num $signalStrength = 0;

  Future<num> get signalStrength async {
    return await $$context$$?.getPropertyValue('signalStrength') ??
        $signalStrength;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetNetworkTypeSuccessCallbackResult({this.$$context$$});

  void setValues(
      {bool? hasSystemProxy,
      dynamic networkType,
      num? signalStrength,
      String? errMsg}) {
    if (hasSystemProxy != null) $hasSystemProxy = hasSystemProxy;
    if (networkType != null) $networkType = networkType;
    if (signalStrength != null) $signalStrength = signalStrength;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'hasSystemProxy': $hasSystemProxy,
      'networkType': $networkType,
      'signalStrength': $signalStrength,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class GetRandomValuesOption {
  mpjs.JsObject? $$context$$;

  num $length = 0;

  Future<num> get length async {
    return await $$context$$?.getPropertyValue('length') ?? $length;
  }

  GetRandomValuesCompleteCallback? $complete;

  Future<GetRandomValuesCompleteCallback?> get complete async {
    return $complete;
  }

  GetRandomValuesFailCallback? $fail;

  Future<GetRandomValuesFailCallback?> get fail async {
    return $fail;
  }

  GetRandomValuesSuccessCallback? $success;

  Future<GetRandomValuesSuccessCallback?> get success async {
    return $success;
  }

  GetRandomValuesOption({this.$$context$$});

  void setValues(
      {num? length,
      GetRandomValuesCompleteCallback? complete,
      GetRandomValuesFailCallback? fail,
      GetRandomValuesSuccessCallback? success}) {
    if (length != null) $length = length;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'length': $length,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetRandomValuesSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetRandomValuesSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  ArrayBuffer $randomValues = ArrayBuffer();

  Future<ArrayBuffer> get randomValues async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('randomValues'));
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetRandomValuesSuccessCallbackResult({this.$$context$$});

  void setValues({ArrayBuffer? randomValues, String? errMsg}) {
    if (randomValues != null) $randomValues = randomValues;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'randomValues': $randomValues, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetRegionOption {
  mpjs.JsObject? $$context$$;

  GetRegionCompleteCallback? $complete;

  Future<GetRegionCompleteCallback?> get complete async {
    return $complete;
  }

  GetRegionFailCallback? $fail;

  Future<GetRegionFailCallback?> get fail async {
    return $fail;
  }

  GetRegionSuccessCallback? $success;

  Future<GetRegionSuccessCallback?> get success async {
    return $success;
  }

  GetRegionOption({this.$$context$$});

  void setValues(
      {GetRegionCompleteCallback? complete,
      GetRegionFailCallback? fail,
      GetRegionSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetRegionSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetRegionSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  MapPostion $northeast = MapPostion();

  Future<MapPostion> get northeast async {
    return MapPostion($$context$$: $$context$$?.getProperty('northeast'));
  }

  MapPostion $southwest = MapPostion();

  Future<MapPostion> get southwest async {
    return MapPostion($$context$$: $$context$$?.getProperty('southwest'));
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetRegionSuccessCallbackResult({this.$$context$$});

  void setValues(
      {MapPostion? northeast, MapPostion? southwest, String? errMsg}) {
    if (northeast != null) $northeast = northeast;
    if (southwest != null) $southwest = southwest;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'northeast': $northeast, 'southwest': $southwest, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetRotateOption {
  mpjs.JsObject? $$context$$;

  GetRotateCompleteCallback? $complete;

  Future<GetRotateCompleteCallback?> get complete async {
    return $complete;
  }

  GetRotateFailCallback? $fail;

  Future<GetRotateFailCallback?> get fail async {
    return $fail;
  }

  GetRotateSuccessCallback? $success;

  Future<GetRotateSuccessCallback?> get success async {
    return $success;
  }

  GetRotateOption({this.$$context$$});

  void setValues(
      {GetRotateCompleteCallback? complete,
      GetRotateFailCallback? fail,
      GetRotateSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetRotateSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetRotateSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  num $rotate = 0;

  Future<num> get rotate async {
    return await $$context$$?.getPropertyValue('rotate') ?? $rotate;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetRotateSuccessCallbackResult({this.$$context$$});

  void setValues({num? rotate, String? errMsg}) {
    if (rotate != null) $rotate = rotate;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'rotate': $rotate, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetSakOption {
  mpjs.JsObject? $$context$$;

  GetSakCompleteCallback? $complete;

  Future<GetSakCompleteCallback?> get complete async {
    return $complete;
  }

  GetSakFailCallback? $fail;

  Future<GetSakFailCallback?> get fail async {
    return $fail;
  }

  GetSakSuccessCallback? $success;

  Future<GetSakSuccessCallback?> get success async {
    return $success;
  }

  GetSakOption({this.$$context$$});

  void setValues(
      {GetSakCompleteCallback? complete,
      GetSakFailCallback? fail,
      GetSakSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => Nfcrwerror($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => Nfcrwerror($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GetSakSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetSakSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  num $sak = 0;

  Future<num> get sak async {
    return await $$context$$?.getPropertyValue('sak') ?? $sak;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetSakSuccessCallbackResult({this.$$context$$});

  void setValues({num? sak, String? errMsg}) {
    if (sak != null) $sak = sak;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'sak': $sak, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetSavedFileListOption {
  mpjs.JsObject? $$context$$;

  GetSavedFileListCompleteCallback? $complete;

  Future<GetSavedFileListCompleteCallback?> get complete async {
    return $complete;
  }

  GetSavedFileListFailCallback? $fail;

  Future<GetSavedFileListFailCallback?> get fail async {
    return $fail;
  }

  GetSavedFileListSuccessCallback? $success;

  Future<GetSavedFileListSuccessCallback?> get success async {
    return $success;
  }

  GetSavedFileListOption({this.$$context$$});

  void setValues(
      {GetSavedFileListCompleteCallback? complete,
      GetSavedFileListFailCallback? fail,
      GetSavedFileListSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetSavedFileListSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetSavedFileListSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  List<FileItem> $fileList = <FileItem>[];

  Future<List<FileItem>> get fileList async {
    return ((await $$context$$?.getPropertyValue('fileList')) as List)
        .map((it) => FileItem($$context$$: it))
        .toList();
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetSavedFileListSuccessCallbackResult({this.$$context$$});

  void setValues({List<FileItem>? fileList, String? errMsg}) {
    if (fileList != null) $fileList = fileList;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'fileList': $fileList, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetScaleOption {
  mpjs.JsObject? $$context$$;

  GetScaleCompleteCallback? $complete;

  Future<GetScaleCompleteCallback?> get complete async {
    return $complete;
  }

  GetScaleFailCallback? $fail;

  Future<GetScaleFailCallback?> get fail async {
    return $fail;
  }

  GetScaleSuccessCallback? $success;

  Future<GetScaleSuccessCallback?> get success async {
    return $success;
  }

  GetScaleOption({this.$$context$$});

  void setValues(
      {GetScaleCompleteCallback? complete,
      GetScaleFailCallback? fail,
      GetScaleSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GetScaleSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetScaleSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  num $scale = 0;

  Future<num> get scale async {
    return await $$context$$?.getPropertyValue('scale') ?? $scale;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetScaleSuccessCallbackResult({this.$$context$$});

  void setValues({num? scale, String? errMsg}) {
    if (scale != null) $scale = scale;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'scale': $scale, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetScreenBrightnessOption {
  mpjs.JsObject? $$context$$;

  GetScreenBrightnessCompleteCallback? $complete;

  Future<GetScreenBrightnessCompleteCallback?> get complete async {
    return $complete;
  }

  GetScreenBrightnessFailCallback? $fail;

  Future<GetScreenBrightnessFailCallback?> get fail async {
    return $fail;
  }

  GetScreenBrightnessSuccessCallback? $success;

  Future<GetScreenBrightnessSuccessCallback?> get success async {
    return $success;
  }

  GetScreenBrightnessOption({this.$$context$$});

  void setValues(
      {GetScreenBrightnessCompleteCallback? complete,
      GetScreenBrightnessFailCallback? fail,
      GetScreenBrightnessSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetScreenBrightnessSuccessCallbackOption($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetScreenBrightnessSuccessCallbackOption {
  mpjs.JsObject? $$context$$;

  num $value = 0;

  Future<num> get value async {
    return await $$context$$?.getPropertyValue('value') ?? $value;
  }

  GetScreenBrightnessSuccessCallbackOption({this.$$context$$});

  void setValues({num? value}) {
    if (value != null) $value = value;
  }

  Map toJson() {
    return {'value': $value}..removeWhere((key, value) => value == null);
  }
}

class GetScreenRecordingStateOption {
  mpjs.JsObject? $$context$$;

  GetScreenRecordingStateCompleteCallback? $complete;

  Future<GetScreenRecordingStateCompleteCallback?> get complete async {
    return $complete;
  }

  GetScreenRecordingStateFailCallback? $fail;

  Future<GetScreenRecordingStateFailCallback?> get fail async {
    return $fail;
  }

  GetScreenRecordingStateSuccessCallback? $success;

  Future<GetScreenRecordingStateSuccessCallback?> get success async {
    return $success;
  }

  GetScreenRecordingStateOption({this.$$context$$});

  void setValues(
      {GetScreenRecordingStateCompleteCallback? complete,
      GetScreenRecordingStateFailCallback? fail,
      GetScreenRecordingStateSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [
              (e) =>
                  GetScreenRecordingStateSuccessCallbackResult($$context$$: e)
            ])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetScreenRecordingStateSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  dynamic $state;

  Future<dynamic> get state async {
    return await $$context$$?.getPropertyValue('state') ?? $state;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetScreenRecordingStateSuccessCallbackResult({this.$$context$$});

  void setValues({dynamic state, String? errMsg}) {
    if (state != null) $state = state;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'state': $state, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetSelectedTextRangeOption {
  mpjs.JsObject? $$context$$;

  GetSelectedTextRangeCompleteCallback? $complete;

  Future<GetSelectedTextRangeCompleteCallback?> get complete async {
    return $complete;
  }

  GetSelectedTextRangeFailCallback? $fail;

  Future<GetSelectedTextRangeFailCallback?> get fail async {
    return $fail;
  }

  GetSelectedTextRangeSuccessCallback? $success;

  Future<GetSelectedTextRangeSuccessCallback?> get success async {
    return $success;
  }

  GetSelectedTextRangeOption({this.$$context$$});

  void setValues(
      {GetSelectedTextRangeCompleteCallback? complete,
      GetSelectedTextRangeFailCallback? fail,
      GetSelectedTextRangeSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [
              (e) => GetSelectedTextRangeSuccessCallbackResult($$context$$: e)
            ])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetSelectedTextRangeSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  num $end = 0;

  Future<num> get end async {
    return await $$context$$?.getPropertyValue('end') ?? $end;
  }

  num $start = 0;

  Future<num> get start async {
    return await $$context$$?.getPropertyValue('start') ?? $start;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetSelectedTextRangeSuccessCallbackResult({this.$$context$$});

  void setValues({num? end, num? start, String? errMsg}) {
    if (end != null) $end = end;
    if (start != null) $start = start;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'end': $end, 'start': $start, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetSelectionTextOption {
  mpjs.JsObject? $$context$$;

  GetSelectionTextCompleteCallback? $complete;

  Future<GetSelectionTextCompleteCallback?> get complete async {
    return $complete;
  }

  GetSelectionTextFailCallback? $fail;

  Future<GetSelectionTextFailCallback?> get fail async {
    return $fail;
  }

  GetSelectionTextSuccessCallback? $success;

  Future<GetSelectionTextSuccessCallback?> get success async {
    return $success;
  }

  GetSelectionTextOption({this.$$context$$});

  void setValues(
      {GetSelectionTextCompleteCallback? complete,
      GetSelectionTextFailCallback? fail,
      GetSelectionTextSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetSelectionTextSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetSelectionTextSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $text = "";

  Future<String> get text async {
    return await $$context$$?.getPropertyValue('text') ?? $text;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetSelectionTextSuccessCallbackResult({this.$$context$$});

  void setValues({String? text, String? errMsg}) {
    if (text != null) $text = text;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'text': $text, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetSettingOption {
  mpjs.JsObject? $$context$$;

  GetSettingCompleteCallback? $complete;

  Future<GetSettingCompleteCallback?> get complete async {
    return $complete;
  }

  GetSettingFailCallback? $fail;

  Future<GetSettingFailCallback?> get fail async {
    return $fail;
  }

  GetSettingSuccessCallback? $success;

  Future<GetSettingSuccessCallback?> get success async {
    return $success;
  }

  bool? $withSubscriptions;

  Future<bool?> get withSubscriptions async {
    return await $$context$$?.getPropertyValue('withSubscriptions') ??
        $withSubscriptions;
  }

  GetSettingOption({this.$$context$$});

  void setValues(
      {GetSettingCompleteCallback? complete,
      GetSettingFailCallback? fail,
      GetSettingSuccessCallback? success,
      bool? withSubscriptions}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
    if (withSubscriptions != null) $withSubscriptions = withSubscriptions;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetSettingSuccessCallbackResult($$context$$: e)])
          : null,
      'withSubscriptions': $withSubscriptions
    }..removeWhere((key, value) => value == null);
  }
}

class GetSettingSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  AuthSetting $authSetting = AuthSetting();

  Future<AuthSetting> get authSetting async {
    return AuthSetting($$context$$: $$context$$?.getProperty('authSetting'));
  }

  SubscriptionsSetting $subscriptionsSetting = SubscriptionsSetting();

  Future<SubscriptionsSetting> get subscriptionsSetting async {
    return SubscriptionsSetting(
        $$context$$: $$context$$?.getProperty('subscriptionsSetting'));
  }

  AuthSetting? $miniprogramAuthSetting;

  Future<AuthSetting?> get miniprogramAuthSetting async {
    return AuthSetting(
        $$context$$: $$context$$?.getProperty('miniprogramAuthSetting'));
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetSettingSuccessCallbackResult({this.$$context$$});

  void setValues(
      {AuthSetting? authSetting,
      SubscriptionsSetting? subscriptionsSetting,
      AuthSetting? miniprogramAuthSetting,
      String? errMsg}) {
    if (authSetting != null) $authSetting = authSetting;
    if (subscriptionsSetting != null)
      $subscriptionsSetting = subscriptionsSetting;
    if (miniprogramAuthSetting != null)
      $miniprogramAuthSetting = miniprogramAuthSetting;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'authSetting': $authSetting,
      'subscriptionsSetting': $subscriptionsSetting,
      'miniprogramAuthSetting': $miniprogramAuthSetting,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class GetShareInfoOption {
  mpjs.JsObject? $$context$$;

  String $shareTicket = "";

  Future<String> get shareTicket async {
    return await $$context$$?.getPropertyValue('shareTicket') ?? $shareTicket;
  }

  GetShareInfoCompleteCallback? $complete;

  Future<GetShareInfoCompleteCallback?> get complete async {
    return $complete;
  }

  GetShareInfoFailCallback? $fail;

  Future<GetShareInfoFailCallback?> get fail async {
    return $fail;
  }

  GetShareInfoSuccessCallback? $success;

  Future<GetShareInfoSuccessCallback?> get success async {
    return $success;
  }

  num? $timeout;

  Future<num?> get timeout async {
    return await $$context$$?.getPropertyValue('timeout') ?? $timeout;
  }

  GetShareInfoOption({this.$$context$$});

  void setValues(
      {String? shareTicket,
      GetShareInfoCompleteCallback? complete,
      GetShareInfoFailCallback? fail,
      GetShareInfoSuccessCallback? success,
      num? timeout}) {
    if (shareTicket != null) $shareTicket = shareTicket;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
    if (timeout != null) $timeout = timeout;
  }

  Map toJson() {
    return {
      'shareTicket': $shareTicket,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetGroupEnterInfoSuccessCallbackResult($$context$$: e)])
          : null,
      'timeout': $timeout
    }..removeWhere((key, value) => value == null);
  }
}

class GetSkewOption {
  mpjs.JsObject? $$context$$;

  GetSkewCompleteCallback? $complete;

  Future<GetSkewCompleteCallback?> get complete async {
    return $complete;
  }

  GetSkewFailCallback? $fail;

  Future<GetSkewFailCallback?> get fail async {
    return $fail;
  }

  GetSkewSuccessCallback? $success;

  Future<GetSkewSuccessCallback?> get success async {
    return $success;
  }

  GetSkewOption({this.$$context$$});

  void setValues(
      {GetSkewCompleteCallback? complete,
      GetSkewFailCallback? fail,
      GetSkewSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GetSkewSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetSkewSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  num $skew = 0;

  Future<num> get skew async {
    return await $$context$$?.getPropertyValue('skew') ?? $skew;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetSkewSuccessCallbackResult({this.$$context$$});

  void setValues({num? skew, String? errMsg}) {
    if (skew != null) $skew = skew;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'skew': $skew, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetSkylineInfoOption {
  mpjs.JsObject? $$context$$;

  GetSkylineInfoCompleteCallback? $complete;

  Future<GetSkylineInfoCompleteCallback?> get complete async {
    return $complete;
  }

  GetSkylineInfoFailCallback? $fail;

  Future<GetSkylineInfoFailCallback?> get fail async {
    return $fail;
  }

  GetSkylineInfoSuccessCallback? $success;

  Future<GetSkylineInfoSuccessCallback?> get success async {
    return $success;
  }

  GetSkylineInfoOption({this.$$context$$});

  void setValues(
      {GetSkylineInfoCompleteCallback? complete,
      GetSkylineInfoFailCallback? fail,
      GetSkylineInfoSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => SkylineInfo($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetStorageInfoOption {
  mpjs.JsObject? $$context$$;

  GetStorageInfoCompleteCallback? $complete;

  Future<GetStorageInfoCompleteCallback?> get complete async {
    return $complete;
  }

  GetStorageInfoFailCallback? $fail;

  Future<GetStorageInfoFailCallback?> get fail async {
    return $fail;
  }

  GetStorageInfoSuccessCallback? $success;

  Future<GetStorageInfoSuccessCallback?> get success async {
    return $success;
  }

  GetStorageInfoOption({this.$$context$$});

  void setValues(
      {GetStorageInfoCompleteCallback? complete,
      GetStorageInfoFailCallback? fail,
      GetStorageInfoSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetStorageInfoSuccessCallbackOption($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetStorageInfoSuccessCallbackOption {
  mpjs.JsObject? $$context$$;

  num $currentSize = 0;

  Future<num> get currentSize async {
    return await $$context$$?.getPropertyValue('currentSize') ?? $currentSize;
  }

  List<String> $keys = <String>[];

  Future<List<String>> get keys async {
    return await $$context$$?.getPropertyValue('keys') ?? $keys;
  }

  num $limitSize = 0;

  Future<num> get limitSize async {
    return await $$context$$?.getPropertyValue('limitSize') ?? $limitSize;
  }

  GetStorageInfoSuccessCallbackOption({this.$$context$$});

  void setValues({num? currentSize, List<String>? keys, num? limitSize}) {
    if (currentSize != null) $currentSize = currentSize;
    if (keys != null) $keys = keys;
    if (limitSize != null) $limitSize = limitSize;
  }

  Map toJson() {
    return {'currentSize': $currentSize, 'keys': $keys, 'limitSize': $limitSize}
      ..removeWhere((key, value) => value == null);
  }
}

class GetStorageInfoSyncOption {
  mpjs.JsObject? $$context$$;

  num $currentSize = 0;

  Future<num> get currentSize async {
    return await $$context$$?.getPropertyValue('currentSize') ?? $currentSize;
  }

  List<String> $keys = <String>[];

  Future<List<String>> get keys async {
    return await $$context$$?.getPropertyValue('keys') ?? $keys;
  }

  num $limitSize = 0;

  Future<num> get limitSize async {
    return await $$context$$?.getPropertyValue('limitSize') ?? $limitSize;
  }

  GetStorageInfoSyncOption({this.$$context$$});

  void setValues({num? currentSize, List<String>? keys, num? limitSize}) {
    if (currentSize != null) $currentSize = currentSize;
    if (keys != null) $keys = keys;
    if (limitSize != null) $limitSize = limitSize;
  }

  Map toJson() {
    return {'currentSize': $currentSize, 'keys': $keys, 'limitSize': $limitSize}
      ..removeWhere((key, value) => value == null);
  }
}

class GetStorageOption<T extends dynamic> {
  mpjs.JsObject? $$context$$;

  String $key = "";

  Future<String> get key async {
    return await $$context$$?.getPropertyValue('key') ?? $key;
  }

  GetStorageCompleteCallback? $complete;

  Future<GetStorageCompleteCallback?> get complete async {
    return $complete;
  }

  bool? $encrypt;

  Future<bool?> get encrypt async {
    return await $$context$$?.getPropertyValue('encrypt') ?? $encrypt;
  }

  GetStorageFailCallback? $fail;

  Future<GetStorageFailCallback?> get fail async {
    return $fail;
  }

  GetStorageSuccessCallback<T>? $success;

  Future<GetStorageSuccessCallback<T>?> get success async {
    return $success;
  }

  GetStorageOption({this.$$context$$});

  void setValues(
      {String? key,
      GetStorageCompleteCallback? complete,
      bool? encrypt,
      GetStorageFailCallback? fail,
      GetStorageSuccessCallback<T>? success}) {
    if (key != null) $key = key;
    if (complete != null) $complete = complete;
    if (encrypt != null) $encrypt = encrypt;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'key': $key,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'encrypt': $encrypt,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success
    }..removeWhere((key, value) => value == null);
  }
}

class GetStorageSuccessCallbackResult<T extends dynamic> {
  mpjs.JsObject? $$context$$;

  T? $data;

  Future<T?> get data async {
    return await $$context$$?.getPropertyValue('data') ?? $data;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetStorageSuccessCallbackResult({this.$$context$$});

  void setValues({T? data, String? errMsg}) {
    if (data != null) $data = data;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'data': $data, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class GetSystemInfoAsyncOption {
  mpjs.JsObject? $$context$$;

  GetSystemInfoAsyncCompleteCallback? $complete;

  Future<GetSystemInfoAsyncCompleteCallback?> get complete async {
    return $complete;
  }

  GetSystemInfoAsyncFailCallback? $fail;

  Future<GetSystemInfoAsyncFailCallback?> get fail async {
    return $fail;
  }

  GetSystemInfoAsyncSuccessCallback? $success;

  Future<GetSystemInfoAsyncSuccessCallback?> get success async {
    return $success;
  }

  GetSystemInfoAsyncOption({this.$$context$$});

  void setValues(
      {GetSystemInfoAsyncCompleteCallback? complete,
      GetSystemInfoAsyncFailCallback? fail,
      GetSystemInfoAsyncSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => SystemInfo($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetSystemInfoOption {
  mpjs.JsObject? $$context$$;

  GetSystemInfoCompleteCallback? $complete;

  Future<GetSystemInfoCompleteCallback?> get complete async {
    return $complete;
  }

  GetSystemInfoFailCallback? $fail;

  Future<GetSystemInfoFailCallback?> get fail async {
    return $fail;
  }

  GetSystemInfoSuccessCallback? $success;

  Future<GetSystemInfoSuccessCallback?> get success async {
    return $success;
  }

  GetSystemInfoOption({this.$$context$$});

  void setValues(
      {GetSystemInfoCompleteCallback? complete,
      GetSystemInfoFailCallback? fail,
      GetSystemInfoSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => SystemInfo($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetUserInfoOption {
  mpjs.JsObject? $$context$$;

  GetUserInfoCompleteCallback? $complete;

  Future<GetUserInfoCompleteCallback?> get complete async {
    return $complete;
  }

  GetUserInfoFailCallback? $fail;

  Future<GetUserInfoFailCallback?> get fail async {
    return $fail;
  }

  dynamic $lang;

  Future<dynamic> get lang async {
    return await $$context$$?.getPropertyValue('lang') ?? $lang;
  }

  GetUserInfoSuccessCallback? $success;

  Future<GetUserInfoSuccessCallback?> get success async {
    return $success;
  }

  bool? $withCredentials;

  Future<bool?> get withCredentials async {
    return await $$context$$?.getPropertyValue('withCredentials') ??
        $withCredentials;
  }

  GetUserInfoOption({this.$$context$$});

  void setValues(
      {GetUserInfoCompleteCallback? complete,
      GetUserInfoFailCallback? fail,
      dynamic lang,
      GetUserInfoSuccessCallback? success,
      bool? withCredentials}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (lang != null) $lang = lang;
    if (success != null) $success = success;
    if (withCredentials != null) $withCredentials = withCredentials;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'lang': $lang,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetUserInfoSuccessCallbackResult($$context$$: e)])
          : null,
      'withCredentials': $withCredentials
    }..removeWhere((key, value) => value == null);
  }
}

class GetUserInfoSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $cloudID = "";

  Future<String> get cloudID async {
    return await $$context$$?.getPropertyValue('cloudID') ?? $cloudID;
  }

  String $encryptedData = "";

  Future<String> get encryptedData async {
    return await $$context$$?.getPropertyValue('encryptedData') ??
        $encryptedData;
  }

  String $iv = "";

  Future<String> get iv async {
    return await $$context$$?.getPropertyValue('iv') ?? $iv;
  }

  String $rawData = "";

  Future<String> get rawData async {
    return await $$context$$?.getPropertyValue('rawData') ?? $rawData;
  }

  String $signature = "";

  Future<String> get signature async {
    return await $$context$$?.getPropertyValue('signature') ?? $signature;
  }

  UserInfo $userInfo = UserInfo();

  Future<UserInfo> get userInfo async {
    return UserInfo($$context$$: $$context$$?.getProperty('userInfo'));
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetUserInfoSuccessCallbackResult({this.$$context$$});

  void setValues(
      {String? cloudID,
      String? encryptedData,
      String? iv,
      String? rawData,
      String? signature,
      UserInfo? userInfo,
      String? errMsg}) {
    if (cloudID != null) $cloudID = cloudID;
    if (encryptedData != null) $encryptedData = encryptedData;
    if (iv != null) $iv = iv;
    if (rawData != null) $rawData = rawData;
    if (signature != null) $signature = signature;
    if (userInfo != null) $userInfo = userInfo;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'cloudID': $cloudID,
      'encryptedData': $encryptedData,
      'iv': $iv,
      'rawData': $rawData,
      'signature': $signature,
      'userInfo': $userInfo,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class GetUserProfileOption {
  mpjs.JsObject? $$context$$;

  String $desc = "";

  Future<String> get desc async {
    return await $$context$$?.getPropertyValue('desc') ?? $desc;
  }

  GetUserProfileCompleteCallback? $complete;

  Future<GetUserProfileCompleteCallback?> get complete async {
    return $complete;
  }

  GetUserProfileFailCallback? $fail;

  Future<GetUserProfileFailCallback?> get fail async {
    return $fail;
  }

  dynamic $lang;

  Future<dynamic> get lang async {
    return await $$context$$?.getPropertyValue('lang') ?? $lang;
  }

  GetUserProfileSuccessCallback? $success;

  Future<GetUserProfileSuccessCallback?> get success async {
    return $success;
  }

  GetUserProfileOption({this.$$context$$});

  void setValues(
      {String? desc,
      GetUserProfileCompleteCallback? complete,
      GetUserProfileFailCallback? fail,
      dynamic lang,
      GetUserProfileSuccessCallback? success}) {
    if (desc != null) $desc = desc;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (lang != null) $lang = lang;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'desc': $desc,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'lang': $lang,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetUserProfileSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetUserProfileSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $cloudID = "";

  Future<String> get cloudID async {
    return await $$context$$?.getPropertyValue('cloudID') ?? $cloudID;
  }

  String $encryptedData = "";

  Future<String> get encryptedData async {
    return await $$context$$?.getPropertyValue('encryptedData') ??
        $encryptedData;
  }

  String $iv = "";

  Future<String> get iv async {
    return await $$context$$?.getPropertyValue('iv') ?? $iv;
  }

  String $rawData = "";

  Future<String> get rawData async {
    return await $$context$$?.getPropertyValue('rawData') ?? $rawData;
  }

  String $signature = "";

  Future<String> get signature async {
    return await $$context$$?.getPropertyValue('signature') ?? $signature;
  }

  UserInfo $userInfo = UserInfo();

  Future<UserInfo> get userInfo async {
    return UserInfo($$context$$: $$context$$?.getProperty('userInfo'));
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetUserProfileSuccessCallbackResult({this.$$context$$});

  void setValues(
      {String? cloudID,
      String? encryptedData,
      String? iv,
      String? rawData,
      String? signature,
      UserInfo? userInfo,
      String? errMsg}) {
    if (cloudID != null) $cloudID = cloudID;
    if (encryptedData != null) $encryptedData = encryptedData;
    if (iv != null) $iv = iv;
    if (rawData != null) $rawData = rawData;
    if (signature != null) $signature = signature;
    if (userInfo != null) $userInfo = userInfo;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'cloudID': $cloudID,
      'encryptedData': $encryptedData,
      'iv': $iv,
      'rawData': $rawData,
      'signature': $signature,
      'userInfo': $userInfo,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class GetVideoInfoOption {
  mpjs.JsObject? $$context$$;

  String $src = "";

  Future<String> get src async {
    return await $$context$$?.getPropertyValue('src') ?? $src;
  }

  GetVideoInfoCompleteCallback? $complete;

  Future<GetVideoInfoCompleteCallback?> get complete async {
    return $complete;
  }

  GetVideoInfoFailCallback? $fail;

  Future<GetVideoInfoFailCallback?> get fail async {
    return $fail;
  }

  GetVideoInfoSuccessCallback? $success;

  Future<GetVideoInfoSuccessCallback?> get success async {
    return $success;
  }

  GetVideoInfoOption({this.$$context$$});

  void setValues(
      {String? src,
      GetVideoInfoCompleteCallback? complete,
      GetVideoInfoFailCallback? fail,
      GetVideoInfoSuccessCallback? success}) {
    if (src != null) $src = src;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'src': $src,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetVideoInfoSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetVideoInfoSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  num $bitrate = 0;

  Future<num> get bitrate async {
    return await $$context$$?.getPropertyValue('bitrate') ?? $bitrate;
  }

  num $duration = 0;

  Future<num> get duration async {
    return await $$context$$?.getPropertyValue('duration') ?? $duration;
  }

  num $fps = 0;

  Future<num> get fps async {
    return await $$context$$?.getPropertyValue('fps') ?? $fps;
  }

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  dynamic $orientation;

  Future<dynamic> get orientation async {
    return await $$context$$?.getPropertyValue('orientation') ?? $orientation;
  }

  num $size = 0;

  Future<num> get size async {
    return await $$context$$?.getPropertyValue('size') ?? $size;
  }

  String $type = "";

  Future<String> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetVideoInfoSuccessCallbackResult({this.$$context$$});

  void setValues(
      {num? bitrate,
      num? duration,
      num? fps,
      num? height,
      dynamic orientation,
      num? size,
      String? type,
      num? width,
      String? errMsg}) {
    if (bitrate != null) $bitrate = bitrate;
    if (duration != null) $duration = duration;
    if (fps != null) $fps = fps;
    if (height != null) $height = height;
    if (orientation != null) $orientation = orientation;
    if (size != null) $size = size;
    if (type != null) $type = type;
    if (width != null) $width = width;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'bitrate': $bitrate,
      'duration': $duration,
      'fps': $fps,
      'height': $height,
      'orientation': $orientation,
      'size': $size,
      'type': $type,
      'width': $width,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class GetWeRunDataOption {
  mpjs.JsObject? $$context$$;

  GetWeRunDataCompleteCallback? $complete;

  Future<GetWeRunDataCompleteCallback?> get complete async {
    return $complete;
  }

  GetWeRunDataFailCallback? $fail;

  Future<GetWeRunDataFailCallback?> get fail async {
    return $fail;
  }

  GetWeRunDataSuccessCallback? $success;

  Future<GetWeRunDataSuccessCallback?> get success async {
    return $success;
  }

  GetWeRunDataOption({this.$$context$$});

  void setValues(
      {GetWeRunDataCompleteCallback? complete,
      GetWeRunDataFailCallback? fail,
      GetWeRunDataSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => GetWeRunDataSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class GetWeRunDataSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $cloudID = "";

  Future<String> get cloudID async {
    return await $$context$$?.getPropertyValue('cloudID') ?? $cloudID;
  }

  String $encryptedData = "";

  Future<String> get encryptedData async {
    return await $$context$$?.getPropertyValue('encryptedData') ??
        $encryptedData;
  }

  String $iv = "";

  Future<String> get iv async {
    return await $$context$$?.getPropertyValue('iv') ?? $iv;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  GetWeRunDataSuccessCallbackResult({this.$$context$$});

  void setValues(
      {String? cloudID, String? encryptedData, String? iv, String? errMsg}) {
    if (cloudID != null) $cloudID = cloudID;
    if (encryptedData != null) $encryptedData = encryptedData;
    if (iv != null) $iv = iv;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'cloudID': $cloudID,
      'encryptedData': $encryptedData,
      'iv': $iv,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class GetWifiListOption {
  mpjs.JsObject? $$context$$;

  GetWifiListCompleteCallback? $complete;

  Future<GetWifiListCompleteCallback?> get complete async {
    return $complete;
  }

  GetWifiListFailCallback? $fail;

  Future<GetWifiListFailCallback?> get fail async {
    return $fail;
  }

  GetWifiListSuccessCallback? $success;

  Future<GetWifiListSuccessCallback?> get success async {
    return $success;
  }

  GetWifiListOption({this.$$context$$});

  void setValues(
      {GetWifiListCompleteCallback? complete,
      GetWifiListFailCallback? fail,
      GetWifiListSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => WifiError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => WifiError($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => WifiError($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class HandTrack {
  mpjs.JsObject? $$context$$;

  dynamic $mode;

  Future<dynamic> get mode async {
    return await $$context$$?.getPropertyValue('mode') ?? $mode;
  }

  HandTrack({this.$$context$$});

  void setValues({dynamic mode}) {
    if (mode != null) $mode = mode;
  }

  Map toJson() {
    return {'mode': $mode}..removeWhere((key, value) => value == null);
  }
}

class HideHomeButtonOption {
  mpjs.JsObject? $$context$$;

  HideHomeButtonCompleteCallback? $complete;

  Future<HideHomeButtonCompleteCallback?> get complete async {
    return $complete;
  }

  HideHomeButtonFailCallback? $fail;

  Future<HideHomeButtonFailCallback?> get fail async {
    return $fail;
  }

  HideHomeButtonSuccessCallback? $success;

  Future<HideHomeButtonSuccessCallback?> get success async {
    return $success;
  }

  HideHomeButtonOption({this.$$context$$});

  void setValues(
      {HideHomeButtonCompleteCallback? complete,
      HideHomeButtonFailCallback? fail,
      HideHomeButtonSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class HideKeyboardOption {
  mpjs.JsObject? $$context$$;

  HideKeyboardCompleteCallback? $complete;

  Future<HideKeyboardCompleteCallback?> get complete async {
    return $complete;
  }

  HideKeyboardFailCallback? $fail;

  Future<HideKeyboardFailCallback?> get fail async {
    return $fail;
  }

  HideKeyboardSuccessCallback? $success;

  Future<HideKeyboardSuccessCallback?> get success async {
    return $success;
  }

  HideKeyboardOption({this.$$context$$});

  void setValues(
      {HideKeyboardCompleteCallback? complete,
      HideKeyboardFailCallback? fail,
      HideKeyboardSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class HideLoadingOption {
  mpjs.JsObject? $$context$$;

  HideLoadingCompleteCallback? $complete;

  Future<HideLoadingCompleteCallback?> get complete async {
    return $complete;
  }

  HideLoadingFailCallback? $fail;

  Future<HideLoadingFailCallback?> get fail async {
    return $fail;
  }

  bool? $noConflict;

  Future<bool?> get noConflict async {
    return await $$context$$?.getPropertyValue('noConflict') ?? $noConflict;
  }

  HideLoadingSuccessCallback? $success;

  Future<HideLoadingSuccessCallback?> get success async {
    return $success;
  }

  HideLoadingOption({this.$$context$$});

  void setValues(
      {HideLoadingCompleteCallback? complete,
      HideLoadingFailCallback? fail,
      bool? noConflict,
      HideLoadingSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (noConflict != null) $noConflict = noConflict;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'noConflict': $noConflict,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class HideNavigationBarLoadingOption {
  mpjs.JsObject? $$context$$;

  HideNavigationBarLoadingCompleteCallback? $complete;

  Future<HideNavigationBarLoadingCompleteCallback?> get complete async {
    return $complete;
  }

  HideNavigationBarLoadingFailCallback? $fail;

  Future<HideNavigationBarLoadingFailCallback?> get fail async {
    return $fail;
  }

  HideNavigationBarLoadingSuccessCallback? $success;

  Future<HideNavigationBarLoadingSuccessCallback?> get success async {
    return $success;
  }

  HideNavigationBarLoadingOption({this.$$context$$});

  void setValues(
      {HideNavigationBarLoadingCompleteCallback? complete,
      HideNavigationBarLoadingFailCallback? fail,
      HideNavigationBarLoadingSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class HideShareMenuOption {
  mpjs.JsObject? $$context$$;

  HideShareMenuCompleteCallback? $complete;

  Future<HideShareMenuCompleteCallback?> get complete async {
    return $complete;
  }

  HideShareMenuFailCallback? $fail;

  Future<HideShareMenuFailCallback?> get fail async {
    return $fail;
  }

  List<String>? $menus;

  Future<List<String>?> get menus async {
    return await $$context$$?.getPropertyValue('menus') ?? $menus;
  }

  HideShareMenuSuccessCallback? $success;

  Future<HideShareMenuSuccessCallback?> get success async {
    return $success;
  }

  HideShareMenuOption({this.$$context$$});

  void setValues(
      {HideShareMenuCompleteCallback? complete,
      HideShareMenuFailCallback? fail,
      List<String>? menus,
      HideShareMenuSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (menus != null) $menus = menus;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'menus': $menus,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class HideTabBarOption {
  mpjs.JsObject? $$context$$;

  bool? $animation;

  Future<bool?> get animation async {
    return await $$context$$?.getPropertyValue('animation') ?? $animation;
  }

  HideTabBarCompleteCallback? $complete;

  Future<HideTabBarCompleteCallback?> get complete async {
    return $complete;
  }

  HideTabBarFailCallback? $fail;

  Future<HideTabBarFailCallback?> get fail async {
    return $fail;
  }

  HideTabBarSuccessCallback? $success;

  Future<HideTabBarSuccessCallback?> get success async {
    return $success;
  }

  HideTabBarOption({this.$$context$$});

  void setValues(
      {bool? animation,
      HideTabBarCompleteCallback? complete,
      HideTabBarFailCallback? fail,
      HideTabBarSuccessCallback? success}) {
    if (animation != null) $animation = animation;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'animation': $animation,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class HideTabBarRedDotOption {
  mpjs.JsObject? $$context$$;

  num $index = 0;

  Future<num> get index async {
    return await $$context$$?.getPropertyValue('index') ?? $index;
  }

  HideTabBarRedDotCompleteCallback? $complete;

  Future<HideTabBarRedDotCompleteCallback?> get complete async {
    return $complete;
  }

  HideTabBarRedDotFailCallback? $fail;

  Future<HideTabBarRedDotFailCallback?> get fail async {
    return $fail;
  }

  HideTabBarRedDotSuccessCallback? $success;

  Future<HideTabBarRedDotSuccessCallback?> get success async {
    return $success;
  }

  HideTabBarRedDotOption({this.$$context$$});

  void setValues(
      {num? index,
      HideTabBarRedDotCompleteCallback? complete,
      HideTabBarRedDotFailCallback? fail,
      HideTabBarRedDotSuccessCallback? success}) {
    if (index != null) $index = index;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'index': $index,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class HideToastOption {
  mpjs.JsObject? $$context$$;

  HideToastCompleteCallback? $complete;

  Future<HideToastCompleteCallback?> get complete async {
    return $complete;
  }

  HideToastFailCallback? $fail;

  Future<HideToastFailCallback?> get fail async {
    return $fail;
  }

  num? $noConflict;

  Future<num?> get noConflict async {
    return await $$context$$?.getPropertyValue('noConflict') ?? $noConflict;
  }

  HideToastSuccessCallback? $success;

  Future<HideToastSuccessCallback?> get success async {
    return $success;
  }

  HideToastOption({this.$$context$$});

  void setValues(
      {HideToastCompleteCallback? complete,
      HideToastFailCallback? fail,
      num? noConflict,
      HideToastSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (noConflict != null) $noConflict = noConflict;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'noConflict': $noConflict,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class HitTestRes {
  mpjs.JsObject? $$context$$;

  Float32Array $transform = Float32Array();

  Future<Float32Array> get transform async {
    return Float32Array($$context$$: $$context$$?.getProperty('transform'));
  }

  HitTestRes({this.$$context$$});

  void setValues({Float32Array? transform}) {
    if (transform != null) $transform = transform;
  }

  Map toJson() {
    return {'transform': $transform}
      ..removeWhere((key, value) => value == null);
  }
}

class Image {
  mpjs.JsObject? $$context$$;

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  dynamic $onerror;

  Future<dynamic> get onerror async {
    return await $$context$$?.getPropertyValue('onerror') ?? $onerror;
  }

  dynamic $onload;

  Future<dynamic> get onload async {
    return await $$context$$?.getPropertyValue('onload') ?? $onload;
  }

  String $referrerPolicy = "";

  Future<String> get referrerPolicy async {
    return await $$context$$?.getPropertyValue('referrerPolicy') ??
        $referrerPolicy;
  }

  String $src = "";

  Future<String> get src async {
    return await $$context$$?.getPropertyValue('src') ?? $src;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  Image({this.$$context$$});

  void setValues(
      {num? height,
      dynamic onerror,
      dynamic onload,
      String? referrerPolicy,
      String? src,
      num? width}) {
    if (height != null) $height = height;
    if (onerror != null) $onerror = onerror;
    if (onload != null) $onload = onload;
    if (referrerPolicy != null) $referrerPolicy = referrerPolicy;
    if (src != null) $src = src;
    if (width != null) $width = width;
  }

  Map toJson() {
    return {
      'height': $height,
      'onerror': $onerror != null ? mpjs.JsFunction($onerror!, [null]) : null,
      'onload': $onload != null ? mpjs.JsFunction($onload!, [null]) : null,
      'referrerPolicy': $referrerPolicy,
      'src': $src,
      'width': $width
    }..removeWhere((key, value) => value == null);
  }
}

class ImageData {
  mpjs.JsObject? $$context$$;

  Uint8ClampedArray $data = Uint8ClampedArray();

  Future<Uint8ClampedArray> get data async {
    return Uint8ClampedArray($$context$$: $$context$$?.getProperty('data'));
  }

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  ImageData({this.$$context$$});

  void setValues({Uint8ClampedArray? data, num? height, num? width}) {
    if (data != null) $data = data;
    if (height != null) $height = height;
    if (width != null) $width = width;
  }

  Map toJson() {
    return {'data': $data, 'height': $height, 'width': $width}
      ..removeWhere((key, value) => value == null);
  }
}

class ImageFile {
  mpjs.JsObject? $$context$$;

  String $path = "";

  Future<String> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  num $size = 0;

  Future<num> get size async {
    return await $$context$$?.getPropertyValue('size') ?? $size;
  }

  ImageFile({this.$$context$$});

  void setValues({String? path, num? size}) {
    if (path != null) $path = path;
    if (size != null) $size = size;
  }

  Map toJson() {
    return {'path': $path, 'size': $size}
      ..removeWhere((key, value) => value == null);
  }
}

class IncludePointsOption {
  mpjs.JsObject? $$context$$;

  List<MapPostion> $points = <MapPostion>[];

  Future<List<MapPostion>> get points async {
    return ((await $$context$$?.getPropertyValue('points')) as List)
        .map((it) => MapPostion($$context$$: it))
        .toList();
  }

  IncludePointsCompleteCallback? $complete;

  Future<IncludePointsCompleteCallback?> get complete async {
    return $complete;
  }

  IncludePointsFailCallback? $fail;

  Future<IncludePointsFailCallback?> get fail async {
    return $fail;
  }

  List<num>? $padding;

  Future<List<num>?> get padding async {
    return await $$context$$?.getPropertyValue('padding') ?? $padding;
  }

  IncludePointsSuccessCallback? $success;

  Future<IncludePointsSuccessCallback?> get success async {
    return $success;
  }

  IncludePointsOption({this.$$context$$});

  void setValues(
      {List<MapPostion>? points,
      IncludePointsCompleteCallback? complete,
      IncludePointsFailCallback? fail,
      List<num>? padding,
      IncludePointsSuccessCallback? success}) {
    if (points != null) $points = points;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (padding != null) $padding = padding;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'points': $points,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'padding': $padding,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class InitFaceDetectOption {
  mpjs.JsObject? $$context$$;

  InitFaceDetectCompleteCallback? $complete;

  Future<InitFaceDetectCompleteCallback?> get complete async {
    return $complete;
  }

  InitFaceDetectFailCallback? $fail;

  Future<InitFaceDetectFailCallback?> get fail async {
    return $fail;
  }

  InitFaceDetectSuccessCallback? $success;

  Future<InitFaceDetectSuccessCallback?> get success async {
    return $success;
  }

  InitFaceDetectOption({this.$$context$$});

  void setValues(
      {InitFaceDetectCompleteCallback? complete,
      InitFaceDetectFailCallback? fail,
      InitFaceDetectSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class InitMarkerClusterOption {
  mpjs.JsObject? $$context$$;

  InitMarkerClusterCompleteCallback? $complete;

  Future<InitMarkerClusterCompleteCallback?> get complete async {
    return $complete;
  }

  bool? $enableDefaultStyle;

  Future<bool?> get enableDefaultStyle async {
    return await $$context$$?.getPropertyValue('enableDefaultStyle') ??
        $enableDefaultStyle;
  }

  InitMarkerClusterFailCallback? $fail;

  Future<InitMarkerClusterFailCallback?> get fail async {
    return $fail;
  }

  num? $gridSize;

  Future<num?> get gridSize async {
    return await $$context$$?.getPropertyValue('gridSize') ?? $gridSize;
  }

  InitMarkerClusterSuccessCallback? $success;

  Future<InitMarkerClusterSuccessCallback?> get success async {
    return $success;
  }

  bool? $zoomOnClick;

  Future<bool?> get zoomOnClick async {
    return await $$context$$?.getPropertyValue('zoomOnClick') ?? $zoomOnClick;
  }

  InitMarkerClusterOption({this.$$context$$});

  void setValues(
      {InitMarkerClusterCompleteCallback? complete,
      bool? enableDefaultStyle,
      InitMarkerClusterFailCallback? fail,
      num? gridSize,
      InitMarkerClusterSuccessCallback? success,
      bool? zoomOnClick}) {
    if (complete != null) $complete = complete;
    if (enableDefaultStyle != null) $enableDefaultStyle = enableDefaultStyle;
    if (fail != null) $fail = fail;
    if (gridSize != null) $gridSize = gridSize;
    if (success != null) $success = success;
    if (zoomOnClick != null) $zoomOnClick = zoomOnClick;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'enableDefaultStyle': $enableDefaultStyle,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'gridSize': $gridSize,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'zoomOnClick': $zoomOnClick
    }..removeWhere((key, value) => value == null);
  }
}

class InnerAudioContext {
  mpjs.JsObject? $$context$$;

  bool $autoplay = false;

  Future<bool> get autoplay async {
    return await $$context$$?.getPropertyValue('autoplay') ?? $autoplay;
  }

  num $buffered = 0;

  Future<num> get buffered async {
    return await $$context$$?.getPropertyValue('buffered') ?? $buffered;
  }

  num $currentTime = 0;

  Future<num> get currentTime async {
    return await $$context$$?.getPropertyValue('currentTime') ?? $currentTime;
  }

  num $duration = 0;

  Future<num> get duration async {
    return await $$context$$?.getPropertyValue('duration') ?? $duration;
  }

  bool $loop = false;

  Future<bool> get loop async {
    return await $$context$$?.getPropertyValue('loop') ?? $loop;
  }

  bool $obeyMuteSwitch = false;

  Future<bool> get obeyMuteSwitch async {
    return await $$context$$?.getPropertyValue('obeyMuteSwitch') ??
        $obeyMuteSwitch;
  }

  bool $paused = false;

  Future<bool> get paused async {
    return await $$context$$?.getPropertyValue('paused') ?? $paused;
  }

  num $playbackRate = 0;

  Future<num> get playbackRate async {
    return await $$context$$?.getPropertyValue('playbackRate') ?? $playbackRate;
  }

  String $referrerPolicy = "";

  Future<String> get referrerPolicy async {
    return await $$context$$?.getPropertyValue('referrerPolicy') ??
        $referrerPolicy;
  }

  String $src = "";

  Future<String> get src async {
    return await $$context$$?.getPropertyValue('src') ?? $src;
  }

  num $startTime = 0;

  Future<num> get startTime async {
    return await $$context$$?.getPropertyValue('startTime') ?? $startTime;
  }

  num $volume = 0;

  Future<num> get volume async {
    return await $$context$$?.getPropertyValue('volume') ?? $volume;
  }

  InnerAudioContext({this.$$context$$});

  void setValues(
      {bool? autoplay,
      num? buffered,
      num? currentTime,
      num? duration,
      bool? loop,
      bool? obeyMuteSwitch,
      bool? paused,
      num? playbackRate,
      String? referrerPolicy,
      String? src,
      num? startTime,
      num? volume}) {
    if (autoplay != null) $autoplay = autoplay;
    if (buffered != null) $buffered = buffered;
    if (currentTime != null) $currentTime = currentTime;
    if (duration != null) $duration = duration;
    if (loop != null) $loop = loop;
    if (obeyMuteSwitch != null) $obeyMuteSwitch = obeyMuteSwitch;
    if (paused != null) $paused = paused;
    if (playbackRate != null) $playbackRate = playbackRate;
    if (referrerPolicy != null) $referrerPolicy = referrerPolicy;
    if (src != null) $src = src;
    if (startTime != null) $startTime = startTime;
    if (volume != null) $volume = volume;
  }

  Map toJson() {
    return {
      'autoplay': $autoplay,
      'buffered': $buffered,
      'currentTime': $currentTime,
      'duration': $duration,
      'loop': $loop,
      'obeyMuteSwitch': $obeyMuteSwitch,
      'paused': $paused,
      'playbackRate': $playbackRate,
      'referrerPolicy': $referrerPolicy,
      'src': $src,
      'startTime': $startTime,
      'volume': $volume
    }..removeWhere((key, value) => value == null);
  }

  Future<void> destroy() async {
    final result = await $$context$$?.callMethod('destroy', []);
    return result;
  }

  Future<void> offCanplay([OffCanplayCallback? listener]) async {
    final result = await $$context$$?.callMethod('offCanplay', [listener]);
    return result;
  }

  Future<void> offEnded([OffEndedCallback? listener]) async {
    final result = await $$context$$?.callMethod('offEnded', [listener]);
    return result;
  }

  Future<void> offError([InnerAudioContextOffErrorCallback? listener]) async {
    final result = await $$context$$?.callMethod('offError', [listener]);
    return result;
  }

  Future<void> offPause([OffPauseCallback? listener]) async {
    final result = await $$context$$?.callMethod('offPause', [listener]);
    return result;
  }

  Future<void> offPlay([OffPlayCallback? listener]) async {
    final result = await $$context$$?.callMethod('offPlay', [listener]);
    return result;
  }

  Future<void> offSeeked([OffSeekedCallback? listener]) async {
    final result = await $$context$$?.callMethod('offSeeked', [listener]);
    return result;
  }

  Future<void> offSeeking([OffSeekingCallback? listener]) async {
    final result = await $$context$$?.callMethod('offSeeking', [listener]);
    return result;
  }

  Future<void> offStop([OffStopCallback? listener]) async {
    final result = await $$context$$?.callMethod('offStop', [listener]);
    return result;
  }

  Future<void> offTimeUpdate([OffTimeUpdateCallback? listener]) async {
    final result = await $$context$$?.callMethod('offTimeUpdate', [listener]);
    return result;
  }

  Future<void> offWaiting([OffWaitingCallback? listener]) async {
    final result = await $$context$$?.callMethod('offWaiting', [listener]);
    return result;
  }

  Future<void> onCanplay(OnCanplayCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onCanplay', [listener]);
    return result;
  }

  Future<void> onEnded(OnEndedCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onEnded', [listener]);
    return result;
  }

  Future<void> onError(InnerAudioContextOnErrorCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(InnerAudioContextOnErrorListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onError', [listener]);
    return result;
  }

  Future<void> onPause(OnPauseCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onPause', [listener]);
    return result;
  }

  Future<void> onPlay(OnPlayCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onPlay', [listener]);
    return result;
  }

  Future<void> onSeeked(OnSeekedCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onSeeked', [listener]);
    return result;
  }

  Future<void> onSeeking(OnSeekingCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onSeeking', [listener]);
    return result;
  }

  Future<void> onStop(InnerAudioContextOnStopCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onStop', [listener]);
    return result;
  }

  Future<void> onTimeUpdate(OnTimeUpdateCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onTimeUpdate', [listener]);
    return result;
  }

  Future<void> onWaiting(OnWaitingCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onWaiting', [listener]);
    return result;
  }

  Future<void> pause() async {
    final result = await $$context$$?.callMethod('pause', []);
    return result;
  }

  Future<void> play() async {
    final result = await $$context$$?.callMethod('play', []);
    return result;
  }

  Future<void> seek(num position) async {
    final result = await $$context$$?.callMethod('seek', [position]);
    return result;
  }

  Future<void> stop() async {
    final result = await $$context$$?.callMethod('stop', []);
    return result;
  }
}

class InnerAudioContextOnErrorListenerResult {
  mpjs.JsObject? $$context$$;

  dynamic $errCode;

  Future<dynamic> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  InnerAudioContextOnErrorListenerResult({this.$$context$$});

  void setValues({dynamic errCode, String? errMsg}) {
    if (errCode != null) $errCode = errCode;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errCode': $errCode, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class InsertDividerOption {
  mpjs.JsObject? $$context$$;

  InsertDividerCompleteCallback? $complete;

  Future<InsertDividerCompleteCallback?> get complete async {
    return $complete;
  }

  InsertDividerFailCallback? $fail;

  Future<InsertDividerFailCallback?> get fail async {
    return $fail;
  }

  InsertDividerSuccessCallback? $success;

  Future<InsertDividerSuccessCallback?> get success async {
    return $success;
  }

  InsertDividerOption({this.$$context$$});

  void setValues(
      {InsertDividerCompleteCallback? complete,
      InsertDividerFailCallback? fail,
      InsertDividerSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class InsertImageOption {
  mpjs.JsObject? $$context$$;

  String $src = "";

  Future<String> get src async {
    return await $$context$$?.getPropertyValue('src') ?? $src;
  }

  String? $alt;

  Future<String?> get alt async {
    return await $$context$$?.getPropertyValue('alt') ?? $alt;
  }

  InsertImageCompleteCallback? $complete;

  Future<InsertImageCompleteCallback?> get complete async {
    return $complete;
  }

  IAnyObject? $data;

  Future<IAnyObject?> get data async {
    return IAnyObject($$context$$: $$context$$?.getProperty('data'));
  }

  String? $extClass;

  Future<String?> get extClass async {
    return await $$context$$?.getPropertyValue('extClass') ?? $extClass;
  }

  InsertImageFailCallback? $fail;

  Future<InsertImageFailCallback?> get fail async {
    return $fail;
  }

  String? $height;

  Future<String?> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  bool? $nowrap;

  Future<bool?> get nowrap async {
    return await $$context$$?.getPropertyValue('nowrap') ?? $nowrap;
  }

  InsertImageSuccessCallback? $success;

  Future<InsertImageSuccessCallback?> get success async {
    return $success;
  }

  String? $width;

  Future<String?> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  InsertImageOption({this.$$context$$});

  void setValues(
      {String? src,
      String? alt,
      InsertImageCompleteCallback? complete,
      IAnyObject? data,
      String? extClass,
      InsertImageFailCallback? fail,
      String? height,
      bool? nowrap,
      InsertImageSuccessCallback? success,
      String? width}) {
    if (src != null) $src = src;
    if (alt != null) $alt = alt;
    if (complete != null) $complete = complete;
    if (data != null) $data = data;
    if (extClass != null) $extClass = extClass;
    if (fail != null) $fail = fail;
    if (height != null) $height = height;
    if (nowrap != null) $nowrap = nowrap;
    if (success != null) $success = success;
    if (width != null) $width = width;
  }

  Map toJson() {
    return {
      'src': $src,
      'alt': $alt,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'data': $data,
      'extClass': $extClass,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'height': $height,
      'nowrap': $nowrap,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'width': $width
    }..removeWhere((key, value) => value == null);
  }
}

class InsertTextOption {
  mpjs.JsObject? $$context$$;

  InsertTextCompleteCallback? $complete;

  Future<InsertTextCompleteCallback?> get complete async {
    return $complete;
  }

  InsertTextFailCallback? $fail;

  Future<InsertTextFailCallback?> get fail async {
    return $fail;
  }

  InsertTextSuccessCallback? $success;

  Future<InsertTextSuccessCallback?> get success async {
    return $success;
  }

  String? $text;

  Future<String?> get text async {
    return await $$context$$?.getPropertyValue('text') ?? $text;
  }

  InsertTextOption({this.$$context$$});

  void setValues(
      {InsertTextCompleteCallback? complete,
      InsertTextFailCallback? fail,
      InsertTextSuccessCallback? success,
      String? text}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
    if (text != null) $text = text;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'text': $text
    }..removeWhere((key, value) => value == null);
  }
}

class IntersectionObserverObserveCallbackResult {
  mpjs.JsObject? $$context$$;

  BoundingClientRectResult $boundingClientRect = BoundingClientRectResult();

  Future<BoundingClientRectResult> get boundingClientRect async {
    return BoundingClientRectResult(
        $$context$$: $$context$$?.getProperty('boundingClientRect'));
  }

  Record<String, dynamic> $dataset = Record();

  Future<Record<String, dynamic>> get dataset async {
    return $dataset;
  }

  String $id = "";

  Future<String> get id async {
    return await $$context$$?.getPropertyValue('id') ?? $id;
  }

  num $intersectionRatio = 0;

  Future<num> get intersectionRatio async {
    return await $$context$$?.getPropertyValue('intersectionRatio') ??
        $intersectionRatio;
  }

  IntersectionRectResult $intersectionRect = IntersectionRectResult();

  Future<IntersectionRectResult> get intersectionRect async {
    return IntersectionRectResult(
        $$context$$: $$context$$?.getProperty('intersectionRect'));
  }

  RelativeRectResult $relativeRect = RelativeRectResult();

  Future<RelativeRectResult> get relativeRect async {
    return RelativeRectResult(
        $$context$$: $$context$$?.getProperty('relativeRect'));
  }

  num $time = 0;

  Future<num> get time async {
    return await $$context$$?.getPropertyValue('time') ?? $time;
  }

  IntersectionObserverObserveCallbackResult({this.$$context$$});

  void setValues(
      {BoundingClientRectResult? boundingClientRect,
      Record<String, dynamic>? dataset,
      String? id,
      num? intersectionRatio,
      IntersectionRectResult? intersectionRect,
      RelativeRectResult? relativeRect,
      num? time}) {
    if (boundingClientRect != null) $boundingClientRect = boundingClientRect;
    if (dataset != null) $dataset = dataset;
    if (id != null) $id = id;
    if (intersectionRatio != null) $intersectionRatio = intersectionRatio;
    if (intersectionRect != null) $intersectionRect = intersectionRect;
    if (relativeRect != null) $relativeRect = relativeRect;
    if (time != null) $time = time;
  }

  Map toJson() {
    return {
      'boundingClientRect': $boundingClientRect,
      'dataset': $dataset,
      'id': $id,
      'intersectionRatio': $intersectionRatio,
      'intersectionRect': $intersectionRect,
      'relativeRect': $relativeRect,
      'time': $time
    }..removeWhere((key, value) => value == null);
  }
}

class IntersectionRectResult {
  mpjs.JsObject? $$context$$;

  num $bottom = 0;

  Future<num> get bottom async {
    return await $$context$$?.getPropertyValue('bottom') ?? $bottom;
  }

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  num $left = 0;

  Future<num> get left async {
    return await $$context$$?.getPropertyValue('left') ?? $left;
  }

  num $right = 0;

  Future<num> get right async {
    return await $$context$$?.getPropertyValue('right') ?? $right;
  }

  num $top = 0;

  Future<num> get top async {
    return await $$context$$?.getPropertyValue('top') ?? $top;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  IntersectionRectResult({this.$$context$$});

  void setValues(
      {num? bottom, num? height, num? left, num? right, num? top, num? width}) {
    if (bottom != null) $bottom = bottom;
    if (height != null) $height = height;
    if (left != null) $left = left;
    if (right != null) $right = right;
    if (top != null) $top = top;
    if (width != null) $width = width;
  }

  Map toJson() {
    return {
      'bottom': $bottom,
      'height': $height,
      'left': $left,
      'right': $right,
      'top': $top,
      'width': $width
    }..removeWhere((key, value) => value == null);
  }
}

class InterstitialAdOnErrorListenerResult {
  mpjs.JsObject? $$context$$;

  dynamic $errCode;

  Future<dynamic> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  InterstitialAdOnErrorListenerResult({this.$$context$$});

  void setValues({dynamic errCode, String? errMsg}) {
    if (errCode != null) $errCode = errCode;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errCode': $errCode, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class IsBluetoothDevicePairedOption {
  mpjs.JsObject? $$context$$;

  String $deviceId = "";

  Future<String> get deviceId async {
    return await $$context$$?.getPropertyValue('deviceId') ?? $deviceId;
  }

  IsBluetoothDevicePairedCompleteCallback? $complete;

  Future<IsBluetoothDevicePairedCompleteCallback?> get complete async {
    return $complete;
  }

  IsBluetoothDevicePairedFailCallback? $fail;

  Future<IsBluetoothDevicePairedFailCallback?> get fail async {
    return $fail;
  }

  IsBluetoothDevicePairedSuccessCallback? $success;

  Future<IsBluetoothDevicePairedSuccessCallback?> get success async {
    return $success;
  }

  IsBluetoothDevicePairedOption({this.$$context$$});

  void setValues(
      {String? deviceId,
      IsBluetoothDevicePairedCompleteCallback? complete,
      IsBluetoothDevicePairedFailCallback? fail,
      IsBluetoothDevicePairedSuccessCallback? success}) {
    if (deviceId != null) $deviceId = deviceId;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'deviceId': $deviceId,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class IsConnectedOption {
  mpjs.JsObject? $$context$$;

  IsConnectedCompleteCallback? $complete;

  Future<IsConnectedCompleteCallback?> get complete async {
    return $complete;
  }

  IsConnectedFailCallback? $fail;

  Future<IsConnectedFailCallback?> get fail async {
    return $fail;
  }

  IsConnectedSuccessCallback? $success;

  Future<IsConnectedSuccessCallback?> get success async {
    return $success;
  }

  IsConnectedOption({this.$$context$$});

  void setValues(
      {IsConnectedCompleteCallback? complete,
      IsConnectedFailCallback? fail,
      IsConnectedSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => Nfcrwerror($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => Nfcrwerror($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => Nfcrwerror($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class Join1v1ChatOption {
  mpjs.JsObject? $$context$$;

  VoIP1v1ChatUser $caller = VoIP1v1ChatUser();

  Future<VoIP1v1ChatUser> get caller async {
    return VoIP1v1ChatUser($$context$$: $$context$$?.getProperty('caller'));
  }

  VoIP1v1ChatUser $listener = VoIP1v1ChatUser();

  Future<VoIP1v1ChatUser> get listener async {
    return VoIP1v1ChatUser($$context$$: $$context$$?.getProperty('listener'));
  }

  dynamic $backgroundType;

  Future<dynamic> get backgroundType async {
    return await $$context$$?.getPropertyValue('backgroundType') ??
        $backgroundType;
  }

  Join1v1ChatCompleteCallback? $complete;

  Future<Join1v1ChatCompleteCallback?> get complete async {
    return $complete;
  }

  bool? $disableSwitchVoice;

  Future<bool?> get disableSwitchVoice async {
    return await $$context$$?.getPropertyValue('disableSwitchVoice') ??
        $disableSwitchVoice;
  }

  Join1v1ChatFailCallback? $fail;

  Future<Join1v1ChatFailCallback?> get fail async {
    return $fail;
  }

  num? $minWindowType;

  Future<num?> get minWindowType async {
    return await $$context$$?.getPropertyValue('minWindowType') ??
        $minWindowType;
  }

  dynamic $roomType;

  Future<dynamic> get roomType async {
    return await $$context$$?.getPropertyValue('roomType') ?? $roomType;
  }

  Join1v1ChatSuccessCallback? $success;

  Future<Join1v1ChatSuccessCallback?> get success async {
    return $success;
  }

  Join1v1ChatOption({this.$$context$$});

  void setValues(
      {VoIP1v1ChatUser? caller,
      VoIP1v1ChatUser? listener,
      dynamic backgroundType,
      Join1v1ChatCompleteCallback? complete,
      bool? disableSwitchVoice,
      Join1v1ChatFailCallback? fail,
      num? minWindowType,
      dynamic roomType,
      Join1v1ChatSuccessCallback? success}) {
    if (caller != null) $caller = caller;
    if (listener != null) $listener = listener;
    if (backgroundType != null) $backgroundType = backgroundType;
    if (complete != null) $complete = complete;
    if (disableSwitchVoice != null) $disableSwitchVoice = disableSwitchVoice;
    if (fail != null) $fail = fail;
    if (minWindowType != null) $minWindowType = minWindowType;
    if (roomType != null) $roomType = roomType;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'caller': $caller,
      'listener': $listener,
      'backgroundType': $backgroundType,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => Join1v1ChatError($$context$$: e)])
          : null,
      'disableSwitchVoice': $disableSwitchVoice,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => Join1v1ChatError($$context$$: e)])
          : null,
      'minWindowType': $minWindowType,
      'roomType': $roomType,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => Join1v1ChatError($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class JoinVoIPChatOption {
  mpjs.JsObject? $$context$$;

  String $groupId = "";

  Future<String> get groupId async {
    return await $$context$$?.getPropertyValue('groupId') ?? $groupId;
  }

  String $nonceStr = "";

  Future<String> get nonceStr async {
    return await $$context$$?.getPropertyValue('nonceStr') ?? $nonceStr;
  }

  String $signature = "";

  Future<String> get signature async {
    return await $$context$$?.getPropertyValue('signature') ?? $signature;
  }

  num $timeStamp = 0;

  Future<num> get timeStamp async {
    return await $$context$$?.getPropertyValue('timeStamp') ?? $timeStamp;
  }

  JoinVoIPChatCompleteCallback? $complete;

  Future<JoinVoIPChatCompleteCallback?> get complete async {
    return $complete;
  }

  JoinVoIPChatFailCallback? $fail;

  Future<JoinVoIPChatFailCallback?> get fail async {
    return $fail;
  }

  bool? $forceCellularNetwork;

  Future<bool?> get forceCellularNetwork async {
    return await $$context$$?.getPropertyValue('forceCellularNetwork') ??
        $forceCellularNetwork;
  }

  MuteConfig? $muteConfig;

  Future<MuteConfig?> get muteConfig async {
    return MuteConfig($$context$$: $$context$$?.getProperty('muteConfig'));
  }

  dynamic $roomType;

  Future<dynamic> get roomType async {
    return await $$context$$?.getPropertyValue('roomType') ?? $roomType;
  }

  JoinVoIPChatSuccessCallback? $success;

  Future<JoinVoIPChatSuccessCallback?> get success async {
    return $success;
  }

  JoinVoIPChatOption({this.$$context$$});

  void setValues(
      {String? groupId,
      String? nonceStr,
      String? signature,
      num? timeStamp,
      JoinVoIPChatCompleteCallback? complete,
      JoinVoIPChatFailCallback? fail,
      bool? forceCellularNetwork,
      MuteConfig? muteConfig,
      dynamic roomType,
      JoinVoIPChatSuccessCallback? success}) {
    if (groupId != null) $groupId = groupId;
    if (nonceStr != null) $nonceStr = nonceStr;
    if (signature != null) $signature = signature;
    if (timeStamp != null) $timeStamp = timeStamp;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (forceCellularNetwork != null)
      $forceCellularNetwork = forceCellularNetwork;
    if (muteConfig != null) $muteConfig = muteConfig;
    if (roomType != null) $roomType = roomType;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'groupId': $groupId,
      'nonceStr': $nonceStr,
      'signature': $signature,
      'timeStamp': $timeStamp,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => JoinVoIPChatError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => JoinVoIPChatError($$context$$: e)])
          : null,
      'forceCellularNetwork': $forceCellularNetwork,
      'muteConfig': $muteConfig,
      'roomType': $roomType,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => JoinVoIPChatSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class JoinVoIPChatSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  num $errCode = 0;

  Future<num> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  List<String> $openIdList = <String>[];

  Future<List<String>> get openIdList async {
    return await $$context$$?.getPropertyValue('openIdList') ?? $openIdList;
  }

  JoinVoIPChatSuccessCallbackResult({this.$$context$$});

  void setValues({num? errCode, String? errMsg, List<String>? openIdList}) {
    if (errCode != null) $errCode = errCode;
    if (errMsg != null) $errMsg = errMsg;
    if (openIdList != null) $openIdList = openIdList;
  }

  Map toJson() {
    return {'errCode': $errCode, 'errMsg': $errMsg, 'openIdList': $openIdList}
      ..removeWhere((key, value) => value == null);
  }
}

class KvList {
  mpjs.JsObject? $$context$$;

  String $key = "";

  Future<String> get key async {
    return await $$context$$?.getPropertyValue('key') ?? $key;
  }

  dynamic $value;

  Future<dynamic> get value async {
    return await $$context$$?.getPropertyValue('value') ?? $value;
  }

  KvList({this.$$context$$});

  void setValues({String? key, dynamic value}) {
    if (key != null) $key = key;
    if (value != null) $value = value;
  }

  Map toJson() {
    return {'key': $key, 'value': $value}
      ..removeWhere((key, value) => value == null);
  }
}

class LaunchOptionsApp {
  mpjs.JsObject? $$context$$;

  dynamic $apiCategory;

  Future<dynamic> get apiCategory async {
    return await $$context$$?.getPropertyValue('apiCategory') ?? $apiCategory;
  }

  List<ForwardMaterials> $forwardMaterials = <ForwardMaterials>[];

  Future<List<ForwardMaterials>> get forwardMaterials async {
    return ((await $$context$$?.getPropertyValue('forwardMaterials')) as List)
        .map((it) => ForwardMaterials($$context$$: it))
        .toList();
  }

  String $path = "";

  Future<String> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  IAnyObject $query = IAnyObject();

  Future<IAnyObject> get query async {
    return IAnyObject($$context$$: $$context$$?.getProperty('query'));
  }

  ReferrerInfo $referrerInfo = ReferrerInfo();

  Future<ReferrerInfo> get referrerInfo async {
    return ReferrerInfo($$context$$: $$context$$?.getProperty('referrerInfo'));
  }

  num $scene = 0;

  Future<num> get scene async {
    return await $$context$$?.getPropertyValue('scene') ?? $scene;
  }

  dynamic $chatType;

  Future<dynamic> get chatType async {
    return await $$context$$?.getPropertyValue('chatType') ?? $chatType;
  }

  String? $shareTicket;

  Future<String?> get shareTicket async {
    return await $$context$$?.getPropertyValue('shareTicket') ?? $shareTicket;
  }

  LaunchOptionsApp({this.$$context$$});

  void setValues(
      {dynamic apiCategory,
      List<ForwardMaterials>? forwardMaterials,
      String? path,
      IAnyObject? query,
      ReferrerInfo? referrerInfo,
      num? scene,
      dynamic chatType,
      String? shareTicket}) {
    if (apiCategory != null) $apiCategory = apiCategory;
    if (forwardMaterials != null) $forwardMaterials = forwardMaterials;
    if (path != null) $path = path;
    if (query != null) $query = query;
    if (referrerInfo != null) $referrerInfo = referrerInfo;
    if (scene != null) $scene = scene;
    if (chatType != null) $chatType = chatType;
    if (shareTicket != null) $shareTicket = shareTicket;
  }

  Map toJson() {
    return {
      'apiCategory': $apiCategory,
      'forwardMaterials': $forwardMaterials,
      'path': $path,
      'query': $query,
      'referrerInfo': $referrerInfo,
      'scene': $scene,
      'chatType': $chatType,
      'shareTicket': $shareTicket
    }..removeWhere((key, value) => value == null);
  }
}

class LivePlayerContextRequestFullScreenOption {
  mpjs.JsObject? $$context$$;

  RequestFullScreenCompleteCallback? $complete;

  Future<RequestFullScreenCompleteCallback?> get complete async {
    return $complete;
  }

  dynamic $direction;

  Future<dynamic> get direction async {
    return await $$context$$?.getPropertyValue('direction') ?? $direction;
  }

  RequestFullScreenFailCallback? $fail;

  Future<RequestFullScreenFailCallback?> get fail async {
    return $fail;
  }

  RequestFullScreenSuccessCallback? $success;

  Future<RequestFullScreenSuccessCallback?> get success async {
    return $success;
  }

  LivePlayerContextRequestFullScreenOption({this.$$context$$});

  void setValues(
      {RequestFullScreenCompleteCallback? complete,
      dynamic direction,
      RequestFullScreenFailCallback? fail,
      RequestFullScreenSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (direction != null) $direction = direction;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'direction': $direction,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class LivePlayerContextSnapshotOption {
  mpjs.JsObject? $$context$$;

  SnapshotCompleteCallback? $complete;

  Future<SnapshotCompleteCallback?> get complete async {
    return $complete;
  }

  SnapshotFailCallback? $fail;

  Future<SnapshotFailCallback?> get fail async {
    return $fail;
  }

  dynamic $quality;

  Future<dynamic> get quality async {
    return await $$context$$?.getPropertyValue('quality') ?? $quality;
  }

  dynamic $sourceType;

  Future<dynamic> get sourceType async {
    return await $$context$$?.getPropertyValue('sourceType') ?? $sourceType;
  }

  LivePlayerContextSnapshotSuccessCallback? $success;

  Future<LivePlayerContextSnapshotSuccessCallback?> get success async {
    return $success;
  }

  LivePlayerContextSnapshotOption({this.$$context$$});

  void setValues(
      {SnapshotCompleteCallback? complete,
      SnapshotFailCallback? fail,
      dynamic quality,
      dynamic sourceType,
      LivePlayerContextSnapshotSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (quality != null) $quality = quality;
    if (sourceType != null) $sourceType = sourceType;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'quality': $quality,
      'sourceType': $sourceType,
      'success': $success != null
          ? mpjs.JsFunction($success!, [
              (e) =>
                  LivePlayerContextSnapshotSuccessCallbackResult($$context$$: e)
            ])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class LivePlayerContextSnapshotSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $height = "";

  Future<String> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  String $tempImagePath = "";

  Future<String> get tempImagePath async {
    return await $$context$$?.getPropertyValue('tempImagePath') ??
        $tempImagePath;
  }

  String $width = "";

  Future<String> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  LivePlayerContextSnapshotSuccessCallbackResult({this.$$context$$});

  void setValues(
      {String? height, String? tempImagePath, String? width, String? errMsg}) {
    if (height != null) $height = height;
    if (tempImagePath != null) $tempImagePath = tempImagePath;
    if (width != null) $width = width;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'height': $height,
      'tempImagePath': $tempImagePath,
      'width': $width,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class LivePusherContextSnapshotOption {
  mpjs.JsObject? $$context$$;

  SnapshotCompleteCallback? $complete;

  Future<SnapshotCompleteCallback?> get complete async {
    return $complete;
  }

  SnapshotFailCallback? $fail;

  Future<SnapshotFailCallback?> get fail async {
    return $fail;
  }

  dynamic $quality;

  Future<dynamic> get quality async {
    return await $$context$$?.getPropertyValue('quality') ?? $quality;
  }

  dynamic $sourceType;

  Future<dynamic> get sourceType async {
    return await $$context$$?.getPropertyValue('sourceType') ?? $sourceType;
  }

  LivePusherContextSnapshotSuccessCallback? $success;

  Future<LivePusherContextSnapshotSuccessCallback?> get success async {
    return $success;
  }

  LivePusherContextSnapshotOption({this.$$context$$});

  void setValues(
      {SnapshotCompleteCallback? complete,
      SnapshotFailCallback? fail,
      dynamic quality,
      dynamic sourceType,
      LivePusherContextSnapshotSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (quality != null) $quality = quality;
    if (sourceType != null) $sourceType = sourceType;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'quality': $quality,
      'sourceType': $sourceType,
      'success': $success != null
          ? mpjs.JsFunction($success!, [
              (e) =>
                  LivePusherContextSnapshotSuccessCallbackResult($$context$$: e)
            ])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class LivePusherContextSnapshotSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $height = "";

  Future<String> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  String $tempImagePath = "";

  Future<String> get tempImagePath async {
    return await $$context$$?.getPropertyValue('tempImagePath') ??
        $tempImagePath;
  }

  String $width = "";

  Future<String> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  LivePusherContextSnapshotSuccessCallbackResult({this.$$context$$});

  void setValues(
      {String? height, String? tempImagePath, String? width, String? errMsg}) {
    if (height != null) $height = height;
    if (tempImagePath != null) $tempImagePath = tempImagePath;
    if (width != null) $width = width;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'height': $height,
      'tempImagePath': $tempImagePath,
      'width': $width,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class LivePusherContextStartOption {
  mpjs.JsObject? $$context$$;

  StartCompleteCallback? $complete;

  Future<StartCompleteCallback?> get complete async {
    return $complete;
  }

  StartFailCallback? $fail;

  Future<StartFailCallback?> get fail async {
    return $fail;
  }

  StartSuccessCallback? $success;

  Future<StartSuccessCallback?> get success async {
    return $success;
  }

  LivePusherContextStartOption({this.$$context$$});

  void setValues(
      {StartCompleteCallback? complete,
      StartFailCallback? fail,
      StartSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class LoadFontFaceCompleteCallbackResult {
  mpjs.JsObject? $$context$$;

  String $status = "";

  Future<String> get status async {
    return await $$context$$?.getPropertyValue('status') ?? $status;
  }

  LoadFontFaceCompleteCallbackResult({this.$$context$$});

  void setValues({String? status}) {
    if (status != null) $status = status;
  }

  Map toJson() {
    return {'status': $status}..removeWhere((key, value) => value == null);
  }
}

class LoadFontFaceOption {
  mpjs.JsObject? $$context$$;

  String $family = "";

  Future<String> get family async {
    return await $$context$$?.getPropertyValue('family') ?? $family;
  }

  String $source = "";

  Future<String> get source async {
    return await $$context$$?.getPropertyValue('source') ?? $source;
  }

  LoadFontFaceCompleteCallback? $complete;

  Future<LoadFontFaceCompleteCallback?> get complete async {
    return $complete;
  }

  DescOption? $desc;

  Future<DescOption?> get desc async {
    return DescOption($$context$$: $$context$$?.getProperty('desc'));
  }

  LoadFontFaceFailCallback? $fail;

  Future<LoadFontFaceFailCallback?> get fail async {
    return $fail;
  }

  bool? $global;

  Future<bool?> get global async {
    return await $$context$$?.getPropertyValue('global') ?? $global;
  }

  List<dynamic>? $scopes;

  Future<List<dynamic>?> get scopes async {
    return await $$context$$?.getPropertyValue('scopes') ?? $scopes;
  }

  LoadFontFaceSuccessCallback? $success;

  Future<LoadFontFaceSuccessCallback?> get success async {
    return $success;
  }

  LoadFontFaceOption({this.$$context$$});

  void setValues(
      {String? family,
      String? source,
      LoadFontFaceCompleteCallback? complete,
      DescOption? desc,
      LoadFontFaceFailCallback? fail,
      bool? global,
      List<dynamic>? scopes,
      LoadFontFaceSuccessCallback? success}) {
    if (family != null) $family = family;
    if (source != null) $source = source;
    if (complete != null) $complete = complete;
    if (desc != null) $desc = desc;
    if (fail != null) $fail = fail;
    if (global != null) $global = global;
    if (scopes != null) $scopes = scopes;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'family': $family,
      'source': $source,
      'complete': $complete != null
          ? mpjs.JsFunction($complete!,
              [(e) => LoadFontFaceCompleteCallbackResult($$context$$: e)])
          : null,
      'desc': $desc,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!,
              [(e) => LoadFontFaceCompleteCallbackResult($$context$$: e)])
          : null,
      'global': $global,
      'scopes': $scopes,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => LoadFontFaceCompleteCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class LocalInfo {
  mpjs.JsObject? $$context$$;

  String $address = "";

  Future<String> get address async {
    return await $$context$$?.getPropertyValue('address') ?? $address;
  }

  String $family = "";

  Future<String> get family async {
    return await $$context$$?.getPropertyValue('family') ?? $family;
  }

  num $port = 0;

  Future<num> get port async {
    return await $$context$$?.getPropertyValue('port') ?? $port;
  }

  LocalInfo({this.$$context$$});

  void setValues({String? address, String? family, num? port}) {
    if (address != null) $address = address;
    if (family != null) $family = family;
    if (port != null) $port = port;
  }

  Map toJson() {
    return {'address': $address, 'family': $family, 'port': $port}
      ..removeWhere((key, value) => value == null);
  }
}

class LoginOption {
  mpjs.JsObject? $$context$$;

  LoginCompleteCallback? $complete;

  Future<LoginCompleteCallback?> get complete async {
    return $complete;
  }

  LoginFailCallback? $fail;

  Future<LoginFailCallback?> get fail async {
    return $fail;
  }

  LoginSuccessCallback? $success;

  Future<LoginSuccessCallback?> get success async {
    return $success;
  }

  num? $timeout;

  Future<num?> get timeout async {
    return await $$context$$?.getPropertyValue('timeout') ?? $timeout;
  }

  LoginOption({this.$$context$$});

  void setValues(
      {LoginCompleteCallback? complete,
      LoginFailCallback? fail,
      LoginSuccessCallback? success,
      num? timeout}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
    if (timeout != null) $timeout = timeout;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => LoginSuccessCallbackResult($$context$$: e)])
          : null,
      'timeout': $timeout
    }..removeWhere((key, value) => value == null);
  }
}

class LoginSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $code = "";

  Future<String> get code async {
    return await $$context$$?.getPropertyValue('code') ?? $code;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  LoginSuccessCallbackResult({this.$$context$$});

  void setValues({String? code, String? errMsg}) {
    if (code != null) $code = code;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'code': $code, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class MakeBluetoothPairOption {
  mpjs.JsObject? $$context$$;

  String $deviceId = "";

  Future<String> get deviceId async {
    return await $$context$$?.getPropertyValue('deviceId') ?? $deviceId;
  }

  String $pin = "";

  Future<String> get pin async {
    return await $$context$$?.getPropertyValue('pin') ?? $pin;
  }

  MakeBluetoothPairCompleteCallback? $complete;

  Future<MakeBluetoothPairCompleteCallback?> get complete async {
    return $complete;
  }

  MakeBluetoothPairFailCallback? $fail;

  Future<MakeBluetoothPairFailCallback?> get fail async {
    return $fail;
  }

  MakeBluetoothPairSuccessCallback? $success;

  Future<MakeBluetoothPairSuccessCallback?> get success async {
    return $success;
  }

  num? $timeout;

  Future<num?> get timeout async {
    return await $$context$$?.getPropertyValue('timeout') ?? $timeout;
  }

  MakeBluetoothPairOption({this.$$context$$});

  void setValues(
      {String? deviceId,
      String? pin,
      MakeBluetoothPairCompleteCallback? complete,
      MakeBluetoothPairFailCallback? fail,
      MakeBluetoothPairSuccessCallback? success,
      num? timeout}) {
    if (deviceId != null) $deviceId = deviceId;
    if (pin != null) $pin = pin;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
    if (timeout != null) $timeout = timeout;
  }

  Map toJson() {
    return {
      'deviceId': $deviceId,
      'pin': $pin,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'timeout': $timeout
    }..removeWhere((key, value) => value == null);
  }
}

class MakePhoneCallOption {
  mpjs.JsObject? $$context$$;

  String $phoneNumber = "";

  Future<String> get phoneNumber async {
    return await $$context$$?.getPropertyValue('phoneNumber') ?? $phoneNumber;
  }

  MakePhoneCallCompleteCallback? $complete;

  Future<MakePhoneCallCompleteCallback?> get complete async {
    return $complete;
  }

  MakePhoneCallFailCallback? $fail;

  Future<MakePhoneCallFailCallback?> get fail async {
    return $fail;
  }

  MakePhoneCallSuccessCallback? $success;

  Future<MakePhoneCallSuccessCallback?> get success async {
    return $success;
  }

  MakePhoneCallOption({this.$$context$$});

  void setValues(
      {String? phoneNumber,
      MakePhoneCallCompleteCallback? complete,
      MakePhoneCallFailCallback? fail,
      MakePhoneCallSuccessCallback? success}) {
    if (phoneNumber != null) $phoneNumber = phoneNumber;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'phoneNumber': $phoneNumber,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ManufacturerData {
  mpjs.JsObject? $$context$$;

  String $manufacturerId = "";

  Future<String> get manufacturerId async {
    return await $$context$$?.getPropertyValue('manufacturerId') ??
        $manufacturerId;
  }

  ArrayBuffer? $manufacturerSpecificData;

  Future<ArrayBuffer?> get manufacturerSpecificData async {
    return ArrayBuffer(
        $$context$$: $$context$$?.getProperty('manufacturerSpecificData'));
  }

  ManufacturerData({this.$$context$$});

  void setValues(
      {String? manufacturerId, ArrayBuffer? manufacturerSpecificData}) {
    if (manufacturerId != null) $manufacturerId = manufacturerId;
    if (manufacturerSpecificData != null)
      $manufacturerSpecificData = manufacturerSpecificData;
  }

  Map toJson() {
    return {
      'manufacturerId': $manufacturerId,
      'manufacturerSpecificData': $manufacturerSpecificData
    }..removeWhere((key, value) => value == null);
  }
}

class MapBounds {
  mpjs.JsObject? $$context$$;

  MapPostion $northeast = MapPostion();

  Future<MapPostion> get northeast async {
    return MapPostion($$context$$: $$context$$?.getProperty('northeast'));
  }

  MapPostion $southwest = MapPostion();

  Future<MapPostion> get southwest async {
    return MapPostion($$context$$: $$context$$?.getProperty('southwest'));
  }

  MapBounds({this.$$context$$});

  void setValues({MapPostion? northeast, MapPostion? southwest}) {
    if (northeast != null) $northeast = northeast;
    if (southwest != null) $southwest = southwest;
  }

  Map toJson() {
    return {'northeast': $northeast, 'southwest': $southwest}
      ..removeWhere((key, value) => value == null);
  }
}

class MapPostion {
  mpjs.JsObject? $$context$$;

  num $latitude = 0;

  Future<num> get latitude async {
    return await $$context$$?.getPropertyValue('latitude') ?? $latitude;
  }

  num $longitude = 0;

  Future<num> get longitude async {
    return await $$context$$?.getPropertyValue('longitude') ?? $longitude;
  }

  MapPostion({this.$$context$$});

  void setValues({num? latitude, num? longitude}) {
    if (latitude != null) $latitude = latitude;
    if (longitude != null) $longitude = longitude;
  }

  Map toJson() {
    return {'latitude': $latitude, 'longitude': $longitude}
      ..removeWhere((key, value) => value == null);
  }
}

class Margins {
  mpjs.JsObject? $$context$$;

  num? $bottom;

  Future<num?> get bottom async {
    return await $$context$$?.getPropertyValue('bottom') ?? $bottom;
  }

  num? $left;

  Future<num?> get left async {
    return await $$context$$?.getPropertyValue('left') ?? $left;
  }

  num? $right;

  Future<num?> get right async {
    return await $$context$$?.getPropertyValue('right') ?? $right;
  }

  num? $top;

  Future<num?> get top async {
    return await $$context$$?.getPropertyValue('top') ?? $top;
  }

  Margins({this.$$context$$});

  void setValues({num? bottom, num? left, num? right, num? top}) {
    if (bottom != null) $bottom = bottom;
    if (left != null) $left = left;
    if (right != null) $right = right;
    if (top != null) $top = top;
  }

  Map toJson() {
    return {'bottom': $bottom, 'left': $left, 'right': $right, 'top': $top}
      ..removeWhere((key, value) => value == null);
  }
}

class MatchCache {
  mpjs.JsObject? $$context$$;

  String $cacheId = "";

  Future<String> get cacheId async {
    return await $$context$$?.getPropertyValue('cacheId') ?? $cacheId;
  }

  num $createTime = 0;

  Future<num> get createTime async {
    return await $$context$$?.getPropertyValue('createTime') ?? $createTime;
  }

  dynamic $data;

  Future<dynamic> get data async {
    return await $$context$$?.getPropertyValue('data') ?? $data;
  }

  num $maxAge = 0;

  Future<num> get maxAge async {
    return await $$context$$?.getPropertyValue('maxAge') ?? $maxAge;
  }

  String $ruleId = "";

  Future<String> get ruleId async {
    return await $$context$$?.getPropertyValue('ruleId') ?? $ruleId;
  }

  MatchCache({this.$$context$$});

  void setValues(
      {String? cacheId,
      num? createTime,
      dynamic data,
      num? maxAge,
      String? ruleId}) {
    if (cacheId != null) $cacheId = cacheId;
    if (createTime != null) $createTime = createTime;
    if (data != null) $data = data;
    if (maxAge != null) $maxAge = maxAge;
    if (ruleId != null) $ruleId = ruleId;
  }

  Map toJson() {
    return {
      'cacheId': $cacheId,
      'createTime': $createTime,
      'data': $data,
      'maxAge': $maxAge,
      'ruleId': $ruleId
    }..removeWhere((key, value) => value == null);
  }
}

class MediaAudioPlayer {
  mpjs.JsObject? $$context$$;

  num $volume = 0;

  Future<num> get volume async {
    return await $$context$$?.getPropertyValue('volume') ?? $volume;
  }

  MediaAudioPlayer({this.$$context$$});

  void setValues({num? volume}) {
    if (volume != null) $volume = volume;
  }

  Map toJson() {
    return {'volume': $volume}..removeWhere((key, value) => value == null);
  }

  Future<dynamic> addAudioSource(VideoDecoder source) async {
    final result =
        await $$context$$?.callMethod('addAudioSource', [source.toJson()]);
    return result;
  }

  Future<dynamic> destroy() async {
    final result = await $$context$$?.callMethod('destroy', []);
    return result;
  }

  Future<dynamic> removeAudioSource(VideoDecoder source) async {
    final result =
        await $$context$$?.callMethod('removeAudioSource', [source.toJson()]);
    return result;
  }

  Future<dynamic> start() async {
    final result = await $$context$$?.callMethod('start', []);
    return result;
  }

  Future<dynamic> stop() async {
    final result = await $$context$$?.callMethod('stop', []);
    return result;
  }
}

class MediaFile {
  mpjs.JsObject? $$context$$;

  num $duration = 0;

  Future<num> get duration async {
    return await $$context$$?.getPropertyValue('duration') ?? $duration;
  }

  dynamic $fileType;

  Future<dynamic> get fileType async {
    return await $$context$$?.getPropertyValue('fileType') ?? $fileType;
  }

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  num $size = 0;

  Future<num> get size async {
    return await $$context$$?.getPropertyValue('size') ?? $size;
  }

  String $tempFilePath = "";

  Future<String> get tempFilePath async {
    return await $$context$$?.getPropertyValue('tempFilePath') ?? $tempFilePath;
  }

  String $thumbTempFilePath = "";

  Future<String> get thumbTempFilePath async {
    return await $$context$$?.getPropertyValue('thumbTempFilePath') ??
        $thumbTempFilePath;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  MediaFile({this.$$context$$});

  void setValues(
      {num? duration,
      dynamic fileType,
      num? height,
      num? size,
      String? tempFilePath,
      String? thumbTempFilePath,
      num? width}) {
    if (duration != null) $duration = duration;
    if (fileType != null) $fileType = fileType;
    if (height != null) $height = height;
    if (size != null) $size = size;
    if (tempFilePath != null) $tempFilePath = tempFilePath;
    if (thumbTempFilePath != null) $thumbTempFilePath = thumbTempFilePath;
    if (width != null) $width = width;
  }

  Map toJson() {
    return {
      'duration': $duration,
      'fileType': $fileType,
      'height': $height,
      'size': $size,
      'tempFilePath': $tempFilePath,
      'thumbTempFilePath': $thumbTempFilePath,
      'width': $width
    }..removeWhere((key, value) => value == null);
  }
}

class MediaQueryObserverObserveCallbackResult {
  mpjs.JsObject? $$context$$;

  bool $matches = false;

  Future<bool> get matches async {
    return await $$context$$?.getPropertyValue('matches') ?? $matches;
  }

  MediaQueryObserverObserveCallbackResult({this.$$context$$});

  void setValues({bool? matches}) {
    if (matches != null) $matches = matches;
  }

  Map toJson() {
    return {'matches': $matches}..removeWhere((key, value) => value == null);
  }
}

class MediaSource {
  mpjs.JsObject? $$context$$;

  String $url = "";

  Future<String> get url async {
    return await $$context$$?.getPropertyValue('url') ?? $url;
  }

  String? $poster;

  Future<String?> get poster async {
    return await $$context$$?.getPropertyValue('poster') ?? $poster;
  }

  dynamic $type;

  Future<dynamic> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  MediaSource({this.$$context$$});

  void setValues({String? url, String? poster, dynamic type}) {
    if (url != null) $url = url;
    if (poster != null) $poster = poster;
    if (type != null) $type = type;
  }

  Map toJson() {
    return {'url': $url, 'poster': $poster, 'type': $type}
      ..removeWhere((key, value) => value == null);
  }
}

class MediaTrack {
  mpjs.JsObject? $$context$$;

  num $duration = 0;

  Future<num> get duration async {
    return await $$context$$?.getPropertyValue('duration') ?? $duration;
  }

  dynamic $kind;

  Future<dynamic> get kind async {
    return await $$context$$?.getPropertyValue('kind') ?? $kind;
  }

  num $volume = 0;

  Future<num> get volume async {
    return await $$context$$?.getPropertyValue('volume') ?? $volume;
  }

  MediaTrack({this.$$context$$});

  void setValues({num? duration, dynamic kind, num? volume}) {
    if (duration != null) $duration = duration;
    if (kind != null) $kind = kind;
    if (volume != null) $volume = volume;
  }

  Map toJson() {
    return {'duration': $duration, 'kind': $kind, 'volume': $volume}
      ..removeWhere((key, value) => value == null);
  }
}

class MiniProgram {
  mpjs.JsObject? $$context$$;

  String $appId = "";

  Future<String> get appId async {
    return await $$context$$?.getPropertyValue('appId') ?? $appId;
  }

  dynamic $envVersion;

  Future<dynamic> get envVersion async {
    return await $$context$$?.getPropertyValue('envVersion') ?? $envVersion;
  }

  String $version = "";

  Future<String> get version async {
    return await $$context$$?.getPropertyValue('version') ?? $version;
  }

  MiniProgram({this.$$context$$});

  void setValues({String? appId, dynamic envVersion, String? version}) {
    if (appId != null) $appId = appId;
    if (envVersion != null) $envVersion = envVersion;
    if (version != null) $version = version;
  }

  Map toJson() {
    return {'appId': $appId, 'envVersion': $envVersion, 'version': $version}
      ..removeWhere((key, value) => value == null);
  }
}

class MkdirFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  MkdirFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class MkdirOption {
  mpjs.JsObject? $$context$$;

  String $dirPath = "";

  Future<String> get dirPath async {
    return await $$context$$?.getPropertyValue('dirPath') ?? $dirPath;
  }

  MkdirCompleteCallback? $complete;

  Future<MkdirCompleteCallback?> get complete async {
    return $complete;
  }

  MkdirFailCallback? $fail;

  Future<MkdirFailCallback?> get fail async {
    return $fail;
  }

  bool? $recursive;

  Future<bool?> get recursive async {
    return await $$context$$?.getPropertyValue('recursive') ?? $recursive;
  }

  MkdirSuccessCallback? $success;

  Future<MkdirSuccessCallback?> get success async {
    return $success;
  }

  MkdirOption({this.$$context$$});

  void setValues(
      {String? dirPath,
      MkdirCompleteCallback? complete,
      MkdirFailCallback? fail,
      bool? recursive,
      MkdirSuccessCallback? success}) {
    if (dirPath != null) $dirPath = dirPath;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (recursive != null) $recursive = recursive;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'dirPath': $dirPath,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => MkdirFailCallbackResult($$context$$: e)])
          : null,
      'recursive': $recursive,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class MoveAlongOption {
  mpjs.JsObject? $$context$$;

  num $duration = 0;

  Future<num> get duration async {
    return await $$context$$?.getPropertyValue('duration') ?? $duration;
  }

  num $markerId = 0;

  Future<num> get markerId async {
    return await $$context$$?.getPropertyValue('markerId') ?? $markerId;
  }

  List<dynamic> $path = <dynamic>[];

  Future<List<dynamic>> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  bool? $autoRotate;

  Future<bool?> get autoRotate async {
    return await $$context$$?.getPropertyValue('autoRotate') ?? $autoRotate;
  }

  MoveAlongCompleteCallback? $complete;

  Future<MoveAlongCompleteCallback?> get complete async {
    return $complete;
  }

  MoveAlongFailCallback? $fail;

  Future<MoveAlongFailCallback?> get fail async {
    return $fail;
  }

  MoveAlongSuccessCallback? $success;

  Future<MoveAlongSuccessCallback?> get success async {
    return $success;
  }

  MoveAlongOption({this.$$context$$});

  void setValues(
      {num? duration,
      num? markerId,
      List<dynamic>? path,
      bool? autoRotate,
      MoveAlongCompleteCallback? complete,
      MoveAlongFailCallback? fail,
      MoveAlongSuccessCallback? success}) {
    if (duration != null) $duration = duration;
    if (markerId != null) $markerId = markerId;
    if (path != null) $path = path;
    if (autoRotate != null) $autoRotate = autoRotate;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'duration': $duration,
      'markerId': $markerId,
      'path': $path,
      'autoRotate': $autoRotate,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class MoveToLocationOption {
  mpjs.JsObject? $$context$$;

  MoveToLocationCompleteCallback? $complete;

  Future<MoveToLocationCompleteCallback?> get complete async {
    return $complete;
  }

  MoveToLocationFailCallback? $fail;

  Future<MoveToLocationFailCallback?> get fail async {
    return $fail;
  }

  num? $latitude;

  Future<num?> get latitude async {
    return await $$context$$?.getPropertyValue('latitude') ?? $latitude;
  }

  num? $longitude;

  Future<num?> get longitude async {
    return await $$context$$?.getPropertyValue('longitude') ?? $longitude;
  }

  MoveToLocationSuccessCallback? $success;

  Future<MoveToLocationSuccessCallback?> get success async {
    return $success;
  }

  MoveToLocationOption({this.$$context$$});

  void setValues(
      {MoveToLocationCompleteCallback? complete,
      MoveToLocationFailCallback? fail,
      num? latitude,
      num? longitude,
      MoveToLocationSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (latitude != null) $latitude = latitude;
    if (longitude != null) $longitude = longitude;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'latitude': $latitude,
      'longitude': $longitude,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class MuteConfig {
  mpjs.JsObject? $$context$$;

  bool? $muteEarphone;

  Future<bool?> get muteEarphone async {
    return await $$context$$?.getPropertyValue('muteEarphone') ?? $muteEarphone;
  }

  bool? $muteMicrophone;

  Future<bool?> get muteMicrophone async {
    return await $$context$$?.getPropertyValue('muteMicrophone') ??
        $muteMicrophone;
  }

  MuteConfig({this.$$context$$});

  void setValues({bool? muteEarphone, bool? muteMicrophone}) {
    if (muteEarphone != null) $muteEarphone = muteEarphone;
    if (muteMicrophone != null) $muteMicrophone = muteMicrophone;
  }

  Map toJson() {
    return {'muteEarphone': $muteEarphone, 'muteMicrophone': $muteMicrophone}
      ..removeWhere((key, value) => value == null);
  }
}

class MuteOption {
  mpjs.JsObject? $$context$$;

  MuteCompleteCallback? $complete;

  Future<MuteCompleteCallback?> get complete async {
    return $complete;
  }

  MuteFailCallback? $fail;

  Future<MuteFailCallback?> get fail async {
    return $fail;
  }

  MuteSuccessCallback? $success;

  Future<MuteSuccessCallback?> get success async {
    return $success;
  }

  MuteOption({this.$$context$$});

  void setValues(
      {MuteCompleteCallback? complete,
      MuteFailCallback? fail,
      MuteSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class NFCAdapter {
  mpjs.JsObject? $$context$$;

  TechType $tech = TechType();

  Future<TechType> get tech async {
    return TechType($$context$$: $$context$$?.getProperty('tech'));
  }

  NFCAdapter({this.$$context$$});

  void setValues({TechType? tech}) {
    if (tech != null) $tech = tech;
  }

  Map toJson() {
    return {'tech': $tech}..removeWhere((key, value) => value == null);
  }

  Future<void> offDiscovered([OffDiscoveredCallback? listener]) async {
    final result = await $$context$$?.callMethod('offDiscovered', [listener]);
    return result;
  }

  Future<void> onDiscovered(OnDiscoveredCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnDiscoveredListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onDiscovered', [listener]);
    return result;
  }

  Future<void> startDiscovery([StartDiscoveryOption? option]) async {
    final result =
        await $$context$$?.callMethod('startDiscovery', [option?.toJson()]);
    return result;
  }

  Future<void> stopDiscovery([StopDiscoveryOption? option]) async {
    final result =
        await $$context$$?.callMethod('stopDiscovery', [option?.toJson()]);
    return result;
  }

  Future<IsoDep> getIsoDep() async {
    final result = await $$context$$?.callMethod('getIsoDep', []);

    return IsoDep($$context$$: result);
  }

  Future<MifareClassic> getMifareClassic() async {
    final result = await $$context$$?.callMethod('getMifareClassic', []);

    return MifareClassic($$context$$: result);
  }

  Future<MifareUltralight> getMifareUltralight() async {
    final result = await $$context$$?.callMethod('getMifareUltralight', []);

    return MifareUltralight($$context$$: result);
  }

  Future<Ndef> getNdef() async {
    final result = await $$context$$?.callMethod('getNdef', []);

    return Ndef($$context$$: result);
  }

  Future<NfcA> getNfcA() async {
    final result = await $$context$$?.callMethod('getNfcA', []);

    return NfcA($$context$$: result);
  }

  Future<NfcB> getNfcB() async {
    final result = await $$context$$?.callMethod('getNfcB', []);

    return NfcB($$context$$: result);
  }

  Future<NfcF> getNfcF() async {
    final result = await $$context$$?.callMethod('getNfcF', []);

    return NfcF($$context$$: result);
  }

  Future<NfcV> getNfcV() async {
    final result = await $$context$$?.callMethod('getNfcV', []);

    return NfcV($$context$$: result);
  }
}

class NavigateBackMiniProgramOption {
  mpjs.JsObject? $$context$$;

  NavigateBackMiniProgramCompleteCallback? $complete;

  Future<NavigateBackMiniProgramCompleteCallback?> get complete async {
    return $complete;
  }

  IAnyObject? $extraData;

  Future<IAnyObject?> get extraData async {
    return IAnyObject($$context$$: $$context$$?.getProperty('extraData'));
  }

  NavigateBackMiniProgramFailCallback? $fail;

  Future<NavigateBackMiniProgramFailCallback?> get fail async {
    return $fail;
  }

  NavigateBackMiniProgramSuccessCallback? $success;

  Future<NavigateBackMiniProgramSuccessCallback?> get success async {
    return $success;
  }

  NavigateBackMiniProgramOption({this.$$context$$});

  void setValues(
      {NavigateBackMiniProgramCompleteCallback? complete,
      IAnyObject? extraData,
      NavigateBackMiniProgramFailCallback? fail,
      NavigateBackMiniProgramSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (extraData != null) $extraData = extraData;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'extraData': $extraData,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class NavigateBackOption {
  mpjs.JsObject? $$context$$;

  NavigateBackCompleteCallback? $complete;

  Future<NavigateBackCompleteCallback?> get complete async {
    return $complete;
  }

  num? $delta;

  Future<num?> get delta async {
    return await $$context$$?.getPropertyValue('delta') ?? $delta;
  }

  NavigateBackFailCallback? $fail;

  Future<NavigateBackFailCallback?> get fail async {
    return $fail;
  }

  NavigateBackSuccessCallback? $success;

  Future<NavigateBackSuccessCallback?> get success async {
    return $success;
  }

  NavigateBackOption({this.$$context$$});

  void setValues(
      {NavigateBackCompleteCallback? complete,
      num? delta,
      NavigateBackFailCallback? fail,
      NavigateBackSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (delta != null) $delta = delta;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'delta': $delta,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class NavigateToMiniProgramOption {
  mpjs.JsObject? $$context$$;

  String? $appId;

  Future<String?> get appId async {
    return await $$context$$?.getPropertyValue('appId') ?? $appId;
  }

  NavigateToMiniProgramCompleteCallback? $complete;

  Future<NavigateToMiniProgramCompleteCallback?> get complete async {
    return $complete;
  }

  dynamic $envVersion;

  Future<dynamic> get envVersion async {
    return await $$context$$?.getPropertyValue('envVersion') ?? $envVersion;
  }

  IAnyObject? $extraData;

  Future<IAnyObject?> get extraData async {
    return IAnyObject($$context$$: $$context$$?.getProperty('extraData'));
  }

  NavigateToMiniProgramFailCallback? $fail;

  Future<NavigateToMiniProgramFailCallback?> get fail async {
    return $fail;
  }

  bool? $noRelaunchIfPathUnchanged;

  Future<bool?> get noRelaunchIfPathUnchanged async {
    return await $$context$$?.getPropertyValue('noRelaunchIfPathUnchanged') ??
        $noRelaunchIfPathUnchanged;
  }

  String? $path;

  Future<String?> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  String? $shortLink;

  Future<String?> get shortLink async {
    return await $$context$$?.getPropertyValue('shortLink') ?? $shortLink;
  }

  NavigateToMiniProgramSuccessCallback? $success;

  Future<NavigateToMiniProgramSuccessCallback?> get success async {
    return $success;
  }

  NavigateToMiniProgramOption({this.$$context$$});

  void setValues(
      {String? appId,
      NavigateToMiniProgramCompleteCallback? complete,
      dynamic envVersion,
      IAnyObject? extraData,
      NavigateToMiniProgramFailCallback? fail,
      bool? noRelaunchIfPathUnchanged,
      String? path,
      String? shortLink,
      NavigateToMiniProgramSuccessCallback? success}) {
    if (appId != null) $appId = appId;
    if (complete != null) $complete = complete;
    if (envVersion != null) $envVersion = envVersion;
    if (extraData != null) $extraData = extraData;
    if (fail != null) $fail = fail;
    if (noRelaunchIfPathUnchanged != null)
      $noRelaunchIfPathUnchanged = noRelaunchIfPathUnchanged;
    if (path != null) $path = path;
    if (shortLink != null) $shortLink = shortLink;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'appId': $appId,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'envVersion': $envVersion,
      'extraData': $extraData,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'noRelaunchIfPathUnchanged': $noRelaunchIfPathUnchanged,
      'path': $path,
      'shortLink': $shortLink,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class NavigateToOption {
  mpjs.JsObject? $$context$$;

  String $url = "";

  Future<String> get url async {
    return await $$context$$?.getPropertyValue('url') ?? $url;
  }

  NavigateToCompleteCallback? $complete;

  Future<NavigateToCompleteCallback?> get complete async {
    return $complete;
  }

  IAnyObject? $events;

  Future<IAnyObject?> get events async {
    return IAnyObject($$context$$: $$context$$?.getProperty('events'));
  }

  NavigateToFailCallback? $fail;

  Future<NavigateToFailCallback?> get fail async {
    return $fail;
  }

  NavigateToSuccessCallback? $success;

  Future<NavigateToSuccessCallback?> get success async {
    return $success;
  }

  NavigateToOption({this.$$context$$});

  void setValues(
      {String? url,
      NavigateToCompleteCallback? complete,
      IAnyObject? events,
      NavigateToFailCallback? fail,
      NavigateToSuccessCallback? success}) {
    if (url != null) $url = url;
    if (complete != null) $complete = complete;
    if (events != null) $events = events;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'url': $url,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'events': $events,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => NavigateToSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class NavigateToSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  EventChannel $eventChannel = EventChannel();

  Future<EventChannel> get eventChannel async {
    return EventChannel($$context$$: $$context$$?.getProperty('eventChannel'));
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  NavigateToSuccessCallbackResult({this.$$context$$});

  void setValues({EventChannel? eventChannel, String? errMsg}) {
    if (eventChannel != null) $eventChannel = eventChannel;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'eventChannel': $eventChannel, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class NdefCloseOption {
  mpjs.JsObject? $$context$$;

  NdefCloseCompleteCallback? $complete;

  Future<NdefCloseCompleteCallback?> get complete async {
    return $complete;
  }

  NdefCloseFailCallback? $fail;

  Future<NdefCloseFailCallback?> get fail async {
    return $fail;
  }

  NdefCloseSuccessCallback? $success;

  Future<NdefCloseSuccessCallback?> get success async {
    return $success;
  }

  NdefCloseOption({this.$$context$$});

  void setValues(
      {NdefCloseCompleteCallback? complete,
      NdefCloseFailCallback? fail,
      NdefCloseSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => Nfcrwerror($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => Nfcrwerror($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => Nfcrwerror($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class NdefConnectOption {
  mpjs.JsObject? $$context$$;

  ConnectCompleteCallback? $complete;

  Future<ConnectCompleteCallback?> get complete async {
    return $complete;
  }

  ConnectFailCallback? $fail;

  Future<ConnectFailCallback?> get fail async {
    return $fail;
  }

  ConnectSuccessCallback? $success;

  Future<ConnectSuccessCallback?> get success async {
    return $success;
  }

  NdefConnectOption({this.$$context$$});

  void setValues(
      {ConnectCompleteCallback? complete,
      ConnectFailCallback? fail,
      ConnectSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => Nfcrwerror($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => Nfcrwerror($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => Nfcrwerror($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class NodeCallbackResult {
  mpjs.JsObject? $$context$$;

  IAnyObject $node = IAnyObject();

  Future<IAnyObject> get node async {
    return IAnyObject($$context$$: $$context$$?.getProperty('node'));
  }

  NodeCallbackResult({this.$$context$$});

  void setValues({IAnyObject? node}) {
    if (node != null) $node = node;
  }

  Map toJson() {
    return {'node': $node}..removeWhere((key, value) => value == null);
  }
}

class NotifyBLECharacteristicValueChangeOption {
  mpjs.JsObject? $$context$$;

  String $characteristicId = "";

  Future<String> get characteristicId async {
    return await $$context$$?.getPropertyValue('characteristicId') ??
        $characteristicId;
  }

  String $deviceId = "";

  Future<String> get deviceId async {
    return await $$context$$?.getPropertyValue('deviceId') ?? $deviceId;
  }

  String $serviceId = "";

  Future<String> get serviceId async {
    return await $$context$$?.getPropertyValue('serviceId') ?? $serviceId;
  }

  bool $state = false;

  Future<bool> get state async {
    return await $$context$$?.getPropertyValue('state') ?? $state;
  }

  NotifyBLECharacteristicValueChangeCompleteCallback? $complete;

  Future<NotifyBLECharacteristicValueChangeCompleteCallback?>
      get complete async {
    return $complete;
  }

  NotifyBLECharacteristicValueChangeFailCallback? $fail;

  Future<NotifyBLECharacteristicValueChangeFailCallback?> get fail async {
    return $fail;
  }

  NotifyBLECharacteristicValueChangeSuccessCallback? $success;

  Future<NotifyBLECharacteristicValueChangeSuccessCallback?> get success async {
    return $success;
  }

  String? $type;

  Future<String?> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  NotifyBLECharacteristicValueChangeOption({this.$$context$$});

  void setValues(
      {String? characteristicId,
      String? deviceId,
      String? serviceId,
      bool? state,
      NotifyBLECharacteristicValueChangeCompleteCallback? complete,
      NotifyBLECharacteristicValueChangeFailCallback? fail,
      NotifyBLECharacteristicValueChangeSuccessCallback? success,
      String? type}) {
    if (characteristicId != null) $characteristicId = characteristicId;
    if (deviceId != null) $deviceId = deviceId;
    if (serviceId != null) $serviceId = serviceId;
    if (state != null) $state = state;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
    if (type != null) $type = type;
  }

  Map toJson() {
    return {
      'characteristicId': $characteristicId,
      'deviceId': $deviceId,
      'serviceId': $serviceId,
      'state': $state,
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'type': $type
    }..removeWhere((key, value) => value == null);
  }
}

class OCRTrack {
  mpjs.JsObject? $$context$$;

  dynamic $mode;

  Future<dynamic> get mode async {
    return await $$context$$?.getPropertyValue('mode') ?? $mode;
  }

  OCRTrack({this.$$context$$});

  void setValues({dynamic mode}) {
    if (mode != null) $mode = mode;
  }

  Map toJson() {
    return {'mode': $mode}..removeWhere((key, value) => value == null);
  }
}

class ObserveDescriptor {
  mpjs.JsObject? $$context$$;

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  num $maxHeight = 0;

  Future<num> get maxHeight async {
    return await $$context$$?.getPropertyValue('maxHeight') ?? $maxHeight;
  }

  num $maxWidth = 0;

  Future<num> get maxWidth async {
    return await $$context$$?.getPropertyValue('maxWidth') ?? $maxWidth;
  }

  num $minHeight = 0;

  Future<num> get minHeight async {
    return await $$context$$?.getPropertyValue('minHeight') ?? $minHeight;
  }

  num $minWidth = 0;

  Future<num> get minWidth async {
    return await $$context$$?.getPropertyValue('minWidth') ?? $minWidth;
  }

  String $orientation = "";

  Future<String> get orientation async {
    return await $$context$$?.getPropertyValue('orientation') ?? $orientation;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  ObserveDescriptor({this.$$context$$});

  void setValues(
      {num? height,
      num? maxHeight,
      num? maxWidth,
      num? minHeight,
      num? minWidth,
      String? orientation,
      num? width}) {
    if (height != null) $height = height;
    if (maxHeight != null) $maxHeight = maxHeight;
    if (maxWidth != null) $maxWidth = maxWidth;
    if (minHeight != null) $minHeight = minHeight;
    if (minWidth != null) $minWidth = minWidth;
    if (orientation != null) $orientation = orientation;
    if (width != null) $width = width;
  }

  Map toJson() {
    return {
      'height': $height,
      'maxHeight': $maxHeight,
      'maxWidth': $maxWidth,
      'minHeight': $minHeight,
      'minWidth': $minWidth,
      'orientation': $orientation,
      'width': $width
    }..removeWhere((key, value) => value == null);
  }
}

class ObserveOption {
  mpjs.JsObject? $$context$$;

  List<String>? $entryTypes;

  Future<List<String>?> get entryTypes async {
    return await $$context$$?.getPropertyValue('entryTypes') ?? $entryTypes;
  }

  dynamic $type;

  Future<dynamic> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  ObserveOption({this.$$context$$});

  void setValues({List<String>? entryTypes, dynamic type}) {
    if (entryTypes != null) $entryTypes = entryTypes;
    if (type != null) $type = type;
  }

  Map toJson() {
    return {'entryTypes': $entryTypes, 'type': $type}
      ..removeWhere((key, value) => value == null);
  }
}

class OffscreenCanvas {
  mpjs.JsObject? $$context$$;

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  OffscreenCanvas({this.$$context$$});

  void setValues({num? height, num? width}) {
    if (height != null) $height = height;
    if (width != null) $width = width;
  }

  Map toJson() {
    return {'height': $height, 'width': $width}
      ..removeWhere((key, value) => value == null);
  }

  Future<Image> createImage() async {
    final result = await $$context$$?.callMethod('createImage', []);

    return Image($$context$$: result);
  }

  Future<dynamic> getContext(dynamic contextType) async {
    final result = await $$context$$?.callMethod('getContext', [contextType]);
    return result;
  }
}

class OnAccelerometerChangeListenerResult {
  mpjs.JsObject? $$context$$;

  num $x = 0;

  Future<num> get x async {
    return await $$context$$?.getPropertyValue('x') ?? $x;
  }

  num $y = 0;

  Future<num> get y async {
    return await $$context$$?.getPropertyValue('y') ?? $y;
  }

  num $z = 0;

  Future<num> get z async {
    return await $$context$$?.getPropertyValue('z') ?? $z;
  }

  OnAccelerometerChangeListenerResult({this.$$context$$});

  void setValues({num? x, num? y, num? z}) {
    if (x != null) $x = x;
    if (y != null) $y = y;
    if (z != null) $z = z;
  }

  Map toJson() {
    return {'x': $x, 'y': $y, 'z': $z}
      ..removeWhere((key, value) => value == null);
  }
}

class OnBLECharacteristicValueChangeListenerResult {
  mpjs.JsObject? $$context$$;

  String $characteristicId = "";

  Future<String> get characteristicId async {
    return await $$context$$?.getPropertyValue('characteristicId') ??
        $characteristicId;
  }

  String $deviceId = "";

  Future<String> get deviceId async {
    return await $$context$$?.getPropertyValue('deviceId') ?? $deviceId;
  }

  String $serviceId = "";

  Future<String> get serviceId async {
    return await $$context$$?.getPropertyValue('serviceId') ?? $serviceId;
  }

  ArrayBuffer $value = ArrayBuffer();

  Future<ArrayBuffer> get value async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('value'));
  }

  OnBLECharacteristicValueChangeListenerResult({this.$$context$$});

  void setValues(
      {String? characteristicId,
      String? deviceId,
      String? serviceId,
      ArrayBuffer? value}) {
    if (characteristicId != null) $characteristicId = characteristicId;
    if (deviceId != null) $deviceId = deviceId;
    if (serviceId != null) $serviceId = serviceId;
    if (value != null) $value = value;
  }

  Map toJson() {
    return {
      'characteristicId': $characteristicId,
      'deviceId': $deviceId,
      'serviceId': $serviceId,
      'value': $value
    }..removeWhere((key, value) => value == null);
  }
}

class OnBLEConnectionStateChangeListenerResult {
  mpjs.JsObject? $$context$$;

  bool $connected = false;

  Future<bool> get connected async {
    return await $$context$$?.getPropertyValue('connected') ?? $connected;
  }

  String $deviceId = "";

  Future<String> get deviceId async {
    return await $$context$$?.getPropertyValue('deviceId') ?? $deviceId;
  }

  OnBLEConnectionStateChangeListenerResult({this.$$context$$});

  void setValues({bool? connected, String? deviceId}) {
    if (connected != null) $connected = connected;
    if (deviceId != null) $deviceId = deviceId;
  }

  Map toJson() {
    return {'connected': $connected, 'deviceId': $deviceId}
      ..removeWhere((key, value) => value == null);
  }
}

class OnBLEMTUChangeListenerResult {
  mpjs.JsObject? $$context$$;

  String $deviceId = "";

  Future<String> get deviceId async {
    return await $$context$$?.getPropertyValue('deviceId') ?? $deviceId;
  }

  num $mtu = 0;

  Future<num> get mtu async {
    return await $$context$$?.getPropertyValue('mtu') ?? $mtu;
  }

  OnBLEMTUChangeListenerResult({this.$$context$$});

  void setValues({String? deviceId, num? mtu}) {
    if (deviceId != null) $deviceId = deviceId;
    if (mtu != null) $mtu = mtu;
  }

  Map toJson() {
    return {'deviceId': $deviceId, 'mtu': $mtu}
      ..removeWhere((key, value) => value == null);
  }
}

class OnBLEPeripheralConnectionStateChangedListenerResult {
  mpjs.JsObject? $$context$$;

  bool $connected = false;

  Future<bool> get connected async {
    return await $$context$$?.getPropertyValue('connected') ?? $connected;
  }

  String $deviceId = "";

  Future<String> get deviceId async {
    return await $$context$$?.getPropertyValue('deviceId') ?? $deviceId;
  }

  String $serverId = "";

  Future<String> get serverId async {
    return await $$context$$?.getPropertyValue('serverId') ?? $serverId;
  }

  OnBLEPeripheralConnectionStateChangedListenerResult({this.$$context$$});

  void setValues({bool? connected, String? deviceId, String? serverId}) {
    if (connected != null) $connected = connected;
    if (deviceId != null) $deviceId = deviceId;
    if (serverId != null) $serverId = serverId;
  }

  Map toJson() {
    return {
      'connected': $connected,
      'deviceId': $deviceId,
      'serverId': $serverId
    }..removeWhere((key, value) => value == null);
  }
}

class OnBackgroundFetchDataListenerResult {
  mpjs.JsObject? $$context$$;

  String $fetchType = "";

  Future<String> get fetchType async {
    return await $$context$$?.getPropertyValue('fetchType') ?? $fetchType;
  }

  String $fetchedData = "";

  Future<String> get fetchedData async {
    return await $$context$$?.getPropertyValue('fetchedData') ?? $fetchedData;
  }

  String $path = "";

  Future<String> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  String $query = "";

  Future<String> get query async {
    return await $$context$$?.getPropertyValue('query') ?? $query;
  }

  num $scene = 0;

  Future<num> get scene async {
    return await $$context$$?.getPropertyValue('scene') ?? $scene;
  }

  num $timeStamp = 0;

  Future<num> get timeStamp async {
    return await $$context$$?.getPropertyValue('timeStamp') ?? $timeStamp;
  }

  OnBackgroundFetchDataListenerResult({this.$$context$$});

  void setValues(
      {String? fetchType,
      String? fetchedData,
      String? path,
      String? query,
      num? scene,
      num? timeStamp}) {
    if (fetchType != null) $fetchType = fetchType;
    if (fetchedData != null) $fetchedData = fetchedData;
    if (path != null) $path = path;
    if (query != null) $query = query;
    if (scene != null) $scene = scene;
    if (timeStamp != null) $timeStamp = timeStamp;
  }

  Map toJson() {
    return {
      'fetchType': $fetchType,
      'fetchedData': $fetchedData,
      'path': $path,
      'query': $query,
      'scene': $scene,
      'timeStamp': $timeStamp
    }..removeWhere((key, value) => value == null);
  }
}

class OnBeaconServiceChangeListenerResult {
  mpjs.JsObject? $$context$$;

  bool $available = false;

  Future<bool> get available async {
    return await $$context$$?.getPropertyValue('available') ?? $available;
  }

  bool $discovering = false;

  Future<bool> get discovering async {
    return await $$context$$?.getPropertyValue('discovering') ?? $discovering;
  }

  OnBeaconServiceChangeListenerResult({this.$$context$$});

  void setValues({bool? available, bool? discovering}) {
    if (available != null) $available = available;
    if (discovering != null) $discovering = discovering;
  }

  Map toJson() {
    return {'available': $available, 'discovering': $discovering}
      ..removeWhere((key, value) => value == null);
  }
}

class OnBeaconUpdateListenerResult {
  mpjs.JsObject? $$context$$;

  List<BeaconInfo> $beacons = <BeaconInfo>[];

  Future<List<BeaconInfo>> get beacons async {
    return ((await $$context$$?.getPropertyValue('beacons')) as List)
        .map((it) => BeaconInfo($$context$$: it))
        .toList();
  }

  OnBeaconUpdateListenerResult({this.$$context$$});

  void setValues({List<BeaconInfo>? beacons}) {
    if (beacons != null) $beacons = beacons;
  }

  Map toJson() {
    return {'beacons': $beacons}..removeWhere((key, value) => value == null);
  }
}

class OnBluetoothAdapterStateChangeListenerResult {
  mpjs.JsObject? $$context$$;

  bool $available = false;

  Future<bool> get available async {
    return await $$context$$?.getPropertyValue('available') ?? $available;
  }

  bool $discovering = false;

  Future<bool> get discovering async {
    return await $$context$$?.getPropertyValue('discovering') ?? $discovering;
  }

  OnBluetoothAdapterStateChangeListenerResult({this.$$context$$});

  void setValues({bool? available, bool? discovering}) {
    if (available != null) $available = available;
    if (discovering != null) $discovering = discovering;
  }

  Map toJson() {
    return {'available': $available, 'discovering': $discovering}
      ..removeWhere((key, value) => value == null);
  }
}

class OnBluetoothDeviceFoundListenerResult {
  mpjs.JsObject? $$context$$;

  List<BlueToothDevice> $devices = <BlueToothDevice>[];

  Future<List<BlueToothDevice>> get devices async {
    return ((await $$context$$?.getPropertyValue('devices')) as List)
        .map((it) => BlueToothDevice($$context$$: it))
        .toList();
  }

  OnBluetoothDeviceFoundListenerResult({this.$$context$$});

  void setValues({List<BlueToothDevice>? devices}) {
    if (devices != null) $devices = devices;
  }

  Map toJson() {
    return {'devices': $devices}..removeWhere((key, value) => value == null);
  }
}

class OnCameraFrameCallbackResult {
  mpjs.JsObject? $$context$$;

  ArrayBuffer $data = ArrayBuffer();

  Future<ArrayBuffer> get data async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('data'));
  }

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  OnCameraFrameCallbackResult({this.$$context$$});

  void setValues({ArrayBuffer? data, num? height, num? width}) {
    if (data != null) $data = data;
    if (height != null) $height = height;
    if (width != null) $width = width;
  }

  Map toJson() {
    return {'data': $data, 'height': $height, 'width': $width}
      ..removeWhere((key, value) => value == null);
  }
}

class OnCharacteristicReadRequestListenerResult {
  mpjs.JsObject? $$context$$;

  num $callbackId = 0;

  Future<num> get callbackId async {
    return await $$context$$?.getPropertyValue('callbackId') ?? $callbackId;
  }

  String $characteristicId = "";

  Future<String> get characteristicId async {
    return await $$context$$?.getPropertyValue('characteristicId') ??
        $characteristicId;
  }

  String $serviceId = "";

  Future<String> get serviceId async {
    return await $$context$$?.getPropertyValue('serviceId') ?? $serviceId;
  }

  OnCharacteristicReadRequestListenerResult({this.$$context$$});

  void setValues(
      {num? callbackId, String? characteristicId, String? serviceId}) {
    if (callbackId != null) $callbackId = callbackId;
    if (characteristicId != null) $characteristicId = characteristicId;
    if (serviceId != null) $serviceId = serviceId;
  }

  Map toJson() {
    return {
      'callbackId': $callbackId,
      'characteristicId': $characteristicId,
      'serviceId': $serviceId
    }..removeWhere((key, value) => value == null);
  }
}

class OnCharacteristicSubscribedListenerResult {
  mpjs.JsObject? $$context$$;

  String $characteristicId = "";

  Future<String> get characteristicId async {
    return await $$context$$?.getPropertyValue('characteristicId') ??
        $characteristicId;
  }

  String $serviceId = "";

  Future<String> get serviceId async {
    return await $$context$$?.getPropertyValue('serviceId') ?? $serviceId;
  }

  OnCharacteristicSubscribedListenerResult({this.$$context$$});

  void setValues({String? characteristicId, String? serviceId}) {
    if (characteristicId != null) $characteristicId = characteristicId;
    if (serviceId != null) $serviceId = serviceId;
  }

  Map toJson() {
    return {'characteristicId': $characteristicId, 'serviceId': $serviceId}
      ..removeWhere((key, value) => value == null);
  }
}

class OnCharacteristicWriteRequestListenerResult {
  mpjs.JsObject? $$context$$;

  num $callbackId = 0;

  Future<num> get callbackId async {
    return await $$context$$?.getPropertyValue('callbackId') ?? $callbackId;
  }

  String $characteristicId = "";

  Future<String> get characteristicId async {
    return await $$context$$?.getPropertyValue('characteristicId') ??
        $characteristicId;
  }

  String $serviceId = "";

  Future<String> get serviceId async {
    return await $$context$$?.getPropertyValue('serviceId') ?? $serviceId;
  }

  ArrayBuffer $value = ArrayBuffer();

  Future<ArrayBuffer> get value async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('value'));
  }

  OnCharacteristicWriteRequestListenerResult({this.$$context$$});

  void setValues(
      {num? callbackId,
      String? characteristicId,
      String? serviceId,
      ArrayBuffer? value}) {
    if (callbackId != null) $callbackId = callbackId;
    if (characteristicId != null) $characteristicId = characteristicId;
    if (serviceId != null) $serviceId = serviceId;
    if (value != null) $value = value;
  }

  Map toJson() {
    return {
      'callbackId': $callbackId,
      'characteristicId': $characteristicId,
      'serviceId': $serviceId,
      'value': $value
    }..removeWhere((key, value) => value == null);
  }
}

class OnCheckForUpdateListenerResult {
  mpjs.JsObject? $$context$$;

  bool $hasUpdate = false;

  Future<bool> get hasUpdate async {
    return await $$context$$?.getPropertyValue('hasUpdate') ?? $hasUpdate;
  }

  OnCheckForUpdateListenerResult({this.$$context$$});

  void setValues({bool? hasUpdate}) {
    if (hasUpdate != null) $hasUpdate = hasUpdate;
  }

  Map toJson() {
    return {'hasUpdate': $hasUpdate}
      ..removeWhere((key, value) => value == null);
  }
}

class OnChunkReceivedListenerResult {
  mpjs.JsObject? $$context$$;

  Result $res = Result();

  Future<Result> get res async {
    return Result($$context$$: $$context$$?.getProperty('res'));
  }

  OnChunkReceivedListenerResult({this.$$context$$});

  void setValues({Result? res}) {
    if (res != null) $res = res;
  }

  Map toJson() {
    return {'res': $res}..removeWhere((key, value) => value == null);
  }
}

class OnCompassChangeListenerResult {
  mpjs.JsObject? $$context$$;

  dynamic $accuracy;

  Future<dynamic> get accuracy async {
    return await $$context$$?.getPropertyValue('accuracy') ?? $accuracy;
  }

  num $direction = 0;

  Future<num> get direction async {
    return await $$context$$?.getPropertyValue('direction') ?? $direction;
  }

  OnCompassChangeListenerResult({this.$$context$$});

  void setValues({dynamic accuracy, num? direction}) {
    if (accuracy != null) $accuracy = accuracy;
    if (direction != null) $direction = direction;
  }

  Map toJson() {
    return {'accuracy': $accuracy, 'direction': $direction}
      ..removeWhere((key, value) => value == null);
  }
}

class OnCopyUrlListenerResult {
  mpjs.JsObject? $$context$$;

  String $query = "";

  Future<String> get query async {
    return await $$context$$?.getPropertyValue('query') ?? $query;
  }

  OnCopyUrlListenerResult({this.$$context$$});

  void setValues({String? query}) {
    if (query != null) $query = query;
  }

  Map toJson() {
    return {'query': $query}..removeWhere((key, value) => value == null);
  }
}

class OnCustomRendererEventCallbackResult {
  mpjs.JsObject? $$context$$;

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  OnCustomRendererEventCallbackResult({this.$$context$$});

  void setValues({num? height, num? width}) {
    if (height != null) $height = height;
    if (width != null) $width = width;
  }

  Map toJson() {
    return {'height': $height, 'width': $width}
      ..removeWhere((key, value) => value == null);
  }
}

class OnDeviceMotionChangeListenerResult {
  mpjs.JsObject? $$context$$;

  num $alpha = 0;

  Future<num> get alpha async {
    return await $$context$$?.getPropertyValue('alpha') ?? $alpha;
  }

  num $beta = 0;

  Future<num> get beta async {
    return await $$context$$?.getPropertyValue('beta') ?? $beta;
  }

  num $gamma = 0;

  Future<num> get gamma async {
    return await $$context$$?.getPropertyValue('gamma') ?? $gamma;
  }

  OnDeviceMotionChangeListenerResult({this.$$context$$});

  void setValues({num? alpha, num? beta, num? gamma}) {
    if (alpha != null) $alpha = alpha;
    if (beta != null) $beta = beta;
    if (gamma != null) $gamma = gamma;
  }

  Map toJson() {
    return {'alpha': $alpha, 'beta': $beta, 'gamma': $gamma}
      ..removeWhere((key, value) => value == null);
  }
}

class OnDiscoveredListenerResult {
  mpjs.JsObject? $$context$$;

  List<dynamic> $messages = <dynamic>[];

  Future<List<dynamic>> get messages async {
    return await $$context$$?.getPropertyValue('messages') ?? $messages;
  }

  List<dynamic> $techs = <dynamic>[];

  Future<List<dynamic>> get techs async {
    return await $$context$$?.getPropertyValue('techs') ?? $techs;
  }

  OnDiscoveredListenerResult({this.$$context$$});

  void setValues({List<dynamic>? messages, List<dynamic>? techs}) {
    if (messages != null) $messages = messages;
    if (techs != null) $techs = techs;
  }

  Map toJson() {
    return {'messages': $messages, 'techs': $techs}
      ..removeWhere((key, value) => value == null);
  }
}

class OnFrameRecordedListenerResult {
  mpjs.JsObject? $$context$$;

  ArrayBuffer $frameBuffer = ArrayBuffer();

  Future<ArrayBuffer> get frameBuffer async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('frameBuffer'));
  }

  bool $isLastFrame = false;

  Future<bool> get isLastFrame async {
    return await $$context$$?.getPropertyValue('isLastFrame') ?? $isLastFrame;
  }

  OnFrameRecordedListenerResult({this.$$context$$});

  void setValues({ArrayBuffer? frameBuffer, bool? isLastFrame}) {
    if (frameBuffer != null) $frameBuffer = frameBuffer;
    if (isLastFrame != null) $isLastFrame = isLastFrame;
  }

  Map toJson() {
    return {'frameBuffer': $frameBuffer, 'isLastFrame': $isLastFrame}
      ..removeWhere((key, value) => value == null);
  }
}

class OnGetWifiListListenerResult {
  mpjs.JsObject? $$context$$;

  List<WifiInfo> $wifiList = <WifiInfo>[];

  Future<List<WifiInfo>> get wifiList async {
    return ((await $$context$$?.getPropertyValue('wifiList')) as List)
        .map((it) => WifiInfo($$context$$: it))
        .toList();
  }

  OnGetWifiListListenerResult({this.$$context$$});

  void setValues({List<WifiInfo>? wifiList}) {
    if (wifiList != null) $wifiList = wifiList;
  }

  Map toJson() {
    return {'wifiList': $wifiList}..removeWhere((key, value) => value == null);
  }
}

class OnGyroscopeChangeListenerResult {
  mpjs.JsObject? $$context$$;

  num $x = 0;

  Future<num> get x async {
    return await $$context$$?.getPropertyValue('x') ?? $x;
  }

  num $y = 0;

  Future<num> get y async {
    return await $$context$$?.getPropertyValue('y') ?? $y;
  }

  num $z = 0;

  Future<num> get z async {
    return await $$context$$?.getPropertyValue('z') ?? $z;
  }

  OnGyroscopeChangeListenerResult({this.$$context$$});

  void setValues({num? x, num? y, num? z}) {
    if (x != null) $x = x;
    if (y != null) $y = y;
    if (z != null) $z = z;
  }

  Map toJson() {
    return {'x': $x, 'y': $y, 'z': $z}
      ..removeWhere((key, value) => value == null);
  }
}

class OnHCEMessageListenerResult {
  mpjs.JsObject? $$context$$;

  ArrayBuffer $data = ArrayBuffer();

  Future<ArrayBuffer> get data async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('data'));
  }

  dynamic $messageType;

  Future<dynamic> get messageType async {
    return await $$context$$?.getPropertyValue('messageType') ?? $messageType;
  }

  num $reason = 0;

  Future<num> get reason async {
    return await $$context$$?.getPropertyValue('reason') ?? $reason;
  }

  OnHCEMessageListenerResult({this.$$context$$});

  void setValues({ArrayBuffer? data, dynamic messageType, num? reason}) {
    if (data != null) $data = data;
    if (messageType != null) $messageType = messageType;
    if (reason != null) $reason = reason;
  }

  Map toJson() {
    return {'data': $data, 'messageType': $messageType, 'reason': $reason}
      ..removeWhere((key, value) => value == null);
  }
}

class OnHeadersReceivedListenerResult {
  mpjs.JsObject? $$context$$;

  IAnyObject $header = IAnyObject();

  Future<IAnyObject> get header async {
    return IAnyObject($$context$$: $$context$$?.getProperty('header'));
  }

  OnHeadersReceivedListenerResult({this.$$context$$});

  void setValues({IAnyObject? header}) {
    if (header != null) $header = header;
  }

  Map toJson() {
    return {'header': $header}..removeWhere((key, value) => value == null);
  }
}

class OnKeyboardHeightChangeListenerResult {
  mpjs.JsObject? $$context$$;

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  OnKeyboardHeightChangeListenerResult({this.$$context$$});

  void setValues({num? height}) {
    if (height != null) $height = height;
  }

  Map toJson() {
    return {'height': $height}..removeWhere((key, value) => value == null);
  }
}

class OnLazyLoadErrorListenerResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  List<dynamic> $subpackage = <dynamic>[];

  Future<List<dynamic>> get subpackage async {
    return await $$context$$?.getPropertyValue('subpackage') ?? $subpackage;
  }

  String $type = "";

  Future<String> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  OnLazyLoadErrorListenerResult({this.$$context$$});

  void setValues({String? errMsg, List<dynamic>? subpackage, String? type}) {
    if (errMsg != null) $errMsg = errMsg;
    if (subpackage != null) $subpackage = subpackage;
    if (type != null) $type = type;
  }

  Map toJson() {
    return {'errMsg': $errMsg, 'subpackage': $subpackage, 'type': $type}
      ..removeWhere((key, value) => value == null);
  }
}

class OnLocalServiceFoundListenerResult {
  mpjs.JsObject? $$context$$;

  String $ip = "";

  Future<String> get ip async {
    return await $$context$$?.getPropertyValue('ip') ?? $ip;
  }

  num $port = 0;

  Future<num> get port async {
    return await $$context$$?.getPropertyValue('port') ?? $port;
  }

  String $serviceName = "";

  Future<String> get serviceName async {
    return await $$context$$?.getPropertyValue('serviceName') ?? $serviceName;
  }

  String $serviceType = "";

  Future<String> get serviceType async {
    return await $$context$$?.getPropertyValue('serviceType') ?? $serviceType;
  }

  OnLocalServiceFoundListenerResult({this.$$context$$});

  void setValues(
      {String? ip, num? port, String? serviceName, String? serviceType}) {
    if (ip != null) $ip = ip;
    if (port != null) $port = port;
    if (serviceName != null) $serviceName = serviceName;
    if (serviceType != null) $serviceType = serviceType;
  }

  Map toJson() {
    return {
      'ip': $ip,
      'port': $port,
      'serviceName': $serviceName,
      'serviceType': $serviceType
    }..removeWhere((key, value) => value == null);
  }
}

class OnLocalServiceLostListenerResult {
  mpjs.JsObject? $$context$$;

  String $serviceName = "";

  Future<String> get serviceName async {
    return await $$context$$?.getPropertyValue('serviceName') ?? $serviceName;
  }

  String $serviceType = "";

  Future<String> get serviceType async {
    return await $$context$$?.getPropertyValue('serviceType') ?? $serviceType;
  }

  OnLocalServiceLostListenerResult({this.$$context$$});

  void setValues({String? serviceName, String? serviceType}) {
    if (serviceName != null) $serviceName = serviceName;
    if (serviceType != null) $serviceType = serviceType;
  }

  Map toJson() {
    return {'serviceName': $serviceName, 'serviceType': $serviceType}
      ..removeWhere((key, value) => value == null);
  }
}

class OnLocationChangeErrorListenerResult {
  mpjs.JsObject? $$context$$;

  num $errCode = 0;

  Future<num> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  OnLocationChangeErrorListenerResult({this.$$context$$});

  void setValues({num? errCode}) {
    if (errCode != null) $errCode = errCode;
  }

  Map toJson() {
    return {'errCode': $errCode}..removeWhere((key, value) => value == null);
  }
}

class OnLocationChangeListenerResult {
  mpjs.JsObject? $$context$$;

  num $accuracy = 0;

  Future<num> get accuracy async {
    return await $$context$$?.getPropertyValue('accuracy') ?? $accuracy;
  }

  num $altitude = 0;

  Future<num> get altitude async {
    return await $$context$$?.getPropertyValue('altitude') ?? $altitude;
  }

  num $horizontalAccuracy = 0;

  Future<num> get horizontalAccuracy async {
    return await $$context$$?.getPropertyValue('horizontalAccuracy') ??
        $horizontalAccuracy;
  }

  num $latitude = 0;

  Future<num> get latitude async {
    return await $$context$$?.getPropertyValue('latitude') ?? $latitude;
  }

  num $longitude = 0;

  Future<num> get longitude async {
    return await $$context$$?.getPropertyValue('longitude') ?? $longitude;
  }

  num $speed = 0;

  Future<num> get speed async {
    return await $$context$$?.getPropertyValue('speed') ?? $speed;
  }

  num $verticalAccuracy = 0;

  Future<num> get verticalAccuracy async {
    return await $$context$$?.getPropertyValue('verticalAccuracy') ??
        $verticalAccuracy;
  }

  OnLocationChangeListenerResult({this.$$context$$});

  void setValues(
      {num? accuracy,
      num? altitude,
      num? horizontalAccuracy,
      num? latitude,
      num? longitude,
      num? speed,
      num? verticalAccuracy}) {
    if (accuracy != null) $accuracy = accuracy;
    if (altitude != null) $altitude = altitude;
    if (horizontalAccuracy != null) $horizontalAccuracy = horizontalAccuracy;
    if (latitude != null) $latitude = latitude;
    if (longitude != null) $longitude = longitude;
    if (speed != null) $speed = speed;
    if (verticalAccuracy != null) $verticalAccuracy = verticalAccuracy;
  }

  Map toJson() {
    return {
      'accuracy': $accuracy,
      'altitude': $altitude,
      'horizontalAccuracy': $horizontalAccuracy,
      'latitude': $latitude,
      'longitude': $longitude,
      'speed': $speed,
      'verticalAccuracy': $verticalAccuracy
    }..removeWhere((key, value) => value == null);
  }
}

class OnMemoryWarningListenerResult {
  mpjs.JsObject? $$context$$;

  dynamic $level;

  Future<dynamic> get level async {
    return await $$context$$?.getPropertyValue('level') ?? $level;
  }

  OnMemoryWarningListenerResult({this.$$context$$});

  void setValues({dynamic level}) {
    if (level != null) $level = level;
  }

  Map toJson() {
    return {'level': $level}..removeWhere((key, value) => value == null);
  }
}

class OnNetworkStatusChangeListenerResult {
  mpjs.JsObject? $$context$$;

  bool $isConnected = false;

  Future<bool> get isConnected async {
    return await $$context$$?.getPropertyValue('isConnected') ?? $isConnected;
  }

  dynamic $networkType;

  Future<dynamic> get networkType async {
    return await $$context$$?.getPropertyValue('networkType') ?? $networkType;
  }

  OnNetworkStatusChangeListenerResult({this.$$context$$});

  void setValues({bool? isConnected, dynamic networkType}) {
    if (isConnected != null) $isConnected = isConnected;
    if (networkType != null) $networkType = networkType;
  }

  Map toJson() {
    return {'isConnected': $isConnected, 'networkType': $networkType}
      ..removeWhere((key, value) => value == null);
  }
}

class OnNetworkWeakChangeListenerResult {
  mpjs.JsObject? $$context$$;

  String $networkType = "";

  Future<String> get networkType async {
    return await $$context$$?.getPropertyValue('networkType') ?? $networkType;
  }

  bool $weakNet = false;

  Future<bool> get weakNet async {
    return await $$context$$?.getPropertyValue('weakNet') ?? $weakNet;
  }

  OnNetworkWeakChangeListenerResult({this.$$context$$});

  void setValues({String? networkType, bool? weakNet}) {
    if (networkType != null) $networkType = networkType;
    if (weakNet != null) $weakNet = weakNet;
  }

  Map toJson() {
    return {'networkType': $networkType, 'weakNet': $weakNet}
      ..removeWhere((key, value) => value == null);
  }
}

class OnOpenListenerResult {
  mpjs.JsObject? $$context$$;

  IAnyObject $header = IAnyObject();

  Future<IAnyObject> get header async {
    return IAnyObject($$context$$: $$context$$?.getProperty('header'));
  }

  SocketProfile $profile = SocketProfile();

  Future<SocketProfile> get profile async {
    return SocketProfile($$context$$: $$context$$?.getProperty('profile'));
  }

  OnOpenListenerResult({this.$$context$$});

  void setValues({IAnyObject? header, SocketProfile? profile}) {
    if (header != null) $header = header;
    if (profile != null) $profile = profile;
  }

  Map toJson() {
    return {'header': $header, 'profile': $profile}
      ..removeWhere((key, value) => value == null);
  }
}

class OnPageNotFoundListenerResult {
  mpjs.JsObject? $$context$$;

  bool $isEntryPage = false;

  Future<bool> get isEntryPage async {
    return await $$context$$?.getPropertyValue('isEntryPage') ?? $isEntryPage;
  }

  String $path = "";

  Future<String> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  IAnyObject $query = IAnyObject();

  Future<IAnyObject> get query async {
    return IAnyObject($$context$$: $$context$$?.getProperty('query'));
  }

  OnPageNotFoundListenerResult({this.$$context$$});

  void setValues({bool? isEntryPage, String? path, IAnyObject? query}) {
    if (isEntryPage != null) $isEntryPage = isEntryPage;
    if (path != null) $path = path;
    if (query != null) $query = query;
  }

  Map toJson() {
    return {'isEntryPage': $isEntryPage, 'path': $path, 'query': $query}
      ..removeWhere((key, value) => value == null);
  }
}

class OnScreenRecordingStateChangedListenerResult {
  mpjs.JsObject? $$context$$;

  dynamic $state;

  Future<dynamic> get state async {
    return await $$context$$?.getPropertyValue('state') ?? $state;
  }

  OnScreenRecordingStateChangedListenerResult({this.$$context$$});

  void setValues({dynamic state}) {
    if (state != null) $state = state;
  }

  Map toJson() {
    return {'state': $state}..removeWhere((key, value) => value == null);
  }
}

class OnSocketOpenListenerResult {
  mpjs.JsObject? $$context$$;

  IAnyObject $header = IAnyObject();

  Future<IAnyObject> get header async {
    return IAnyObject($$context$$: $$context$$?.getProperty('header'));
  }

  OnSocketOpenListenerResult({this.$$context$$});

  void setValues({IAnyObject? header}) {
    if (header != null) $header = header;
  }

  Map toJson() {
    return {'header': $header}..removeWhere((key, value) => value == null);
  }
}

class OnStopListenerResult {
  mpjs.JsObject? $$context$$;

  num $duration = 0;

  Future<num> get duration async {
    return await $$context$$?.getPropertyValue('duration') ?? $duration;
  }

  num $fileSize = 0;

  Future<num> get fileSize async {
    return await $$context$$?.getPropertyValue('fileSize') ?? $fileSize;
  }

  String $tempFilePath = "";

  Future<String> get tempFilePath async {
    return await $$context$$?.getPropertyValue('tempFilePath') ?? $tempFilePath;
  }

  OnStopListenerResult({this.$$context$$});

  void setValues({num? duration, num? fileSize, String? tempFilePath}) {
    if (duration != null) $duration = duration;
    if (fileSize != null) $fileSize = fileSize;
    if (tempFilePath != null) $tempFilePath = tempFilePath;
  }

  Map toJson() {
    return {
      'duration': $duration,
      'fileSize': $fileSize,
      'tempFilePath': $tempFilePath
    }..removeWhere((key, value) => value == null);
  }
}

class OnThemeChangeListenerResult {
  mpjs.JsObject? $$context$$;

  dynamic $theme;

  Future<dynamic> get theme async {
    return await $$context$$?.getPropertyValue('theme') ?? $theme;
  }

  OnThemeChangeListenerResult({this.$$context$$});

  void setValues({dynamic theme}) {
    if (theme != null) $theme = theme;
  }

  Map toJson() {
    return {'theme': $theme}..removeWhere((key, value) => value == null);
  }
}

class OnUnhandledRejectionListenerResult {
  mpjs.JsObject? $$context$$;

  // Promise<dynamic> $promise = Promise();

  // Future<Promise<dynamic>> get promise async {
  //   return $promise;
  // }

  String $reason = "";

  Future<String> get reason async {
    return await $$context$$?.getPropertyValue('reason') ?? $reason;
  }

  OnUnhandledRejectionListenerResult({this.$$context$$});

  void setValues({String? reason}) {
    // if (promise != null) $promise = promise;
    if (reason != null) $reason = reason;
  }

  Map toJson() {
    return {'reason': $reason}..removeWhere((key, value) => value == null);
  }
}

class OnVoIPChatInterruptedListenerResult {
  mpjs.JsObject? $$context$$;

  num $errCode = 0;

  Future<num> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  OnVoIPChatInterruptedListenerResult({this.$$context$$});

  void setValues({num? errCode, String? errMsg}) {
    if (errCode != null) $errCode = errCode;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errCode': $errCode, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class OnVoIPChatMembersChangedListenerResult {
  mpjs.JsObject? $$context$$;

  num $errCode = 0;

  Future<num> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  List<String> $openIdList = <String>[];

  Future<List<String>> get openIdList async {
    return await $$context$$?.getPropertyValue('openIdList') ?? $openIdList;
  }

  OnVoIPChatMembersChangedListenerResult({this.$$context$$});

  void setValues({num? errCode, String? errMsg, List<String>? openIdList}) {
    if (errCode != null) $errCode = errCode;
    if (errMsg != null) $errMsg = errMsg;
    if (openIdList != null) $openIdList = openIdList;
  }

  Map toJson() {
    return {'errCode': $errCode, 'errMsg': $errMsg, 'openIdList': $openIdList}
      ..removeWhere((key, value) => value == null);
  }
}

class OnVoIPChatSpeakersChangedListenerResult {
  mpjs.JsObject? $$context$$;

  num $errCode = 0;

  Future<num> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  List<String> $openIdList = <String>[];

  Future<List<String>> get openIdList async {
    return await $$context$$?.getPropertyValue('openIdList') ?? $openIdList;
  }

  OnVoIPChatSpeakersChangedListenerResult({this.$$context$$});

  void setValues({num? errCode, String? errMsg, List<String>? openIdList}) {
    if (errCode != null) $errCode = errCode;
    if (errMsg != null) $errMsg = errMsg;
    if (openIdList != null) $openIdList = openIdList;
  }

  Map toJson() {
    return {'errCode': $errCode, 'errMsg': $errMsg, 'openIdList': $openIdList}
      ..removeWhere((key, value) => value == null);
  }
}

class OnVoIPChatStateChangedListenerResult {
  mpjs.JsObject? $$context$$;

  num $code = 0;

  Future<num> get code async {
    return await $$context$$?.getPropertyValue('code') ?? $code;
  }

  IAnyObject $data = IAnyObject();

  Future<IAnyObject> get data async {
    return IAnyObject($$context$$: $$context$$?.getProperty('data'));
  }

  num $errCode = 0;

  Future<num> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  OnVoIPChatStateChangedListenerResult({this.$$context$$});

  void setValues({num? code, IAnyObject? data, num? errCode, String? errMsg}) {
    if (code != null) $code = code;
    if (data != null) $data = data;
    if (errCode != null) $errCode = errCode;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'code': $code,
      'data': $data,
      'errCode': $errCode,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class OnVoIPVideoMembersChangedListenerResult {
  mpjs.JsObject? $$context$$;

  num $errCode = 0;

  Future<num> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  List<String> $openIdList = <String>[];

  Future<List<String>> get openIdList async {
    return await $$context$$?.getPropertyValue('openIdList') ?? $openIdList;
  }

  OnVoIPVideoMembersChangedListenerResult({this.$$context$$});

  void setValues({num? errCode, String? errMsg, List<String>? openIdList}) {
    if (errCode != null) $errCode = errCode;
    if (errMsg != null) $errMsg = errMsg;
    if (openIdList != null) $openIdList = openIdList;
  }

  Map toJson() {
    return {'errCode': $errCode, 'errMsg': $errMsg, 'openIdList': $openIdList}
      ..removeWhere((key, value) => value == null);
  }
}

class OnWifiConnectedListenerResult {
  mpjs.JsObject? $$context$$;

  WifiInfo $wifi = WifiInfo();

  Future<WifiInfo> get wifi async {
    return WifiInfo($$context$$: $$context$$?.getProperty('wifi'));
  }

  OnWifiConnectedListenerResult({this.$$context$$});

  void setValues({WifiInfo? wifi}) {
    if (wifi != null) $wifi = wifi;
  }

  Map toJson() {
    return {'wifi': $wifi}..removeWhere((key, value) => value == null);
  }
}

class OnWifiConnectedWithPartialInfoListenerResult {
  mpjs.JsObject? $$context$$;

  WifiInfo $wifi = WifiInfo();

  Future<WifiInfo> get wifi async {
    return WifiInfo($$context$$: $$context$$?.getProperty('wifi'));
  }

  OnWifiConnectedWithPartialInfoListenerResult({this.$$context$$});

  void setValues({WifiInfo? wifi}) {
    if (wifi != null) $wifi = wifi;
  }

  Map toJson() {
    return {'wifi': $wifi}..removeWhere((key, value) => value == null);
  }
}

class OnWindowResizeListenerResult {
  mpjs.JsObject? $$context$$;

  Size $size = Size();

  Future<Size> get size async {
    return Size($$context$$: $$context$$?.getProperty('size'));
  }

  OnWindowResizeListenerResult({this.$$context$$});

  void setValues({Size? size}) {
    if (size != null) $size = size;
  }

  Map toJson() {
    return {'size': $size}..removeWhere((key, value) => value == null);
  }
}

class OpenAppAuthorizeSettingOption {
  mpjs.JsObject? $$context$$;

  OpenAppAuthorizeSettingCompleteCallback? $complete;

  Future<OpenAppAuthorizeSettingCompleteCallback?> get complete async {
    return $complete;
  }

  OpenAppAuthorizeSettingFailCallback? $fail;

  Future<OpenAppAuthorizeSettingFailCallback?> get fail async {
    return $fail;
  }

  OpenAppAuthorizeSettingSuccessCallback? $success;

  Future<OpenAppAuthorizeSettingSuccessCallback?> get success async {
    return $success;
  }

  OpenAppAuthorizeSettingOption({this.$$context$$});

  void setValues(
      {OpenAppAuthorizeSettingCompleteCallback? complete,
      OpenAppAuthorizeSettingFailCallback? fail,
      OpenAppAuthorizeSettingSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class OpenBluetoothAdapterOption {
  mpjs.JsObject? $$context$$;

  OpenBluetoothAdapterCompleteCallback? $complete;

  Future<OpenBluetoothAdapterCompleteCallback?> get complete async {
    return $complete;
  }

  OpenBluetoothAdapterFailCallback? $fail;

  Future<OpenBluetoothAdapterFailCallback?> get fail async {
    return $fail;
  }

  dynamic $mode;

  Future<dynamic> get mode async {
    return await $$context$$?.getPropertyValue('mode') ?? $mode;
  }

  OpenBluetoothAdapterSuccessCallback? $success;

  Future<OpenBluetoothAdapterSuccessCallback?> get success async {
    return $success;
  }

  OpenBluetoothAdapterOption({this.$$context$$});

  void setValues(
      {OpenBluetoothAdapterCompleteCallback? complete,
      OpenBluetoothAdapterFailCallback? fail,
      dynamic mode,
      OpenBluetoothAdapterSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (mode != null) $mode = mode;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'mode': $mode,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => BluetoothError($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class OpenCardOption {
  mpjs.JsObject? $$context$$;

  List<OpenCardRequestInfo> $cardList = <OpenCardRequestInfo>[];

  Future<List<OpenCardRequestInfo>> get cardList async {
    return ((await $$context$$?.getPropertyValue('cardList')) as List)
        .map((it) => OpenCardRequestInfo($$context$$: it))
        .toList();
  }

  OpenCardCompleteCallback? $complete;

  Future<OpenCardCompleteCallback?> get complete async {
    return $complete;
  }

  OpenCardFailCallback? $fail;

  Future<OpenCardFailCallback?> get fail async {
    return $fail;
  }

  OpenCardSuccessCallback? $success;

  Future<OpenCardSuccessCallback?> get success async {
    return $success;
  }

  OpenCardOption({this.$$context$$});

  void setValues(
      {List<OpenCardRequestInfo>? cardList,
      OpenCardCompleteCallback? complete,
      OpenCardFailCallback? fail,
      OpenCardSuccessCallback? success}) {
    if (cardList != null) $cardList = cardList;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'cardList': $cardList,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class OpenCardRequestInfo {
  mpjs.JsObject? $$context$$;

  String $cardId = "";

  Future<String> get cardId async {
    return await $$context$$?.getPropertyValue('cardId') ?? $cardId;
  }

  String $code = "";

  Future<String> get code async {
    return await $$context$$?.getPropertyValue('code') ?? $code;
  }

  OpenCardRequestInfo({this.$$context$$});

  void setValues({String? cardId, String? code}) {
    if (cardId != null) $cardId = cardId;
    if (code != null) $code = code;
  }

  Map toJson() {
    return {'cardId': $cardId, 'code': $code}
      ..removeWhere((key, value) => value == null);
  }
}

class OpenChannelsActivityOption {
  mpjs.JsObject? $$context$$;

  String $feedId = "";

  Future<String> get feedId async {
    return await $$context$$?.getPropertyValue('feedId') ?? $feedId;
  }

  String $finderUserName = "";

  Future<String> get finderUserName async {
    return await $$context$$?.getPropertyValue('finderUserName') ??
        $finderUserName;
  }

  OpenChannelsActivityCompleteCallback? $complete;

  Future<OpenChannelsActivityCompleteCallback?> get complete async {
    return $complete;
  }

  OpenChannelsActivityFailCallback? $fail;

  Future<OpenChannelsActivityFailCallback?> get fail async {
    return $fail;
  }

  OpenChannelsActivitySuccessCallback? $success;

  Future<OpenChannelsActivitySuccessCallback?> get success async {
    return $success;
  }

  OpenChannelsActivityOption({this.$$context$$});

  void setValues(
      {String? feedId,
      String? finderUserName,
      OpenChannelsActivityCompleteCallback? complete,
      OpenChannelsActivityFailCallback? fail,
      OpenChannelsActivitySuccessCallback? success}) {
    if (feedId != null) $feedId = feedId;
    if (finderUserName != null) $finderUserName = finderUserName;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'feedId': $feedId,
      'finderUserName': $finderUserName,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class OpenChannelsEventOption {
  mpjs.JsObject? $$context$$;

  String $eventId = "";

  Future<String> get eventId async {
    return await $$context$$?.getPropertyValue('eventId') ?? $eventId;
  }

  String $finderUserName = "";

  Future<String> get finderUserName async {
    return await $$context$$?.getPropertyValue('finderUserName') ??
        $finderUserName;
  }

  OpenChannelsEventCompleteCallback? $complete;

  Future<OpenChannelsEventCompleteCallback?> get complete async {
    return $complete;
  }

  OpenChannelsEventFailCallback? $fail;

  Future<OpenChannelsEventFailCallback?> get fail async {
    return $fail;
  }

  OpenChannelsEventSuccessCallback? $success;

  Future<OpenChannelsEventSuccessCallback?> get success async {
    return $success;
  }

  OpenChannelsEventOption({this.$$context$$});

  void setValues(
      {String? eventId,
      String? finderUserName,
      OpenChannelsEventCompleteCallback? complete,
      OpenChannelsEventFailCallback? fail,
      OpenChannelsEventSuccessCallback? success}) {
    if (eventId != null) $eventId = eventId;
    if (finderUserName != null) $finderUserName = finderUserName;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'eventId': $eventId,
      'finderUserName': $finderUserName,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class OpenChannelsLiveOption {
  mpjs.JsObject? $$context$$;

  String $finderUserName = "";

  Future<String> get finderUserName async {
    return await $$context$$?.getPropertyValue('finderUserName') ??
        $finderUserName;
  }

  OpenChannelsLiveCompleteCallback? $complete;

  Future<OpenChannelsLiveCompleteCallback?> get complete async {
    return $complete;
  }

  OpenChannelsLiveFailCallback? $fail;

  Future<OpenChannelsLiveFailCallback?> get fail async {
    return $fail;
  }

  String? $feedId;

  Future<String?> get feedId async {
    return await $$context$$?.getPropertyValue('feedId') ?? $feedId;
  }

  String? $nonceId;

  Future<String?> get nonceId async {
    return await $$context$$?.getPropertyValue('nonceId') ?? $nonceId;
  }

  OpenChannelsLiveSuccessCallback? $success;

  Future<OpenChannelsLiveSuccessCallback?> get success async {
    return $success;
  }

  OpenChannelsLiveOption({this.$$context$$});

  void setValues(
      {String? finderUserName,
      OpenChannelsLiveCompleteCallback? complete,
      OpenChannelsLiveFailCallback? fail,
      String? feedId,
      String? nonceId,
      OpenChannelsLiveSuccessCallback? success}) {
    if (finderUserName != null) $finderUserName = finderUserName;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (feedId != null) $feedId = feedId;
    if (nonceId != null) $nonceId = nonceId;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'finderUserName': $finderUserName,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'feedId': $feedId,
      'nonceId': $nonceId,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class OpenChannelsUserProfileOption {
  mpjs.JsObject? $$context$$;

  String $finderUserName = "";

  Future<String> get finderUserName async {
    return await $$context$$?.getPropertyValue('finderUserName') ??
        $finderUserName;
  }

  OpenChannelsUserProfileCompleteCallback? $complete;

  Future<OpenChannelsUserProfileCompleteCallback?> get complete async {
    return $complete;
  }

  OpenChannelsUserProfileFailCallback? $fail;

  Future<OpenChannelsUserProfileFailCallback?> get fail async {
    return $fail;
  }

  OpenChannelsUserProfileSuccessCallback? $success;

  Future<OpenChannelsUserProfileSuccessCallback?> get success async {
    return $success;
  }

  OpenChannelsUserProfileOption({this.$$context$$});

  void setValues(
      {String? finderUserName,
      OpenChannelsUserProfileCompleteCallback? complete,
      OpenChannelsUserProfileFailCallback? fail,
      OpenChannelsUserProfileSuccessCallback? success}) {
    if (finderUserName != null) $finderUserName = finderUserName;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'finderUserName': $finderUserName,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class OpenCustomerServiceChatOption {
  mpjs.JsObject? $$context$$;

  String $corpId = "";

  Future<String> get corpId async {
    return await $$context$$?.getPropertyValue('corpId') ?? $corpId;
  }

  ExtInfoOption $extInfo = ExtInfoOption();

  Future<ExtInfoOption> get extInfo async {
    return ExtInfoOption($$context$$: $$context$$?.getProperty('extInfo'));
  }

  OpenCustomerServiceChatCompleteCallback? $complete;

  Future<OpenCustomerServiceChatCompleteCallback?> get complete async {
    return $complete;
  }

  OpenCustomerServiceChatFailCallback? $fail;

  Future<OpenCustomerServiceChatFailCallback?> get fail async {
    return $fail;
  }

  String? $sendMessageImg;

  Future<String?> get sendMessageImg async {
    return await $$context$$?.getPropertyValue('sendMessageImg') ??
        $sendMessageImg;
  }

  String? $sendMessagePath;

  Future<String?> get sendMessagePath async {
    return await $$context$$?.getPropertyValue('sendMessagePath') ??
        $sendMessagePath;
  }

  String? $sendMessageTitle;

  Future<String?> get sendMessageTitle async {
    return await $$context$$?.getPropertyValue('sendMessageTitle') ??
        $sendMessageTitle;
  }

  bool? $showMessageCard;

  Future<bool?> get showMessageCard async {
    return await $$context$$?.getPropertyValue('showMessageCard') ??
        $showMessageCard;
  }

  OpenCustomerServiceChatSuccessCallback? $success;

  Future<OpenCustomerServiceChatSuccessCallback?> get success async {
    return $success;
  }

  OpenCustomerServiceChatOption({this.$$context$$});

  void setValues(
      {String? corpId,
      ExtInfoOption? extInfo,
      OpenCustomerServiceChatCompleteCallback? complete,
      OpenCustomerServiceChatFailCallback? fail,
      String? sendMessageImg,
      String? sendMessagePath,
      String? sendMessageTitle,
      bool? showMessageCard,
      OpenCustomerServiceChatSuccessCallback? success}) {
    if (corpId != null) $corpId = corpId;
    if (extInfo != null) $extInfo = extInfo;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (sendMessageImg != null) $sendMessageImg = sendMessageImg;
    if (sendMessagePath != null) $sendMessagePath = sendMessagePath;
    if (sendMessageTitle != null) $sendMessageTitle = sendMessageTitle;
    if (showMessageCard != null) $showMessageCard = showMessageCard;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'corpId': $corpId,
      'extInfo': $extInfo,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'sendMessageImg': $sendMessageImg,
      'sendMessagePath': $sendMessagePath,
      'sendMessageTitle': $sendMessageTitle,
      'showMessageCard': $showMessageCard,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class OpenDocumentOption {
  mpjs.JsObject? $$context$$;

  String $filePath = "";

  Future<String> get filePath async {
    return await $$context$$?.getPropertyValue('filePath') ?? $filePath;
  }

  OpenDocumentCompleteCallback? $complete;

  Future<OpenDocumentCompleteCallback?> get complete async {
    return $complete;
  }

  OpenDocumentFailCallback? $fail;

  Future<OpenDocumentFailCallback?> get fail async {
    return $fail;
  }

  dynamic $fileType;

  Future<dynamic> get fileType async {
    return await $$context$$?.getPropertyValue('fileType') ?? $fileType;
  }

  bool? $showMenu;

  Future<bool?> get showMenu async {
    return await $$context$$?.getPropertyValue('showMenu') ?? $showMenu;
  }

  OpenDocumentSuccessCallback? $success;

  Future<OpenDocumentSuccessCallback?> get success async {
    return $success;
  }

  OpenDocumentOption({this.$$context$$});

  void setValues(
      {String? filePath,
      OpenDocumentCompleteCallback? complete,
      OpenDocumentFailCallback? fail,
      dynamic fileType,
      bool? showMenu,
      OpenDocumentSuccessCallback? success}) {
    if (filePath != null) $filePath = filePath;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (fileType != null) $fileType = fileType;
    if (showMenu != null) $showMenu = showMenu;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'filePath': $filePath,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fileType': $fileType,
      'showMenu': $showMenu,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class OpenEmbeddedMiniProgramOption {
  mpjs.JsObject? $$context$$;

  String $appId = "";

  Future<String> get appId async {
    return await $$context$$?.getPropertyValue('appId') ?? $appId;
  }

  OpenEmbeddedMiniProgramCompleteCallback? $complete;

  Future<OpenEmbeddedMiniProgramCompleteCallback?> get complete async {
    return $complete;
  }

  dynamic $envVersion;

  Future<dynamic> get envVersion async {
    return await $$context$$?.getPropertyValue('envVersion') ?? $envVersion;
  }

  IAnyObject? $extraData;

  Future<IAnyObject?> get extraData async {
    return IAnyObject($$context$$: $$context$$?.getProperty('extraData'));
  }

  OpenEmbeddedMiniProgramFailCallback? $fail;

  Future<OpenEmbeddedMiniProgramFailCallback?> get fail async {
    return $fail;
  }

  bool? $noRelaunchIfPathUnchanged;

  Future<bool?> get noRelaunchIfPathUnchanged async {
    return await $$context$$?.getPropertyValue('noRelaunchIfPathUnchanged') ??
        $noRelaunchIfPathUnchanged;
  }

  String? $path;

  Future<String?> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  String? $shortLink;

  Future<String?> get shortLink async {
    return await $$context$$?.getPropertyValue('shortLink') ?? $shortLink;
  }

  OpenEmbeddedMiniProgramSuccessCallback? $success;

  Future<OpenEmbeddedMiniProgramSuccessCallback?> get success async {
    return $success;
  }

  dynamic $verify;

  Future<dynamic> get verify async {
    return await $$context$$?.getPropertyValue('verify') ?? $verify;
  }

  OpenEmbeddedMiniProgramOption({this.$$context$$});

  void setValues(
      {String? appId,
      OpenEmbeddedMiniProgramCompleteCallback? complete,
      dynamic envVersion,
      IAnyObject? extraData,
      OpenEmbeddedMiniProgramFailCallback? fail,
      bool? noRelaunchIfPathUnchanged,
      String? path,
      String? shortLink,
      OpenEmbeddedMiniProgramSuccessCallback? success,
      dynamic verify}) {
    if (appId != null) $appId = appId;
    if (complete != null) $complete = complete;
    if (envVersion != null) $envVersion = envVersion;
    if (extraData != null) $extraData = extraData;
    if (fail != null) $fail = fail;
    if (noRelaunchIfPathUnchanged != null)
      $noRelaunchIfPathUnchanged = noRelaunchIfPathUnchanged;
    if (path != null) $path = path;
    if (shortLink != null) $shortLink = shortLink;
    if (success != null) $success = success;
    if (verify != null) $verify = verify;
  }

  Map toJson() {
    return {
      'appId': $appId,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'envVersion': $envVersion,
      'extraData': $extraData,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'noRelaunchIfPathUnchanged': $noRelaunchIfPathUnchanged,
      'path': $path,
      'shortLink': $shortLink,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'verify': $verify
    }..removeWhere((key, value) => value == null);
  }
}

class OpenFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  OpenFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class OpenLocationOption {
  mpjs.JsObject? $$context$$;

  num $latitude = 0;

  Future<num> get latitude async {
    return await $$context$$?.getPropertyValue('latitude') ?? $latitude;
  }

  num $longitude = 0;

  Future<num> get longitude async {
    return await $$context$$?.getPropertyValue('longitude') ?? $longitude;
  }

  String? $address;

  Future<String?> get address async {
    return await $$context$$?.getPropertyValue('address') ?? $address;
  }

  OpenLocationCompleteCallback? $complete;

  Future<OpenLocationCompleteCallback?> get complete async {
    return $complete;
  }

  OpenLocationFailCallback? $fail;

  Future<OpenLocationFailCallback?> get fail async {
    return $fail;
  }

  String? $name;

  Future<String?> get name async {
    return await $$context$$?.getPropertyValue('name') ?? $name;
  }

  num? $scale;

  Future<num?> get scale async {
    return await $$context$$?.getPropertyValue('scale') ?? $scale;
  }

  OpenLocationSuccessCallback? $success;

  Future<OpenLocationSuccessCallback?> get success async {
    return $success;
  }

  OpenLocationOption({this.$$context$$});

  void setValues(
      {num? latitude,
      num? longitude,
      String? address,
      OpenLocationCompleteCallback? complete,
      OpenLocationFailCallback? fail,
      String? name,
      num? scale,
      OpenLocationSuccessCallback? success}) {
    if (latitude != null) $latitude = latitude;
    if (longitude != null) $longitude = longitude;
    if (address != null) $address = address;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (name != null) $name = name;
    if (scale != null) $scale = scale;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'latitude': $latitude,
      'longitude': $longitude,
      'address': $address,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'name': $name,
      'scale': $scale,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class OpenMapAppOption {
  mpjs.JsObject? $$context$$;

  String $destination = "";

  Future<String> get destination async {
    return await $$context$$?.getPropertyValue('destination') ?? $destination;
  }

  num $latitude = 0;

  Future<num> get latitude async {
    return await $$context$$?.getPropertyValue('latitude') ?? $latitude;
  }

  num $longitude = 0;

  Future<num> get longitude async {
    return await $$context$$?.getPropertyValue('longitude') ?? $longitude;
  }

  OpenMapAppCompleteCallback? $complete;

  Future<OpenMapAppCompleteCallback?> get complete async {
    return $complete;
  }

  OpenMapAppFailCallback? $fail;

  Future<OpenMapAppFailCallback?> get fail async {
    return $fail;
  }

  OpenMapAppSuccessCallback? $success;

  Future<OpenMapAppSuccessCallback?> get success async {
    return $success;
  }

  OpenMapAppOption({this.$$context$$});

  void setValues(
      {String? destination,
      num? latitude,
      num? longitude,
      OpenMapAppCompleteCallback? complete,
      OpenMapAppFailCallback? fail,
      OpenMapAppSuccessCallback? success}) {
    if (destination != null) $destination = destination;
    if (latitude != null) $latitude = latitude;
    if (longitude != null) $longitude = longitude;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'destination': $destination,
      'latitude': $latitude,
      'longitude': $longitude,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class OpenOption {
  mpjs.JsObject? $$context$$;

  String $filePath = "";

  Future<String> get filePath async {
    return await $$context$$?.getPropertyValue('filePath') ?? $filePath;
  }

  OpenCompleteCallback? $complete;

  Future<OpenCompleteCallback?> get complete async {
    return $complete;
  }

  OpenFailCallback? $fail;

  Future<OpenFailCallback?> get fail async {
    return $fail;
  }

  dynamic $flag;

  Future<dynamic> get flag async {
    return await $$context$$?.getPropertyValue('flag') ?? $flag;
  }

  OpenSuccessCallback? $success;

  Future<OpenSuccessCallback?> get success async {
    return $success;
  }

  OpenOption({this.$$context$$});

  void setValues(
      {String? filePath,
      OpenCompleteCallback? complete,
      OpenFailCallback? fail,
      dynamic flag,
      OpenSuccessCallback? success}) {
    if (filePath != null) $filePath = filePath;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (flag != null) $flag = flag;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'filePath': $filePath,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => OpenFailCallbackResult($$context$$: e)])
          : null,
      'flag': $flag,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => OpenSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class OpenSettingOption {
  mpjs.JsObject? $$context$$;

  OpenSettingCompleteCallback? $complete;

  Future<OpenSettingCompleteCallback?> get complete async {
    return $complete;
  }

  OpenSettingFailCallback? $fail;

  Future<OpenSettingFailCallback?> get fail async {
    return $fail;
  }

  OpenSettingSuccessCallback? $success;

  Future<OpenSettingSuccessCallback?> get success async {
    return $success;
  }

  bool? $withSubscriptions;

  Future<bool?> get withSubscriptions async {
    return await $$context$$?.getPropertyValue('withSubscriptions') ??
        $withSubscriptions;
  }

  OpenSettingOption({this.$$context$$});

  void setValues(
      {OpenSettingCompleteCallback? complete,
      OpenSettingFailCallback? fail,
      OpenSettingSuccessCallback? success,
      bool? withSubscriptions}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
    if (withSubscriptions != null) $withSubscriptions = withSubscriptions;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => OpenSettingSuccessCallbackResult($$context$$: e)])
          : null,
      'withSubscriptions': $withSubscriptions
    }..removeWhere((key, value) => value == null);
  }
}

class OpenSettingSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  AuthSetting $authSetting = AuthSetting();

  Future<AuthSetting> get authSetting async {
    return AuthSetting($$context$$: $$context$$?.getProperty('authSetting'));
  }

  SubscriptionsSetting $subscriptionsSetting = SubscriptionsSetting();

  Future<SubscriptionsSetting> get subscriptionsSetting async {
    return SubscriptionsSetting(
        $$context$$: $$context$$?.getProperty('subscriptionsSetting'));
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  OpenSettingSuccessCallbackResult({this.$$context$$});

  void setValues(
      {AuthSetting? authSetting,
      SubscriptionsSetting? subscriptionsSetting,
      String? errMsg}) {
    if (authSetting != null) $authSetting = authSetting;
    if (subscriptionsSetting != null)
      $subscriptionsSetting = subscriptionsSetting;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'authSetting': $authSetting,
      'subscriptionsSetting': $subscriptionsSetting,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class OpenSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $fd = "";

  Future<String> get fd async {
    return await $$context$$?.getPropertyValue('fd') ?? $fd;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  OpenSuccessCallbackResult({this.$$context$$});

  void setValues({String? fd, String? errMsg}) {
    if (fd != null) $fd = fd;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'fd': $fd, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class OpenSyncOption {
  mpjs.JsObject? $$context$$;

  String $filePath = "";

  Future<String> get filePath async {
    return await $$context$$?.getPropertyValue('filePath') ?? $filePath;
  }

  dynamic $flag;

  Future<dynamic> get flag async {
    return await $$context$$?.getPropertyValue('flag') ?? $flag;
  }

  OpenSyncOption({this.$$context$$});

  void setValues({String? filePath, dynamic flag}) {
    if (filePath != null) $filePath = filePath;
    if (flag != null) $flag = flag;
  }

  Map toJson() {
    return {'filePath': $filePath, 'flag': $flag}
      ..removeWhere((key, value) => value == null);
  }
}

class OpenSystemBluetoothSettingOption {
  mpjs.JsObject? $$context$$;

  OpenSystemBluetoothSettingCompleteCallback? $complete;

  Future<OpenSystemBluetoothSettingCompleteCallback?> get complete async {
    return $complete;
  }

  OpenSystemBluetoothSettingFailCallback? $fail;

  Future<OpenSystemBluetoothSettingFailCallback?> get fail async {
    return $fail;
  }

  OpenSystemBluetoothSettingSuccessCallback? $success;

  Future<OpenSystemBluetoothSettingSuccessCallback?> get success async {
    return $success;
  }

  OpenSystemBluetoothSettingOption({this.$$context$$});

  void setValues(
      {OpenSystemBluetoothSettingCompleteCallback? complete,
      OpenSystemBluetoothSettingFailCallback? fail,
      OpenSystemBluetoothSettingSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class OpenVideoEditorOption {
  mpjs.JsObject? $$context$$;

  String $filePath = "";

  Future<String> get filePath async {
    return await $$context$$?.getPropertyValue('filePath') ?? $filePath;
  }

  String $maxDuration = "";

  Future<String> get maxDuration async {
    return await $$context$$?.getPropertyValue('maxDuration') ?? $maxDuration;
  }

  String $minDuration = "";

  Future<String> get minDuration async {
    return await $$context$$?.getPropertyValue('minDuration') ?? $minDuration;
  }

  OpenVideoEditorCompleteCallback? $complete;

  Future<OpenVideoEditorCompleteCallback?> get complete async {
    return $complete;
  }

  OpenVideoEditorFailCallback? $fail;

  Future<OpenVideoEditorFailCallback?> get fail async {
    return $fail;
  }

  OpenVideoEditorSuccessCallback? $success;

  Future<OpenVideoEditorSuccessCallback?> get success async {
    return $success;
  }

  OpenVideoEditorOption({this.$$context$$});

  void setValues(
      {String? filePath,
      String? maxDuration,
      String? minDuration,
      OpenVideoEditorCompleteCallback? complete,
      OpenVideoEditorFailCallback? fail,
      OpenVideoEditorSuccessCallback? success}) {
    if (filePath != null) $filePath = filePath;
    if (maxDuration != null) $maxDuration = maxDuration;
    if (minDuration != null) $minDuration = minDuration;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'filePath': $filePath,
      'maxDuration': $maxDuration,
      'minDuration': $minDuration,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => OpenVideoEditorSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class OpenVideoEditorSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  num $duration = 0;

  Future<num> get duration async {
    return await $$context$$?.getPropertyValue('duration') ?? $duration;
  }

  num $size = 0;

  Future<num> get size async {
    return await $$context$$?.getPropertyValue('size') ?? $size;
  }

  String $tempFilePath = "";

  Future<String> get tempFilePath async {
    return await $$context$$?.getPropertyValue('tempFilePath') ?? $tempFilePath;
  }

  String $tempThumbPath = "";

  Future<String> get tempThumbPath async {
    return await $$context$$?.getPropertyValue('tempThumbPath') ??
        $tempThumbPath;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  OpenVideoEditorSuccessCallbackResult({this.$$context$$});

  void setValues(
      {num? duration,
      num? size,
      String? tempFilePath,
      String? tempThumbPath,
      String? errMsg}) {
    if (duration != null) $duration = duration;
    if (size != null) $size = size;
    if (tempFilePath != null) $tempFilePath = tempFilePath;
    if (tempThumbPath != null) $tempThumbPath = tempThumbPath;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'duration': $duration,
      'size': $size,
      'tempFilePath': $tempFilePath,
      'tempThumbPath': $tempThumbPath,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class PageScrollToOption {
  mpjs.JsObject? $$context$$;

  PageScrollToCompleteCallback? $complete;

  Future<PageScrollToCompleteCallback?> get complete async {
    return $complete;
  }

  num? $duration;

  Future<num?> get duration async {
    return await $$context$$?.getPropertyValue('duration') ?? $duration;
  }

  PageScrollToFailCallback? $fail;

  Future<PageScrollToFailCallback?> get fail async {
    return $fail;
  }

  num? $offsetTop;

  Future<num?> get offsetTop async {
    return await $$context$$?.getPropertyValue('offsetTop') ?? $offsetTop;
  }

  num? $scrollTop;

  Future<num?> get scrollTop async {
    return await $$context$$?.getPropertyValue('scrollTop') ?? $scrollTop;
  }

  String? $selector;

  Future<String?> get selector async {
    return await $$context$$?.getPropertyValue('selector') ?? $selector;
  }

  PageScrollToSuccessCallback? $success;

  Future<PageScrollToSuccessCallback?> get success async {
    return $success;
  }

  PageScrollToOption({this.$$context$$});

  void setValues(
      {PageScrollToCompleteCallback? complete,
      num? duration,
      PageScrollToFailCallback? fail,
      num? offsetTop,
      num? scrollTop,
      String? selector,
      PageScrollToSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (duration != null) $duration = duration;
    if (fail != null) $fail = fail;
    if (offsetTop != null) $offsetTop = offsetTop;
    if (scrollTop != null) $scrollTop = scrollTop;
    if (selector != null) $selector = selector;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'duration': $duration,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'offsetTop': $offsetTop,
      'scrollTop': $scrollTop,
      'selector': $selector,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class Path2D {
  mpjs.JsObject? $$context$$;

  Path2D({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }
}

class PauseBGMOption {
  mpjs.JsObject? $$context$$;

  PauseBGMCompleteCallback? $complete;

  Future<PauseBGMCompleteCallback?> get complete async {
    return $complete;
  }

  PauseBGMFailCallback? $fail;

  Future<PauseBGMFailCallback?> get fail async {
    return $fail;
  }

  PauseBGMSuccessCallback? $success;

  Future<PauseBGMSuccessCallback?> get success async {
    return $success;
  }

  PauseBGMOption({this.$$context$$});

  void setValues(
      {PauseBGMCompleteCallback? complete,
      PauseBGMFailCallback? fail,
      PauseBGMSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class PauseBackgroundAudioOption {
  mpjs.JsObject? $$context$$;

  PauseBackgroundAudioCompleteCallback? $complete;

  Future<PauseBackgroundAudioCompleteCallback?> get complete async {
    return $complete;
  }

  PauseBackgroundAudioFailCallback? $fail;

  Future<PauseBackgroundAudioFailCallback?> get fail async {
    return $fail;
  }

  PauseBackgroundAudioSuccessCallback? $success;

  Future<PauseBackgroundAudioSuccessCallback?> get success async {
    return $success;
  }

  PauseBackgroundAudioOption({this.$$context$$});

  void setValues(
      {PauseBackgroundAudioCompleteCallback? complete,
      PauseBackgroundAudioFailCallback? fail,
      PauseBackgroundAudioSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class PauseOption {
  mpjs.JsObject? $$context$$;

  PauseCompleteCallback? $complete;

  Future<PauseCompleteCallback?> get complete async {
    return $complete;
  }

  PauseFailCallback? $fail;

  Future<PauseFailCallback?> get fail async {
    return $fail;
  }

  PauseSuccessCallback? $success;

  Future<PauseSuccessCallback?> get success async {
    return $success;
  }

  PauseOption({this.$$context$$});

  void setValues(
      {PauseCompleteCallback? complete,
      PauseFailCallback? fail,
      PauseSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class PauseVoiceOption {
  mpjs.JsObject? $$context$$;

  PauseVoiceCompleteCallback? $complete;

  Future<PauseVoiceCompleteCallback?> get complete async {
    return $complete;
  }

  PauseVoiceFailCallback? $fail;

  Future<PauseVoiceFailCallback?> get fail async {
    return $fail;
  }

  PauseVoiceSuccessCallback? $success;

  Future<PauseVoiceSuccessCallback?> get success async {
    return $success;
  }

  PauseVoiceOption({this.$$context$$});

  void setValues(
      {PauseVoiceCompleteCallback? complete,
      PauseVoiceFailCallback? fail,
      PauseVoiceSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class PerformanceEntry {
  mpjs.JsObject? $$context$$;

  num $domainLookupEnd = 0;

  Future<num> get domainLookupEnd async {
    return await $$context$$?.getPropertyValue('domainLookupEnd') ??
        $domainLookupEnd;
  }

  num $domainLookupStart = 0;

  Future<num> get domainLookupStart async {
    return await $$context$$?.getPropertyValue('domainLookupStart') ??
        $domainLookupStart;
  }

  num $duration = 0;

  Future<num> get duration async {
    return await $$context$$?.getPropertyValue('duration') ?? $duration;
  }

  dynamic $entryType;

  Future<dynamic> get entryType async {
    return await $$context$$?.getPropertyValue('entryType') ?? $entryType;
  }

  List<String> $fileList = <String>[];

  Future<List<String>> get fileList async {
    return await $$context$$?.getPropertyValue('fileList') ?? $fileList;
  }

  num $initDataRecvTime = 0;

  Future<num> get initDataRecvTime async {
    return await $$context$$?.getPropertyValue('initDataRecvTime') ??
        $initDataRecvTime;
  }

  num $initDataSendTime = 0;

  Future<num> get initDataSendTime async {
    return await $$context$$?.getPropertyValue('initDataSendTime') ??
        $initDataSendTime;
  }

  dynamic $initiatorType;

  Future<dynamic> get initiatorType async {
    return await $$context$$?.getPropertyValue('initiatorType') ??
        $initiatorType;
  }

  String $moduleName = "";

  Future<String> get moduleName async {
    return await $$context$$?.getPropertyValue('moduleName') ?? $moduleName;
  }

  dynamic $name;

  Future<dynamic> get name async {
    return await $$context$$?.getPropertyValue('name') ?? $name;
  }

  num $navigationStart = 0;

  Future<num> get navigationStart async {
    return await $$context$$?.getPropertyValue('navigationStart') ??
        $navigationStart;
  }

  String $navigationType = "";

  Future<String> get navigationType async {
    return await $$context$$?.getPropertyValue('navigationType') ??
        $navigationType;
  }

  String $packageName = "";

  Future<String> get packageName async {
    return await $$context$$?.getPropertyValue('packageName') ?? $packageName;
  }

  num $packageSize = 0;

  Future<num> get packageSize async {
    return await $$context$$?.getPropertyValue('packageSize') ?? $packageSize;
  }

  num $pageId = 0;

  Future<num> get pageId async {
    return await $$context$$?.getPropertyValue('pageId') ?? $pageId;
  }

  String $path = "";

  Future<String> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  num $referrerPageId = 0;

  Future<num> get referrerPageId async {
    return await $$context$$?.getPropertyValue('referrerPageId') ??
        $referrerPageId;
  }

  num $referrerPath = 0;

  Future<num> get referrerPath async {
    return await $$context$$?.getPropertyValue('referrerPath') ?? $referrerPath;
  }

  num $startTime = 0;

  Future<num> get startTime async {
    return await $$context$$?.getPropertyValue('startTime') ?? $startTime;
  }

  num $transferSize = 0;

  Future<num> get transferSize async {
    return await $$context$$?.getPropertyValue('transferSize') ?? $transferSize;
  }

  String $uri = "";

  Future<String> get uri async {
    return await $$context$$?.getPropertyValue('uri') ?? $uri;
  }

  num $viewLayerReadyTime = 0;

  Future<num> get viewLayerReadyTime async {
    return await $$context$$?.getPropertyValue('viewLayerReadyTime') ??
        $viewLayerReadyTime;
  }

  num $viewLayerRenderEndTime = 0;

  Future<num> get viewLayerRenderEndTime async {
    return await $$context$$?.getPropertyValue('viewLayerRenderEndTime') ??
        $viewLayerRenderEndTime;
  }

  num $viewLayerRenderStartTime = 0;

  Future<num> get viewLayerRenderStartTime async {
    return await $$context$$?.getPropertyValue('viewLayerRenderStartTime') ??
        $viewLayerRenderStartTime;
  }

  PerformanceEntry({this.$$context$$});

  void setValues(
      {num? domainLookupEnd,
      num? domainLookupStart,
      num? duration,
      dynamic entryType,
      List<String>? fileList,
      num? initDataRecvTime,
      num? initDataSendTime,
      dynamic initiatorType,
      String? moduleName,
      dynamic name,
      num? navigationStart,
      String? navigationType,
      String? packageName,
      num? packageSize,
      num? pageId,
      String? path,
      num? referrerPageId,
      num? referrerPath,
      num? startTime,
      num? transferSize,
      String? uri,
      num? viewLayerReadyTime,
      num? viewLayerRenderEndTime,
      num? viewLayerRenderStartTime}) {
    if (domainLookupEnd != null) $domainLookupEnd = domainLookupEnd;
    if (domainLookupStart != null) $domainLookupStart = domainLookupStart;
    if (duration != null) $duration = duration;
    if (entryType != null) $entryType = entryType;
    if (fileList != null) $fileList = fileList;
    if (initDataRecvTime != null) $initDataRecvTime = initDataRecvTime;
    if (initDataSendTime != null) $initDataSendTime = initDataSendTime;
    if (initiatorType != null) $initiatorType = initiatorType;
    if (moduleName != null) $moduleName = moduleName;
    if (name != null) $name = name;
    if (navigationStart != null) $navigationStart = navigationStart;
    if (navigationType != null) $navigationType = navigationType;
    if (packageName != null) $packageName = packageName;
    if (packageSize != null) $packageSize = packageSize;
    if (pageId != null) $pageId = pageId;
    if (path != null) $path = path;
    if (referrerPageId != null) $referrerPageId = referrerPageId;
    if (referrerPath != null) $referrerPath = referrerPath;
    if (startTime != null) $startTime = startTime;
    if (transferSize != null) $transferSize = transferSize;
    if (uri != null) $uri = uri;
    if (viewLayerReadyTime != null) $viewLayerReadyTime = viewLayerReadyTime;
    if (viewLayerRenderEndTime != null)
      $viewLayerRenderEndTime = viewLayerRenderEndTime;
    if (viewLayerRenderStartTime != null)
      $viewLayerRenderStartTime = viewLayerRenderStartTime;
  }

  Map toJson() {
    return {
      'domainLookupEnd': $domainLookupEnd,
      'domainLookupStart': $domainLookupStart,
      'duration': $duration,
      'entryType': $entryType,
      'fileList': $fileList,
      'initDataRecvTime': $initDataRecvTime,
      'initDataSendTime': $initDataSendTime,
      'initiatorType': $initiatorType,
      'moduleName': $moduleName,
      'name': $name,
      'navigationStart': $navigationStart,
      'navigationType': $navigationType,
      'packageName': $packageName,
      'packageSize': $packageSize,
      'pageId': $pageId,
      'path': $path,
      'referrerPageId': $referrerPageId,
      'referrerPath': $referrerPath,
      'startTime': $startTime,
      'transferSize': $transferSize,
      'uri': $uri,
      'viewLayerReadyTime': $viewLayerReadyTime,
      'viewLayerRenderEndTime': $viewLayerRenderEndTime,
      'viewLayerRenderStartTime': $viewLayerRenderStartTime
    }..removeWhere((key, value) => value == null);
  }
}

class PerformanceObserver {
  mpjs.JsObject? $$context$$;

  List<dynamic> $supportedEntryTypes = <dynamic>[];

  Future<List<dynamic>> get supportedEntryTypes async {
    return await $$context$$?.getPropertyValue('supportedEntryTypes') ??
        $supportedEntryTypes;
  }

  PerformanceObserver({this.$$context$$});

  void setValues({List<dynamic>? supportedEntryTypes}) {
    if (supportedEntryTypes != null) $supportedEntryTypes = supportedEntryTypes;
  }

  Map toJson() {
    return {'supportedEntryTypes': $supportedEntryTypes}
      ..removeWhere((key, value) => value == null);
  }

  Future<void> disconnect() async {
    final result = await $$context$$?.callMethod('disconnect', []);
    return result;
  }

  Future<void> observe(ObserveOption options) async {
    final result = await $$context$$?.callMethod('observe', [options.toJson()]);
    return result;
  }
}

class PlaneTrack {
  mpjs.JsObject? $$context$$;

  dynamic $mode;

  Future<dynamic> get mode async {
    return await $$context$$?.getPropertyValue('mode') ?? $mode;
  }

  PlaneTrack({this.$$context$$});

  void setValues({dynamic mode}) {
    if (mode != null) $mode = mode;
  }

  Map toJson() {
    return {'mode': $mode}..removeWhere((key, value) => value == null);
  }
}

class PlayBGMOption {
  mpjs.JsObject? $$context$$;

  String $url = "";

  Future<String> get url async {
    return await $$context$$?.getPropertyValue('url') ?? $url;
  }

  PlayBGMCompleteCallback? $complete;

  Future<PlayBGMCompleteCallback?> get complete async {
    return $complete;
  }

  PlayBGMFailCallback? $fail;

  Future<PlayBGMFailCallback?> get fail async {
    return $fail;
  }

  PlayBGMSuccessCallback? $success;

  Future<PlayBGMSuccessCallback?> get success async {
    return $success;
  }

  PlayBGMOption({this.$$context$$});

  void setValues(
      {String? url,
      PlayBGMCompleteCallback? complete,
      PlayBGMFailCallback? fail,
      PlayBGMSuccessCallback? success}) {
    if (url != null) $url = url;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'url': $url,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class PlayBackgroundAudioOption {
  mpjs.JsObject? $$context$$;

  String $dataUrl = "";

  Future<String> get dataUrl async {
    return await $$context$$?.getPropertyValue('dataUrl') ?? $dataUrl;
  }

  PlayBackgroundAudioCompleteCallback? $complete;

  Future<PlayBackgroundAudioCompleteCallback?> get complete async {
    return $complete;
  }

  String? $coverImgUrl;

  Future<String?> get coverImgUrl async {
    return await $$context$$?.getPropertyValue('coverImgUrl') ?? $coverImgUrl;
  }

  PlayBackgroundAudioFailCallback? $fail;

  Future<PlayBackgroundAudioFailCallback?> get fail async {
    return $fail;
  }

  PlayBackgroundAudioSuccessCallback? $success;

  Future<PlayBackgroundAudioSuccessCallback?> get success async {
    return $success;
  }

  String? $title;

  Future<String?> get title async {
    return await $$context$$?.getPropertyValue('title') ?? $title;
  }

  PlayBackgroundAudioOption({this.$$context$$});

  void setValues(
      {String? dataUrl,
      PlayBackgroundAudioCompleteCallback? complete,
      String? coverImgUrl,
      PlayBackgroundAudioFailCallback? fail,
      PlayBackgroundAudioSuccessCallback? success,
      String? title}) {
    if (dataUrl != null) $dataUrl = dataUrl;
    if (complete != null) $complete = complete;
    if (coverImgUrl != null) $coverImgUrl = coverImgUrl;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
    if (title != null) $title = title;
  }

  Map toJson() {
    return {
      'dataUrl': $dataUrl,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'coverImgUrl': $coverImgUrl,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'title': $title
    }..removeWhere((key, value) => value == null);
  }
}

class PlayOption {
  mpjs.JsObject? $$context$$;

  PlayCompleteCallback? $complete;

  Future<PlayCompleteCallback?> get complete async {
    return $complete;
  }

  PlayFailCallback? $fail;

  Future<PlayFailCallback?> get fail async {
    return $fail;
  }

  PlaySuccessCallback? $success;

  Future<PlaySuccessCallback?> get success async {
    return $success;
  }

  PlayOption({this.$$context$$});

  void setValues(
      {PlayCompleteCallback? complete,
      PlayFailCallback? fail,
      PlaySuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class PlayVoiceOption {
  mpjs.JsObject? $$context$$;

  String $filePath = "";

  Future<String> get filePath async {
    return await $$context$$?.getPropertyValue('filePath') ?? $filePath;
  }

  PlayVoiceCompleteCallback? $complete;

  Future<PlayVoiceCompleteCallback?> get complete async {
    return $complete;
  }

  num? $duration;

  Future<num?> get duration async {
    return await $$context$$?.getPropertyValue('duration') ?? $duration;
  }

  PlayVoiceFailCallback? $fail;

  Future<PlayVoiceFailCallback?> get fail async {
    return $fail;
  }

  PlayVoiceSuccessCallback? $success;

  Future<PlayVoiceSuccessCallback?> get success async {
    return $success;
  }

  PlayVoiceOption({this.$$context$$});

  void setValues(
      {String? filePath,
      PlayVoiceCompleteCallback? complete,
      num? duration,
      PlayVoiceFailCallback? fail,
      PlayVoiceSuccessCallback? success}) {
    if (filePath != null) $filePath = filePath;
    if (complete != null) $complete = complete;
    if (duration != null) $duration = duration;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'filePath': $filePath,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'duration': $duration,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class Plugin {
  mpjs.JsObject? $$context$$;

  String $appId = "";

  Future<String> get appId async {
    return await $$context$$?.getPropertyValue('appId') ?? $appId;
  }

  String $version = "";

  Future<String> get version async {
    return await $$context$$?.getPropertyValue('version') ?? $version;
  }

  Plugin({this.$$context$$});

  void setValues({String? appId, String? version}) {
    if (appId != null) $appId = appId;
    if (version != null) $version = version;
  }

  Map toJson() {
    return {'appId': $appId, 'version': $version}
      ..removeWhere((key, value) => value == null);
  }
}

class PluginLoginOption {
  mpjs.JsObject? $$context$$;

  PluginLoginCompleteCallback? $complete;

  Future<PluginLoginCompleteCallback?> get complete async {
    return $complete;
  }

  PluginLoginFailCallback? $fail;

  Future<PluginLoginFailCallback?> get fail async {
    return $fail;
  }

  PluginLoginSuccessCallback? $success;

  Future<PluginLoginSuccessCallback?> get success async {
    return $success;
  }

  PluginLoginOption({this.$$context$$});

  void setValues(
      {PluginLoginCompleteCallback? complete,
      PluginLoginFailCallback? fail,
      PluginLoginSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => PluginLoginSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class PluginLoginSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $code = "";

  Future<String> get code async {
    return await $$context$$?.getPropertyValue('code') ?? $code;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  PluginLoginSuccessCallbackResult({this.$$context$$});

  void setValues({String? code, String? errMsg}) {
    if (code != null) $code = code;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'code': $code, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class PreDownloadSubpackageOption {
  mpjs.JsObject? $$context$$;

  dynamic $complete;

  Future<dynamic> get complete async {
    return await $$context$$?.getPropertyValue('complete') ?? $complete;
  }

  dynamic $fail;

  Future<dynamic> get fail async {
    return await $$context$$?.getPropertyValue('fail') ?? $fail;
  }

  String $packageType = "";

  Future<String> get packageType async {
    return await $$context$$?.getPropertyValue('packageType') ?? $packageType;
  }

  dynamic $success;

  Future<dynamic> get success async {
    return await $$context$$?.getPropertyValue('success') ?? $success;
  }

  PreDownloadSubpackageOption({this.$$context$$});

  void setValues(
      {dynamic complete, dynamic fail, String? packageType, dynamic success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (packageType != null) $packageType = packageType;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete':
          $complete != null ? mpjs.JsFunction($complete!, [null]) : null,
      'fail': $fail != null ? mpjs.JsFunction($fail!, [null]) : null,
      'packageType': $packageType,
      'success': $success != null ? mpjs.JsFunction($success!, [null]) : null
    }..removeWhere((key, value) => value == null);
  }
}

class PreDownloadSubpackageTaskOnProgressUpdateListenerResult {
  mpjs.JsObject? $$context$$;

  num $progress = 0;

  Future<num> get progress async {
    return await $$context$$?.getPropertyValue('progress') ?? $progress;
  }

  num $totalBytesExpectedToWrite = 0;

  Future<num> get totalBytesExpectedToWrite async {
    return await $$context$$?.getPropertyValue('totalBytesExpectedToWrite') ??
        $totalBytesExpectedToWrite;
  }

  num $totalBytesWritten = 0;

  Future<num> get totalBytesWritten async {
    return await $$context$$?.getPropertyValue('totalBytesWritten') ??
        $totalBytesWritten;
  }

  PreDownloadSubpackageTaskOnProgressUpdateListenerResult({this.$$context$$});

  void setValues(
      {num? progress, num? totalBytesExpectedToWrite, num? totalBytesWritten}) {
    if (progress != null) $progress = progress;
    if (totalBytesExpectedToWrite != null)
      $totalBytesExpectedToWrite = totalBytesExpectedToWrite;
    if (totalBytesWritten != null) $totalBytesWritten = totalBytesWritten;
  }

  Map toJson() {
    return {
      'progress': $progress,
      'totalBytesExpectedToWrite': $totalBytesExpectedToWrite,
      'totalBytesWritten': $totalBytesWritten
    }..removeWhere((key, value) => value == null);
  }
}

class PreloadAssetsOption {
  mpjs.JsObject? $$context$$;

  List<Asset> $data = <Asset>[];

  Future<List<Asset>> get data async {
    return ((await $$context$$?.getPropertyValue('data')) as List)
        .map((it) => Asset($$context$$: it))
        .toList();
  }

  PreloadAssetsCompleteCallback? $complete;

  Future<PreloadAssetsCompleteCallback?> get complete async {
    return $complete;
  }

  PreloadAssetsFailCallback? $fail;

  Future<PreloadAssetsFailCallback?> get fail async {
    return $fail;
  }

  PreloadAssetsSuccessCallback? $success;

  Future<PreloadAssetsSuccessCallback?> get success async {
    return $success;
  }

  PreloadAssetsOption({this.$$context$$});

  void setValues(
      {List<Asset>? data,
      PreloadAssetsCompleteCallback? complete,
      PreloadAssetsFailCallback? fail,
      PreloadAssetsSuccessCallback? success}) {
    if (data != null) $data = data;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'data': $data,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class PreloadSkylineViewOption {
  mpjs.JsObject? $$context$$;

  PreloadSkylineViewCompleteCallback? $complete;

  Future<PreloadSkylineViewCompleteCallback?> get complete async {
    return $complete;
  }

  PreloadSkylineViewFailCallback? $fail;

  Future<PreloadSkylineViewFailCallback?> get fail async {
    return $fail;
  }

  PreloadSkylineViewSuccessCallback? $success;

  Future<PreloadSkylineViewSuccessCallback?> get success async {
    return $success;
  }

  PreloadSkylineViewOption({this.$$context$$});

  void setValues(
      {PreloadSkylineViewCompleteCallback? complete,
      PreloadSkylineViewFailCallback? fail,
      PreloadSkylineViewSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class PreloadWebviewOption {
  mpjs.JsObject? $$context$$;

  PreloadWebviewCompleteCallback? $complete;

  Future<PreloadWebviewCompleteCallback?> get complete async {
    return $complete;
  }

  PreloadWebviewFailCallback? $fail;

  Future<PreloadWebviewFailCallback?> get fail async {
    return $fail;
  }

  PreloadWebviewSuccessCallback? $success;

  Future<PreloadWebviewSuccessCallback?> get success async {
    return $success;
  }

  PreloadWebviewOption({this.$$context$$});

  void setValues(
      {PreloadWebviewCompleteCallback? complete,
      PreloadWebviewFailCallback? fail,
      PreloadWebviewSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class PreviewImageOption {
  mpjs.JsObject? $$context$$;

  List<String> $urls = <String>[];

  Future<List<String>> get urls async {
    return await $$context$$?.getPropertyValue('urls') ?? $urls;
  }

  PreviewImageCompleteCallback? $complete;

  Future<PreviewImageCompleteCallback?> get complete async {
    return $complete;
  }

  String? $current;

  Future<String?> get current async {
    return await $$context$$?.getPropertyValue('current') ?? $current;
  }

  PreviewImageFailCallback? $fail;

  Future<PreviewImageFailCallback?> get fail async {
    return $fail;
  }

  String? $referrerPolicy;

  Future<String?> get referrerPolicy async {
    return await $$context$$?.getPropertyValue('referrerPolicy') ??
        $referrerPolicy;
  }

  bool? $showmenu;

  Future<bool?> get showmenu async {
    return await $$context$$?.getPropertyValue('showmenu') ?? $showmenu;
  }

  PreviewImageSuccessCallback? $success;

  Future<PreviewImageSuccessCallback?> get success async {
    return $success;
  }

  PreviewImageOption({this.$$context$$});

  void setValues(
      {List<String>? urls,
      PreviewImageCompleteCallback? complete,
      String? current,
      PreviewImageFailCallback? fail,
      String? referrerPolicy,
      bool? showmenu,
      PreviewImageSuccessCallback? success}) {
    if (urls != null) $urls = urls;
    if (complete != null) $complete = complete;
    if (current != null) $current = current;
    if (fail != null) $fail = fail;
    if (referrerPolicy != null) $referrerPolicy = referrerPolicy;
    if (showmenu != null) $showmenu = showmenu;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'urls': $urls,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'current': $current,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'referrerPolicy': $referrerPolicy,
      'showmenu': $showmenu,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class PreviewMediaOption {
  mpjs.JsObject? $$context$$;

  List<MediaSource> $sources = <MediaSource>[];

  Future<List<MediaSource>> get sources async {
    return ((await $$context$$?.getPropertyValue('sources')) as List)
        .map((it) => MediaSource($$context$$: it))
        .toList();
  }

  PreviewMediaCompleteCallback? $complete;

  Future<PreviewMediaCompleteCallback?> get complete async {
    return $complete;
  }

  num? $current;

  Future<num?> get current async {
    return await $$context$$?.getPropertyValue('current') ?? $current;
  }

  PreviewMediaFailCallback? $fail;

  Future<PreviewMediaFailCallback?> get fail async {
    return $fail;
  }

  String? $referrerPolicy;

  Future<String?> get referrerPolicy async {
    return await $$context$$?.getPropertyValue('referrerPolicy') ??
        $referrerPolicy;
  }

  bool? $showmenu;

  Future<bool?> get showmenu async {
    return await $$context$$?.getPropertyValue('showmenu') ?? $showmenu;
  }

  PreviewMediaSuccessCallback? $success;

  Future<PreviewMediaSuccessCallback?> get success async {
    return $success;
  }

  PreviewMediaOption({this.$$context$$});

  void setValues(
      {List<MediaSource>? sources,
      PreviewMediaCompleteCallback? complete,
      num? current,
      PreviewMediaFailCallback? fail,
      String? referrerPolicy,
      bool? showmenu,
      PreviewMediaSuccessCallback? success}) {
    if (sources != null) $sources = sources;
    if (complete != null) $complete = complete;
    if (current != null) $current = current;
    if (fail != null) $fail = fail;
    if (referrerPolicy != null) $referrerPolicy = referrerPolicy;
    if (showmenu != null) $showmenu = showmenu;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'sources': $sources,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'current': $current,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'referrerPolicy': $referrerPolicy,
      'showmenu': $showmenu,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class PromoterResult {
  mpjs.JsObject? $$context$$;

  String $finderNickname = "";

  Future<String> get finderNickname async {
    return await $$context$$?.getPropertyValue('finderNickname') ??
        $finderNickname;
  }

  String $promoterId = "";

  Future<String> get promoterId async {
    return await $$context$$?.getPropertyValue('promoterId') ?? $promoterId;
  }

  String $promoterOpenId = "";

  Future<String> get promoterOpenId async {
    return await $$context$$?.getPropertyValue('promoterOpenId') ??
        $promoterOpenId;
  }

  PromoterResult({this.$$context$$});

  void setValues(
      {String? finderNickname, String? promoterId, String? promoterOpenId}) {
    if (finderNickname != null) $finderNickname = finderNickname;
    if (promoterId != null) $promoterId = promoterId;
    if (promoterOpenId != null) $promoterOpenId = promoterOpenId;
  }

  Map toJson() {
    return {
      'finderNickname': $finderNickname,
      'promoterId': $promoterId,
      'promoterOpenId': $promoterOpenId
    }..removeWhere((key, value) => value == null);
  }
}

class ReLaunchOption {
  mpjs.JsObject? $$context$$;

  String $url = "";

  Future<String> get url async {
    return await $$context$$?.getPropertyValue('url') ?? $url;
  }

  ReLaunchCompleteCallback? $complete;

  Future<ReLaunchCompleteCallback?> get complete async {
    return $complete;
  }

  ReLaunchFailCallback? $fail;

  Future<ReLaunchFailCallback?> get fail async {
    return $fail;
  }

  ReLaunchSuccessCallback? $success;

  Future<ReLaunchSuccessCallback?> get success async {
    return $success;
  }

  ReLaunchOption({this.$$context$$});

  void setValues(
      {String? url,
      ReLaunchCompleteCallback? complete,
      ReLaunchFailCallback? fail,
      ReLaunchSuccessCallback? success}) {
    if (url != null) $url = url;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'url': $url,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ReadBLECharacteristicValueOption {
  mpjs.JsObject? $$context$$;

  String $characteristicId = "";

  Future<String> get characteristicId async {
    return await $$context$$?.getPropertyValue('characteristicId') ??
        $characteristicId;
  }

  String $deviceId = "";

  Future<String> get deviceId async {
    return await $$context$$?.getPropertyValue('deviceId') ?? $deviceId;
  }

  String $serviceId = "";

  Future<String> get serviceId async {
    return await $$context$$?.getPropertyValue('serviceId') ?? $serviceId;
  }

  ReadBLECharacteristicValueCompleteCallback? $complete;

  Future<ReadBLECharacteristicValueCompleteCallback?> get complete async {
    return $complete;
  }

  ReadBLECharacteristicValueFailCallback? $fail;

  Future<ReadBLECharacteristicValueFailCallback?> get fail async {
    return $fail;
  }

  ReadBLECharacteristicValueSuccessCallback? $success;

  Future<ReadBLECharacteristicValueSuccessCallback?> get success async {
    return $success;
  }

  ReadBLECharacteristicValueOption({this.$$context$$});

  void setValues(
      {String? characteristicId,
      String? deviceId,
      String? serviceId,
      ReadBLECharacteristicValueCompleteCallback? complete,
      ReadBLECharacteristicValueFailCallback? fail,
      ReadBLECharacteristicValueSuccessCallback? success}) {
    if (characteristicId != null) $characteristicId = characteristicId;
    if (deviceId != null) $deviceId = deviceId;
    if (serviceId != null) $serviceId = serviceId;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'characteristicId': $characteristicId,
      'deviceId': $deviceId,
      'serviceId': $serviceId,
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => BluetoothError($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ReadCompressedFileFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  ReadCompressedFileFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class ReadCompressedFileOption {
  mpjs.JsObject? $$context$$;

  dynamic $compressionAlgorithm;

  Future<dynamic> get compressionAlgorithm async {
    return await $$context$$?.getPropertyValue('compressionAlgorithm') ??
        $compressionAlgorithm;
  }

  String $filePath = "";

  Future<String> get filePath async {
    return await $$context$$?.getPropertyValue('filePath') ?? $filePath;
  }

  ReadCompressedFileCompleteCallback? $complete;

  Future<ReadCompressedFileCompleteCallback?> get complete async {
    return $complete;
  }

  ReadCompressedFileFailCallback? $fail;

  Future<ReadCompressedFileFailCallback?> get fail async {
    return $fail;
  }

  ReadCompressedFileSuccessCallback? $success;

  Future<ReadCompressedFileSuccessCallback?> get success async {
    return $success;
  }

  ReadCompressedFileOption({this.$$context$$});

  void setValues(
      {dynamic compressionAlgorithm,
      String? filePath,
      ReadCompressedFileCompleteCallback? complete,
      ReadCompressedFileFailCallback? fail,
      ReadCompressedFileSuccessCallback? success}) {
    if (compressionAlgorithm != null)
      $compressionAlgorithm = compressionAlgorithm;
    if (filePath != null) $filePath = filePath;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'compressionAlgorithm': $compressionAlgorithm,
      'filePath': $filePath,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!,
              [(e) => ReadCompressedFileFailCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => ReadCompressedFileSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ReadCompressedFileSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  ArrayBuffer $data = ArrayBuffer();

  Future<ArrayBuffer> get data async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('data'));
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  ReadCompressedFileSuccessCallbackResult({this.$$context$$});

  void setValues({ArrayBuffer? data, String? errMsg}) {
    if (data != null) $data = data;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'data': $data, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class ReadCompressedFileSyncOption {
  mpjs.JsObject? $$context$$;

  dynamic $compressionAlgorithm;

  Future<dynamic> get compressionAlgorithm async {
    return await $$context$$?.getPropertyValue('compressionAlgorithm') ??
        $compressionAlgorithm;
  }

  String $filePath = "";

  Future<String> get filePath async {
    return await $$context$$?.getPropertyValue('filePath') ?? $filePath;
  }

  ReadCompressedFileSyncOption({this.$$context$$});

  void setValues({dynamic compressionAlgorithm, String? filePath}) {
    if (compressionAlgorithm != null)
      $compressionAlgorithm = compressionAlgorithm;
    if (filePath != null) $filePath = filePath;
  }

  Map toJson() {
    return {
      'compressionAlgorithm': $compressionAlgorithm,
      'filePath': $filePath
    }..removeWhere((key, value) => value == null);
  }
}

class ReadFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  ReadFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class ReadFileFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  ReadFileFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class ReadFileOption {
  mpjs.JsObject? $$context$$;

  String $filePath = "";

  Future<String> get filePath async {
    return await $$context$$?.getPropertyValue('filePath') ?? $filePath;
  }

  ReadFileCompleteCallback? $complete;

  Future<ReadFileCompleteCallback?> get complete async {
    return $complete;
  }

  dynamic $encoding;

  Future<dynamic> get encoding async {
    return await $$context$$?.getPropertyValue('encoding') ?? $encoding;
  }

  ReadFileFailCallback? $fail;

  Future<ReadFileFailCallback?> get fail async {
    return $fail;
  }

  num? $length;

  Future<num?> get length async {
    return await $$context$$?.getPropertyValue('length') ?? $length;
  }

  num? $position;

  Future<num?> get position async {
    return await $$context$$?.getPropertyValue('position') ?? $position;
  }

  ReadFileSuccessCallback? $success;

  Future<ReadFileSuccessCallback?> get success async {
    return $success;
  }

  ReadFileOption({this.$$context$$});

  void setValues(
      {String? filePath,
      ReadFileCompleteCallback? complete,
      dynamic encoding,
      ReadFileFailCallback? fail,
      num? length,
      num? position,
      ReadFileSuccessCallback? success}) {
    if (filePath != null) $filePath = filePath;
    if (complete != null) $complete = complete;
    if (encoding != null) $encoding = encoding;
    if (fail != null) $fail = fail;
    if (length != null) $length = length;
    if (position != null) $position = position;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'filePath': $filePath,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'encoding': $encoding,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => ReadFileFailCallbackResult($$context$$: e)])
          : null,
      'length': $length,
      'position': $position,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => ReadFileSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ReadFileSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  dynamic $data;

  Future<dynamic> get data async {
    return await $$context$$?.getPropertyValue('data') ?? $data;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  ReadFileSuccessCallbackResult({this.$$context$$});

  void setValues({dynamic data, String? errMsg}) {
    if (data != null) $data = data;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'data': $data, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class ReadOption {
  mpjs.JsObject? $$context$$;

  ArrayBuffer $arrayBuffer = ArrayBuffer();

  Future<ArrayBuffer> get arrayBuffer async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('arrayBuffer'));
  }

  String $fd = "";

  Future<String> get fd async {
    return await $$context$$?.getPropertyValue('fd') ?? $fd;
  }

  ReadCompleteCallback? $complete;

  Future<ReadCompleteCallback?> get complete async {
    return $complete;
  }

  ReadFailCallback? $fail;

  Future<ReadFailCallback?> get fail async {
    return $fail;
  }

  num? $length;

  Future<num?> get length async {
    return await $$context$$?.getPropertyValue('length') ?? $length;
  }

  num? $offset;

  Future<num?> get offset async {
    return await $$context$$?.getPropertyValue('offset') ?? $offset;
  }

  num? $position;

  Future<num?> get position async {
    return await $$context$$?.getPropertyValue('position') ?? $position;
  }

  ReadSuccessCallback? $success;

  Future<ReadSuccessCallback?> get success async {
    return $success;
  }

  ReadOption({this.$$context$$});

  void setValues(
      {ArrayBuffer? arrayBuffer,
      String? fd,
      ReadCompleteCallback? complete,
      ReadFailCallback? fail,
      num? length,
      num? offset,
      num? position,
      ReadSuccessCallback? success}) {
    if (arrayBuffer != null) $arrayBuffer = arrayBuffer;
    if (fd != null) $fd = fd;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (length != null) $length = length;
    if (offset != null) $offset = offset;
    if (position != null) $position = position;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'arrayBuffer': $arrayBuffer,
      'fd': $fd,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => ReadFailCallbackResult($$context$$: e)])
          : null,
      'length': $length,
      'offset': $offset,
      'position': $position,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => ReadSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ReadResult {
  mpjs.JsObject? $$context$$;

  ArrayBuffer $arrayBuffer = ArrayBuffer();

  Future<ArrayBuffer> get arrayBuffer async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('arrayBuffer'));
  }

  num $bytesRead = 0;

  Future<num> get bytesRead async {
    return await $$context$$?.getPropertyValue('bytesRead') ?? $bytesRead;
  }

  ReadResult({this.$$context$$});

  void setValues({ArrayBuffer? arrayBuffer, num? bytesRead}) {
    if (arrayBuffer != null) $arrayBuffer = arrayBuffer;
    if (bytesRead != null) $bytesRead = bytesRead;
  }

  Map toJson() {
    return {'arrayBuffer': $arrayBuffer, 'bytesRead': $bytesRead}
      ..removeWhere((key, value) => value == null);
  }
}

class ReadSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  ArrayBuffer $arrayBuffer = ArrayBuffer();

  Future<ArrayBuffer> get arrayBuffer async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('arrayBuffer'));
  }

  num $bytesRead = 0;

  Future<num> get bytesRead async {
    return await $$context$$?.getPropertyValue('bytesRead') ?? $bytesRead;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  ReadSuccessCallbackResult({this.$$context$$});

  void setValues({ArrayBuffer? arrayBuffer, num? bytesRead, String? errMsg}) {
    if (arrayBuffer != null) $arrayBuffer = arrayBuffer;
    if (bytesRead != null) $bytesRead = bytesRead;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'arrayBuffer': $arrayBuffer,
      'bytesRead': $bytesRead,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class ReadSyncOption {
  mpjs.JsObject? $$context$$;

  ArrayBuffer $arrayBuffer = ArrayBuffer();

  Future<ArrayBuffer> get arrayBuffer async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('arrayBuffer'));
  }

  String $fd = "";

  Future<String> get fd async {
    return await $$context$$?.getPropertyValue('fd') ?? $fd;
  }

  num? $length;

  Future<num?> get length async {
    return await $$context$$?.getPropertyValue('length') ?? $length;
  }

  num? $offset;

  Future<num?> get offset async {
    return await $$context$$?.getPropertyValue('offset') ?? $offset;
  }

  num? $position;

  Future<num?> get position async {
    return await $$context$$?.getPropertyValue('position') ?? $position;
  }

  ReadSyncOption({this.$$context$$});

  void setValues(
      {ArrayBuffer? arrayBuffer,
      String? fd,
      num? length,
      num? offset,
      num? position}) {
    if (arrayBuffer != null) $arrayBuffer = arrayBuffer;
    if (fd != null) $fd = fd;
    if (length != null) $length = length;
    if (offset != null) $offset = offset;
    if (position != null) $position = position;
  }

  Map toJson() {
    return {
      'arrayBuffer': $arrayBuffer,
      'fd': $fd,
      'length': $length,
      'offset': $offset,
      'position': $position
    }..removeWhere((key, value) => value == null);
  }
}

class ReadZipEntryFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  ReadZipEntryFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class ReadZipEntryOption {
  mpjs.JsObject? $$context$$;

  dynamic $entries;

  Future<dynamic> get entries async {
    return await $$context$$?.getPropertyValue('entries') ?? $entries;
  }

  String $filePath = "";

  Future<String> get filePath async {
    return await $$context$$?.getPropertyValue('filePath') ?? $filePath;
  }

  ReadZipEntryCompleteCallback? $complete;

  Future<ReadZipEntryCompleteCallback?> get complete async {
    return $complete;
  }

  dynamic $encoding;

  Future<dynamic> get encoding async {
    return await $$context$$?.getPropertyValue('encoding') ?? $encoding;
  }

  ReadZipEntryFailCallback? $fail;

  Future<ReadZipEntryFailCallback?> get fail async {
    return $fail;
  }

  ReadZipEntrySuccessCallback? $success;

  Future<ReadZipEntrySuccessCallback?> get success async {
    return $success;
  }

  ReadZipEntryOption({this.$$context$$});

  void setValues(
      {dynamic entries,
      String? filePath,
      ReadZipEntryCompleteCallback? complete,
      dynamic encoding,
      ReadZipEntryFailCallback? fail,
      ReadZipEntrySuccessCallback? success}) {
    if (entries != null) $entries = entries;
    if (filePath != null) $filePath = filePath;
    if (complete != null) $complete = complete;
    if (encoding != null) $encoding = encoding;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'entries': $entries,
      'filePath': $filePath,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'encoding': $encoding,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => ReadZipEntryFailCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => ReadZipEntrySuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ReadZipEntrySuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  EntriesResult $entries = EntriesResult();

  Future<EntriesResult> get entries async {
    return EntriesResult($$context$$: $$context$$?.getProperty('entries'));
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  ReadZipEntrySuccessCallbackResult({this.$$context$$});

  void setValues({EntriesResult? entries, String? errMsg}) {
    if (entries != null) $entries = entries;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'entries': $entries, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class ReaddirFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  ReaddirFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class ReaddirOption {
  mpjs.JsObject? $$context$$;

  String $dirPath = "";

  Future<String> get dirPath async {
    return await $$context$$?.getPropertyValue('dirPath') ?? $dirPath;
  }

  ReaddirCompleteCallback? $complete;

  Future<ReaddirCompleteCallback?> get complete async {
    return $complete;
  }

  ReaddirFailCallback? $fail;

  Future<ReaddirFailCallback?> get fail async {
    return $fail;
  }

  ReaddirSuccessCallback? $success;

  Future<ReaddirSuccessCallback?> get success async {
    return $success;
  }

  ReaddirOption({this.$$context$$});

  void setValues(
      {String? dirPath,
      ReaddirCompleteCallback? complete,
      ReaddirFailCallback? fail,
      ReaddirSuccessCallback? success}) {
    if (dirPath != null) $dirPath = dirPath;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'dirPath': $dirPath,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => ReaddirFailCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => ReaddirSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ReaddirSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  List<String> $files = <String>[];

  Future<List<String>> get files async {
    return await $$context$$?.getPropertyValue('files') ?? $files;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  ReaddirSuccessCallbackResult({this.$$context$$});

  void setValues({List<String>? files, String? errMsg}) {
    if (files != null) $files = files;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'files': $files, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class RecorderManagerStartOption {
  mpjs.JsObject? $$context$$;

  dynamic $audioSource;

  Future<dynamic> get audioSource async {
    return await $$context$$?.getPropertyValue('audioSource') ?? $audioSource;
  }

  num? $duration;

  Future<num?> get duration async {
    return await $$context$$?.getPropertyValue('duration') ?? $duration;
  }

  num? $encodeBitRate;

  Future<num?> get encodeBitRate async {
    return await $$context$$?.getPropertyValue('encodeBitRate') ??
        $encodeBitRate;
  }

  dynamic $format;

  Future<dynamic> get format async {
    return await $$context$$?.getPropertyValue('format') ?? $format;
  }

  num? $frameSize;

  Future<num?> get frameSize async {
    return await $$context$$?.getPropertyValue('frameSize') ?? $frameSize;
  }

  dynamic $numberOfChannels;

  Future<dynamic> get numberOfChannels async {
    return await $$context$$?.getPropertyValue('numberOfChannels') ??
        $numberOfChannels;
  }

  dynamic $sampleRate;

  Future<dynamic> get sampleRate async {
    return await $$context$$?.getPropertyValue('sampleRate') ?? $sampleRate;
  }

  RecorderManagerStartOption({this.$$context$$});

  void setValues(
      {dynamic audioSource,
      num? duration,
      num? encodeBitRate,
      dynamic format,
      num? frameSize,
      dynamic numberOfChannels,
      dynamic sampleRate}) {
    if (audioSource != null) $audioSource = audioSource;
    if (duration != null) $duration = duration;
    if (encodeBitRate != null) $encodeBitRate = encodeBitRate;
    if (format != null) $format = format;
    if (frameSize != null) $frameSize = frameSize;
    if (numberOfChannels != null) $numberOfChannels = numberOfChannels;
    if (sampleRate != null) $sampleRate = sampleRate;
  }

  Map toJson() {
    return {
      'audioSource': $audioSource,
      'duration': $duration,
      'encodeBitRate': $encodeBitRate,
      'format': $format,
      'frameSize': $frameSize,
      'numberOfChannels': $numberOfChannels,
      'sampleRate': $sampleRate
    }..removeWhere((key, value) => value == null);
  }
}

class RedirectToOption {
  mpjs.JsObject? $$context$$;

  String $url = "";

  Future<String> get url async {
    return await $$context$$?.getPropertyValue('url') ?? $url;
  }

  RedirectToCompleteCallback? $complete;

  Future<RedirectToCompleteCallback?> get complete async {
    return $complete;
  }

  RedirectToFailCallback? $fail;

  Future<RedirectToFailCallback?> get fail async {
    return $fail;
  }

  RedirectToSuccessCallback? $success;

  Future<RedirectToSuccessCallback?> get success async {
    return $success;
  }

  RedirectToOption({this.$$context$$});

  void setValues(
      {String? url,
      RedirectToCompleteCallback? complete,
      RedirectToFailCallback? fail,
      RedirectToSuccessCallback? success}) {
    if (url != null) $url = url;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'url': $url,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class RedoOption {
  mpjs.JsObject? $$context$$;

  RedoCompleteCallback? $complete;

  Future<RedoCompleteCallback?> get complete async {
    return $complete;
  }

  RedoFailCallback? $fail;

  Future<RedoFailCallback?> get fail async {
    return $fail;
  }

  RedoSuccessCallback? $success;

  Future<RedoSuccessCallback?> get success async {
    return $success;
  }

  RedoOption({this.$$context$$});

  void setValues(
      {RedoCompleteCallback? complete,
      RedoFailCallback? fail,
      RedoSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ReferrerInfo {
  mpjs.JsObject? $$context$$;

  String $appId = "";

  Future<String> get appId async {
    return await $$context$$?.getPropertyValue('appId') ?? $appId;
  }

  IAnyObject $extraData = IAnyObject();

  Future<IAnyObject> get extraData async {
    return IAnyObject($$context$$: $$context$$?.getProperty('extraData'));
  }

  ReferrerInfo({this.$$context$$});

  void setValues({String? appId, IAnyObject? extraData}) {
    if (appId != null) $appId = appId;
    if (extraData != null) $extraData = extraData;
  }

  Map toJson() {
    return {'appId': $appId, 'extraData': $extraData}
      ..removeWhere((key, value) => value == null);
  }
}

class RelativeRectResult {
  mpjs.JsObject? $$context$$;

  num $bottom = 0;

  Future<num> get bottom async {
    return await $$context$$?.getPropertyValue('bottom') ?? $bottom;
  }

  num $left = 0;

  Future<num> get left async {
    return await $$context$$?.getPropertyValue('left') ?? $left;
  }

  num $right = 0;

  Future<num> get right async {
    return await $$context$$?.getPropertyValue('right') ?? $right;
  }

  num $top = 0;

  Future<num> get top async {
    return await $$context$$?.getPropertyValue('top') ?? $top;
  }

  RelativeRectResult({this.$$context$$});

  void setValues({num? bottom, num? left, num? right, num? top}) {
    if (bottom != null) $bottom = bottom;
    if (left != null) $left = left;
    if (right != null) $right = right;
    if (top != null) $top = top;
  }

  Map toJson() {
    return {'bottom': $bottom, 'left': $left, 'right': $right, 'top': $top}
      ..removeWhere((key, value) => value == null);
  }
}

class RemoteInfo {
  mpjs.JsObject? $$context$$;

  String $address = "";

  Future<String> get address async {
    return await $$context$$?.getPropertyValue('address') ?? $address;
  }

  String $family = "";

  Future<String> get family async {
    return await $$context$$?.getPropertyValue('family') ?? $family;
  }

  num $port = 0;

  Future<num> get port async {
    return await $$context$$?.getPropertyValue('port') ?? $port;
  }

  num $size = 0;

  Future<num> get size async {
    return await $$context$$?.getPropertyValue('size') ?? $size;
  }

  RemoteInfo({this.$$context$$});

  void setValues({String? address, String? family, num? port, num? size}) {
    if (address != null) $address = address;
    if (family != null) $family = family;
    if (port != null) $port = port;
    if (size != null) $size = size;
  }

  Map toJson() {
    return {
      'address': $address,
      'family': $family,
      'port': $port,
      'size': $size
    }..removeWhere((key, value) => value == null);
  }
}

class RemoveArcOption {
  mpjs.JsObject? $$context$$;

  num $id = 0;

  Future<num> get id async {
    return await $$context$$?.getPropertyValue('id') ?? $id;
  }

  RemoveArcCompleteCallback? $complete;

  Future<RemoveArcCompleteCallback?> get complete async {
    return $complete;
  }

  RemoveArcFailCallback? $fail;

  Future<RemoveArcFailCallback?> get fail async {
    return $fail;
  }

  RemoveArcSuccessCallback? $success;

  Future<RemoveArcSuccessCallback?> get success async {
    return $success;
  }

  RemoveArcOption({this.$$context$$});

  void setValues(
      {num? id,
      RemoveArcCompleteCallback? complete,
      RemoveArcFailCallback? fail,
      RemoveArcSuccessCallback? success}) {
    if (id != null) $id = id;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'id': $id,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class RemoveCustomLayerOption {
  mpjs.JsObject? $$context$$;

  String $layerId = "";

  Future<String> get layerId async {
    return await $$context$$?.getPropertyValue('layerId') ?? $layerId;
  }

  RemoveCustomLayerCompleteCallback? $complete;

  Future<RemoveCustomLayerCompleteCallback?> get complete async {
    return $complete;
  }

  RemoveCustomLayerFailCallback? $fail;

  Future<RemoveCustomLayerFailCallback?> get fail async {
    return $fail;
  }

  RemoveCustomLayerSuccessCallback? $success;

  Future<RemoveCustomLayerSuccessCallback?> get success async {
    return $success;
  }

  RemoveCustomLayerOption({this.$$context$$});

  void setValues(
      {String? layerId,
      RemoveCustomLayerCompleteCallback? complete,
      RemoveCustomLayerFailCallback? fail,
      RemoveCustomLayerSuccessCallback? success}) {
    if (layerId != null) $layerId = layerId;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'layerId': $layerId,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class RemoveFormatOption {
  mpjs.JsObject? $$context$$;

  RemoveFormatCompleteCallback? $complete;

  Future<RemoveFormatCompleteCallback?> get complete async {
    return $complete;
  }

  RemoveFormatFailCallback? $fail;

  Future<RemoveFormatFailCallback?> get fail async {
    return $fail;
  }

  RemoveFormatSuccessCallback? $success;

  Future<RemoveFormatSuccessCallback?> get success async {
    return $success;
  }

  RemoveFormatOption({this.$$context$$});

  void setValues(
      {RemoveFormatCompleteCallback? complete,
      RemoveFormatFailCallback? fail,
      RemoveFormatSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class RemoveGroundOverlayOption {
  mpjs.JsObject? $$context$$;

  String $id = "";

  Future<String> get id async {
    return await $$context$$?.getPropertyValue('id') ?? $id;
  }

  RemoveGroundOverlayCompleteCallback? $complete;

  Future<RemoveGroundOverlayCompleteCallback?> get complete async {
    return $complete;
  }

  RemoveGroundOverlayFailCallback? $fail;

  Future<RemoveGroundOverlayFailCallback?> get fail async {
    return $fail;
  }

  RemoveGroundOverlaySuccessCallback? $success;

  Future<RemoveGroundOverlaySuccessCallback?> get success async {
    return $success;
  }

  RemoveGroundOverlayOption({this.$$context$$});

  void setValues(
      {String? id,
      RemoveGroundOverlayCompleteCallback? complete,
      RemoveGroundOverlayFailCallback? fail,
      RemoveGroundOverlaySuccessCallback? success}) {
    if (id != null) $id = id;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'id': $id,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class RemoveMarkersOption {
  mpjs.JsObject? $$context$$;

  List<dynamic> $markerIds = <dynamic>[];

  Future<List<dynamic>> get markerIds async {
    return await $$context$$?.getPropertyValue('markerIds') ?? $markerIds;
  }

  RemoveMarkersCompleteCallback? $complete;

  Future<RemoveMarkersCompleteCallback?> get complete async {
    return $complete;
  }

  RemoveMarkersFailCallback? $fail;

  Future<RemoveMarkersFailCallback?> get fail async {
    return $fail;
  }

  RemoveMarkersSuccessCallback? $success;

  Future<RemoveMarkersSuccessCallback?> get success async {
    return $success;
  }

  RemoveMarkersOption({this.$$context$$});

  void setValues(
      {List<dynamic>? markerIds,
      RemoveMarkersCompleteCallback? complete,
      RemoveMarkersFailCallback? fail,
      RemoveMarkersSuccessCallback? success}) {
    if (markerIds != null) $markerIds = markerIds;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'markerIds': $markerIds,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class RemoveSavedFileFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  RemoveSavedFileFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class RemoveSavedFileOption {
  mpjs.JsObject? $$context$$;

  String $filePath = "";

  Future<String> get filePath async {
    return await $$context$$?.getPropertyValue('filePath') ?? $filePath;
  }

  RemoveSavedFileCompleteCallback? $complete;

  Future<RemoveSavedFileCompleteCallback?> get complete async {
    return $complete;
  }

  RemoveSavedFileFailCallback? $fail;

  Future<RemoveSavedFileFailCallback?> get fail async {
    return $fail;
  }

  RemoveSavedFileSuccessCallback? $success;

  Future<RemoveSavedFileSuccessCallback?> get success async {
    return $success;
  }

  RemoveSavedFileOption({this.$$context$$});

  void setValues(
      {String? filePath,
      RemoveSavedFileCompleteCallback? complete,
      RemoveSavedFileFailCallback? fail,
      RemoveSavedFileSuccessCallback? success}) {
    if (filePath != null) $filePath = filePath;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'filePath': $filePath,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!,
              [(e) => RemoveSavedFileFailCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class RemoveServiceOption {
  mpjs.JsObject? $$context$$;

  String $serviceId = "";

  Future<String> get serviceId async {
    return await $$context$$?.getPropertyValue('serviceId') ?? $serviceId;
  }

  RemoveServiceCompleteCallback? $complete;

  Future<RemoveServiceCompleteCallback?> get complete async {
    return $complete;
  }

  RemoveServiceFailCallback? $fail;

  Future<RemoveServiceFailCallback?> get fail async {
    return $fail;
  }

  RemoveServiceSuccessCallback? $success;

  Future<RemoveServiceSuccessCallback?> get success async {
    return $success;
  }

  RemoveServiceOption({this.$$context$$});

  void setValues(
      {String? serviceId,
      RemoveServiceCompleteCallback? complete,
      RemoveServiceFailCallback? fail,
      RemoveServiceSuccessCallback? success}) {
    if (serviceId != null) $serviceId = serviceId;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'serviceId': $serviceId,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class RemoveStorageOption {
  mpjs.JsObject? $$context$$;

  String $key = "";

  Future<String> get key async {
    return await $$context$$?.getPropertyValue('key') ?? $key;
  }

  RemoveStorageCompleteCallback? $complete;

  Future<RemoveStorageCompleteCallback?> get complete async {
    return $complete;
  }

  RemoveStorageFailCallback? $fail;

  Future<RemoveStorageFailCallback?> get fail async {
    return $fail;
  }

  RemoveStorageSuccessCallback? $success;

  Future<RemoveStorageSuccessCallback?> get success async {
    return $success;
  }

  RemoveStorageOption({this.$$context$$});

  void setValues(
      {String? key,
      RemoveStorageCompleteCallback? complete,
      RemoveStorageFailCallback? fail,
      RemoveStorageSuccessCallback? success}) {
    if (key != null) $key = key;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'key': $key,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class RemoveTabBarBadgeOption {
  mpjs.JsObject? $$context$$;

  num $index = 0;

  Future<num> get index async {
    return await $$context$$?.getPropertyValue('index') ?? $index;
  }

  RemoveTabBarBadgeCompleteCallback? $complete;

  Future<RemoveTabBarBadgeCompleteCallback?> get complete async {
    return $complete;
  }

  RemoveTabBarBadgeFailCallback? $fail;

  Future<RemoveTabBarBadgeFailCallback?> get fail async {
    return $fail;
  }

  RemoveTabBarBadgeSuccessCallback? $success;

  Future<RemoveTabBarBadgeSuccessCallback?> get success async {
    return $success;
  }

  RemoveTabBarBadgeOption({this.$$context$$});

  void setValues(
      {num? index,
      RemoveTabBarBadgeCompleteCallback? complete,
      RemoveTabBarBadgeFailCallback? fail,
      RemoveTabBarBadgeSuccessCallback? success}) {
    if (index != null) $index = index;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'index': $index,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class RemoveVisualLayerOption {
  mpjs.JsObject? $$context$$;

  String $layerId = "";

  Future<String> get layerId async {
    return await $$context$$?.getPropertyValue('layerId') ?? $layerId;
  }

  RemoveVisualLayerCompleteCallback? $complete;

  Future<RemoveVisualLayerCompleteCallback?> get complete async {
    return $complete;
  }

  RemoveVisualLayerFailCallback? $fail;

  Future<RemoveVisualLayerFailCallback?> get fail async {
    return $fail;
  }

  RemoveVisualLayerSuccessCallback? $success;

  Future<RemoveVisualLayerSuccessCallback?> get success async {
    return $success;
  }

  RemoveVisualLayerOption({this.$$context$$});

  void setValues(
      {String? layerId,
      RemoveVisualLayerCompleteCallback? complete,
      RemoveVisualLayerFailCallback? fail,
      RemoveVisualLayerSuccessCallback? success}) {
    if (layerId != null) $layerId = layerId;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'layerId': $layerId,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class RenameFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  RenameFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class RenameOption {
  mpjs.JsObject? $$context$$;

  String $newPath = "";

  Future<String> get newPath async {
    return await $$context$$?.getPropertyValue('newPath') ?? $newPath;
  }

  String $oldPath = "";

  Future<String> get oldPath async {
    return await $$context$$?.getPropertyValue('oldPath') ?? $oldPath;
  }

  RenameCompleteCallback? $complete;

  Future<RenameCompleteCallback?> get complete async {
    return $complete;
  }

  RenameFailCallback? $fail;

  Future<RenameFailCallback?> get fail async {
    return $fail;
  }

  RenameSuccessCallback? $success;

  Future<RenameSuccessCallback?> get success async {
    return $success;
  }

  RenameOption({this.$$context$$});

  void setValues(
      {String? newPath,
      String? oldPath,
      RenameCompleteCallback? complete,
      RenameFailCallback? fail,
      RenameSuccessCallback? success}) {
    if (newPath != null) $newPath = newPath;
    if (oldPath != null) $oldPath = oldPath;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'newPath': $newPath,
      'oldPath': $oldPath,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => RenameFailCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class RenderingContext {
  mpjs.JsObject? $$context$$;

  RenderingContext({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }
}

class RequestOption<T extends dynamic> {
  mpjs.JsObject? $$context$$;

  String $url = "";

  Future<String> get url async {
    return await $$context$$?.getPropertyValue('url') ?? $url;
  }

  RequestCompleteCallback? $complete;

  Future<RequestCompleteCallback?> get complete async {
    return $complete;
  }

  dynamic $data;

  Future<dynamic> get data async {
    return await $$context$$?.getPropertyValue('data') ?? $data;
  }

  dynamic $dataType;

  Future<dynamic> get dataType async {
    return await $$context$$?.getPropertyValue('dataType') ?? $dataType;
  }

  bool? $enableCache;

  Future<bool?> get enableCache async {
    return await $$context$$?.getPropertyValue('enableCache') ?? $enableCache;
  }

  bool? $enableChunked;

  Future<bool?> get enableChunked async {
    return await $$context$$?.getPropertyValue('enableChunked') ??
        $enableChunked;
  }

  bool? $enableHttp2;

  Future<bool?> get enableHttp2 async {
    return await $$context$$?.getPropertyValue('enableHttp2') ?? $enableHttp2;
  }

  bool? $enableHttpDNS;

  Future<bool?> get enableHttpDNS async {
    return await $$context$$?.getPropertyValue('enableHttpDNS') ??
        $enableHttpDNS;
  }

  bool? $enableQuic;

  Future<bool?> get enableQuic async {
    return await $$context$$?.getPropertyValue('enableQuic') ?? $enableQuic;
  }

  RequestFailCallback? $fail;

  Future<RequestFailCallback?> get fail async {
    return $fail;
  }

  bool? $forceCellularNetwork;

  Future<bool?> get forceCellularNetwork async {
    return await $$context$$?.getPropertyValue('forceCellularNetwork') ??
        $forceCellularNetwork;
  }

  IAnyObject? $header;

  Future<IAnyObject?> get header async {
    return IAnyObject($$context$$: $$context$$?.getProperty('header'));
  }

  String? $httpDNSServiceId;

  Future<String?> get httpDNSServiceId async {
    return await $$context$$?.getPropertyValue('httpDNSServiceId') ??
        $httpDNSServiceId;
  }

  dynamic $method;

  Future<dynamic> get method async {
    return await $$context$$?.getPropertyValue('method') ?? $method;
  }

  dynamic $responseType;

  Future<dynamic> get responseType async {
    return await $$context$$?.getPropertyValue('responseType') ?? $responseType;
  }

  RequestSuccessCallback<T>? $success;

  Future<RequestSuccessCallback<T>?> get success async {
    return $success;
  }

  num? $timeout;

  Future<num?> get timeout async {
    return await $$context$$?.getPropertyValue('timeout') ?? $timeout;
  }

  RequestOption({this.$$context$$});

  void setValues(
      {String? url,
      RequestCompleteCallback? complete,
      dynamic data,
      dynamic dataType,
      bool? enableCache,
      bool? enableChunked,
      bool? enableHttp2,
      bool? enableHttpDNS,
      bool? enableQuic,
      RequestFailCallback? fail,
      bool? forceCellularNetwork,
      IAnyObject? header,
      String? httpDNSServiceId,
      dynamic method,
      dynamic responseType,
      RequestSuccessCallback<T>? success,
      num? timeout}) {
    if (url != null) $url = url;
    if (complete != null) $complete = complete;
    if (data != null) $data = data;
    if (dataType != null) $dataType = dataType;
    if (enableCache != null) $enableCache = enableCache;
    if (enableChunked != null) $enableChunked = enableChunked;
    if (enableHttp2 != null) $enableHttp2 = enableHttp2;
    if (enableHttpDNS != null) $enableHttpDNS = enableHttpDNS;
    if (enableQuic != null) $enableQuic = enableQuic;
    if (fail != null) $fail = fail;
    if (forceCellularNetwork != null)
      $forceCellularNetwork = forceCellularNetwork;
    if (header != null) $header = header;
    if (httpDNSServiceId != null) $httpDNSServiceId = httpDNSServiceId;
    if (method != null) $method = method;
    if (responseType != null) $responseType = responseType;
    if (success != null) $success = success;
    if (timeout != null) $timeout = timeout;
  }

  Map toJson() {
    return {
      'url': $url,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'data': $data,
      'dataType': $dataType,
      'enableCache': $enableCache,
      'enableChunked': $enableChunked,
      'enableHttp2': $enableHttp2,
      'enableHttpDNS': $enableHttpDNS,
      'enableQuic': $enableQuic,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => Err($$context$$: e)])
          : null,
      'forceCellularNetwork': $forceCellularNetwork,
      'header': $header,
      'httpDNSServiceId': $httpDNSServiceId,
      'method': $method,
      'responseType': $responseType,
      'success': $success,
      'timeout': $timeout
    }..removeWhere((key, value) => value == null);
  }
}

class RequestOrderPaymentOption {
  mpjs.JsObject? $$context$$;

  String $nonceStr = "";

  Future<String> get nonceStr async {
    return await $$context$$?.getPropertyValue('nonceStr') ?? $nonceStr;
  }

  String $package = "";

  Future<String> get package async {
    return await $$context$$?.getPropertyValue('package') ?? $package;
  }

  String $paySign = "";

  Future<String> get paySign async {
    return await $$context$$?.getPropertyValue('paySign') ?? $paySign;
  }

  String $timeStamp = "";

  Future<String> get timeStamp async {
    return await $$context$$?.getPropertyValue('timeStamp') ?? $timeStamp;
  }

  RequestOrderPaymentCompleteCallback? $complete;

  Future<RequestOrderPaymentCompleteCallback?> get complete async {
    return $complete;
  }

  String? $extUserUin;

  Future<String?> get extUserUin async {
    return await $$context$$?.getPropertyValue('extUserUin') ?? $extUserUin;
  }

  RequestOrderPaymentFailCallback? $fail;

  Future<RequestOrderPaymentFailCallback?> get fail async {
    return $fail;
  }

  IAnyObject? $orderInfo;

  Future<IAnyObject?> get orderInfo async {
    return IAnyObject($$context$$: $$context$$?.getProperty('orderInfo'));
  }

  dynamic $signType;

  Future<dynamic> get signType async {
    return await $$context$$?.getPropertyValue('signType') ?? $signType;
  }

  RequestOrderPaymentSuccessCallback? $success;

  Future<RequestOrderPaymentSuccessCallback?> get success async {
    return $success;
  }

  RequestOrderPaymentOption({this.$$context$$});

  void setValues(
      {String? nonceStr,
      String? package,
      String? paySign,
      String? timeStamp,
      RequestOrderPaymentCompleteCallback? complete,
      String? extUserUin,
      RequestOrderPaymentFailCallback? fail,
      IAnyObject? orderInfo,
      dynamic signType,
      RequestOrderPaymentSuccessCallback? success}) {
    if (nonceStr != null) $nonceStr = nonceStr;
    if (package != null) $package = package;
    if (paySign != null) $paySign = paySign;
    if (timeStamp != null) $timeStamp = timeStamp;
    if (complete != null) $complete = complete;
    if (extUserUin != null) $extUserUin = extUserUin;
    if (fail != null) $fail = fail;
    if (orderInfo != null) $orderInfo = orderInfo;
    if (signType != null) $signType = signType;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'nonceStr': $nonceStr,
      'package': $package,
      'paySign': $paySign,
      'timeStamp': $timeStamp,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'extUserUin': $extUserUin,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'orderInfo': $orderInfo,
      'signType': $signType,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class RequestPaymentOption {
  mpjs.JsObject? $$context$$;

  String $nonceStr = "";

  Future<String> get nonceStr async {
    return await $$context$$?.getPropertyValue('nonceStr') ?? $nonceStr;
  }

  String $package = "";

  Future<String> get package async {
    return await $$context$$?.getPropertyValue('package') ?? $package;
  }

  String $paySign = "";

  Future<String> get paySign async {
    return await $$context$$?.getPropertyValue('paySign') ?? $paySign;
  }

  String $timeStamp = "";

  Future<String> get timeStamp async {
    return await $$context$$?.getPropertyValue('timeStamp') ?? $timeStamp;
  }

  RequestPaymentCompleteCallback? $complete;

  Future<RequestPaymentCompleteCallback?> get complete async {
    return $complete;
  }

  RequestPaymentFailCallback? $fail;

  Future<RequestPaymentFailCallback?> get fail async {
    return $fail;
  }

  dynamic $signType;

  Future<dynamic> get signType async {
    return await $$context$$?.getPropertyValue('signType') ?? $signType;
  }

  RequestPaymentSuccessCallback? $success;

  Future<RequestPaymentSuccessCallback?> get success async {
    return $success;
  }

  RequestPaymentOption({this.$$context$$});

  void setValues(
      {String? nonceStr,
      String? package,
      String? paySign,
      String? timeStamp,
      RequestPaymentCompleteCallback? complete,
      RequestPaymentFailCallback? fail,
      dynamic signType,
      RequestPaymentSuccessCallback? success}) {
    if (nonceStr != null) $nonceStr = nonceStr;
    if (package != null) $package = package;
    if (paySign != null) $paySign = paySign;
    if (timeStamp != null) $timeStamp = timeStamp;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (signType != null) $signType = signType;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'nonceStr': $nonceStr,
      'package': $package,
      'paySign': $paySign,
      'timeStamp': $timeStamp,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'signType': $signType,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class RequestPictureInPictureOption {
  mpjs.JsObject? $$context$$;

  RequestPictureInPictureCompleteCallback? $complete;

  Future<RequestPictureInPictureCompleteCallback?> get complete async {
    return $complete;
  }

  RequestPictureInPictureFailCallback? $fail;

  Future<RequestPictureInPictureFailCallback?> get fail async {
    return $fail;
  }

  RequestPictureInPictureSuccessCallback? $success;

  Future<RequestPictureInPictureSuccessCallback?> get success async {
    return $success;
  }

  RequestPictureInPictureOption({this.$$context$$});

  void setValues(
      {RequestPictureInPictureCompleteCallback? complete,
      RequestPictureInPictureFailCallback? fail,
      RequestPictureInPictureSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class RequestPluginPaymentOption {
  mpjs.JsObject? $$context$$;

  num $fee = 0;

  Future<num> get fee async {
    return await $$context$$?.getPropertyValue('fee') ?? $fee;
  }

  IAnyObject $paymentArgs = IAnyObject();

  Future<IAnyObject> get paymentArgs async {
    return IAnyObject($$context$$: $$context$$?.getProperty('paymentArgs'));
  }

  dynamic $version;

  Future<dynamic> get version async {
    return await $$context$$?.getPropertyValue('version') ?? $version;
  }

  RequestPluginPaymentCompleteCallback? $complete;

  Future<RequestPluginPaymentCompleteCallback?> get complete async {
    return $complete;
  }

  String? $currencyType;

  Future<String?> get currencyType async {
    return await $$context$$?.getPropertyValue('currencyType') ?? $currencyType;
  }

  RequestPluginPaymentFailCallback? $fail;

  Future<RequestPluginPaymentFailCallback?> get fail async {
    return $fail;
  }

  RequestPluginPaymentSuccessCallback? $success;

  Future<RequestPluginPaymentSuccessCallback?> get success async {
    return $success;
  }

  RequestPluginPaymentOption({this.$$context$$});

  void setValues(
      {num? fee,
      IAnyObject? paymentArgs,
      dynamic version,
      RequestPluginPaymentCompleteCallback? complete,
      String? currencyType,
      RequestPluginPaymentFailCallback? fail,
      RequestPluginPaymentSuccessCallback? success}) {
    if (fee != null) $fee = fee;
    if (paymentArgs != null) $paymentArgs = paymentArgs;
    if (version != null) $version = version;
    if (complete != null) $complete = complete;
    if (currencyType != null) $currencyType = currencyType;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'fee': $fee,
      'paymentArgs': $paymentArgs,
      'version': $version,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'currencyType': $currencyType,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class RequestProfile {
  mpjs.JsObject? $$context$$;

  num $SSLconnectionEnd = 0;

  Future<num> get SSLconnectionEnd async {
    return await $$context$$?.getPropertyValue('SSLconnectionEnd') ??
        $SSLconnectionEnd;
  }

  num $SSLconnectionStart = 0;

  Future<num> get SSLconnectionStart async {
    return await $$context$$?.getPropertyValue('SSLconnectionStart') ??
        $SSLconnectionStart;
  }

  num $connectEnd = 0;

  Future<num> get connectEnd async {
    return await $$context$$?.getPropertyValue('connectEnd') ?? $connectEnd;
  }

  num $connectStart = 0;

  Future<num> get connectStart async {
    return await $$context$$?.getPropertyValue('connectStart') ?? $connectStart;
  }

  num $domainLookupEnd = 0;

  Future<num> get domainLookupEnd async {
    return await $$context$$?.getPropertyValue('domainLookupEnd') ??
        $domainLookupEnd;
  }

  num $domainLookupStart = 0;

  Future<num> get domainLookupStart async {
    return await $$context$$?.getPropertyValue('domainLookupStart') ??
        $domainLookupStart;
  }

  num $downstreamThroughputKbpsEstimate = 0;

  Future<num> get downstreamThroughputKbpsEstimate async {
    return await $$context$$
            ?.getPropertyValue('downstreamThroughputKbpsEstimate') ??
        $downstreamThroughputKbpsEstimate;
  }

  num $estimate_nettype = 0;

  Future<num> get estimate_nettype async {
    return await $$context$$?.getPropertyValue('estimate_nettype') ??
        $estimate_nettype;
  }

  num $fetchStart = 0;

  Future<num> get fetchStart async {
    return await $$context$$?.getPropertyValue('fetchStart') ?? $fetchStart;
  }

  num $httpRttEstimate = 0;

  Future<num> get httpRttEstimate async {
    return await $$context$$?.getPropertyValue('httpRttEstimate') ??
        $httpRttEstimate;
  }

  String $peerIP = "";

  Future<String> get peerIP async {
    return await $$context$$?.getPropertyValue('peerIP') ?? $peerIP;
  }

  num $port = 0;

  Future<num> get port async {
    return await $$context$$?.getPropertyValue('port') ?? $port;
  }

  String $protocol = "";

  Future<String> get protocol async {
    return await $$context$$?.getPropertyValue('protocol') ?? $protocol;
  }

  num $receivedBytedCount = 0;

  Future<num> get receivedBytedCount async {
    return await $$context$$?.getPropertyValue('receivedBytedCount') ??
        $receivedBytedCount;
  }

  num $redirectEnd = 0;

  Future<num> get redirectEnd async {
    return await $$context$$?.getPropertyValue('redirectEnd') ?? $redirectEnd;
  }

  num $redirectStart = 0;

  Future<num> get redirectStart async {
    return await $$context$$?.getPropertyValue('redirectStart') ??
        $redirectStart;
  }

  num $requestEnd = 0;

  Future<num> get requestEnd async {
    return await $$context$$?.getPropertyValue('requestEnd') ?? $requestEnd;
  }

  num $requestStart = 0;

  Future<num> get requestStart async {
    return await $$context$$?.getPropertyValue('requestStart') ?? $requestStart;
  }

  num $responseEnd = 0;

  Future<num> get responseEnd async {
    return await $$context$$?.getPropertyValue('responseEnd') ?? $responseEnd;
  }

  num $responseStart = 0;

  Future<num> get responseStart async {
    return await $$context$$?.getPropertyValue('responseStart') ??
        $responseStart;
  }

  num $rtt = 0;

  Future<num> get rtt async {
    return await $$context$$?.getPropertyValue('rtt') ?? $rtt;
  }

  num $sendBytesCount = 0;

  Future<num> get sendBytesCount async {
    return await $$context$$?.getPropertyValue('sendBytesCount') ??
        $sendBytesCount;
  }

  bool $socketReused = false;

  Future<bool> get socketReused async {
    return await $$context$$?.getPropertyValue('socketReused') ?? $socketReused;
  }

  num $throughputKbps = 0;

  Future<num> get throughputKbps async {
    return await $$context$$?.getPropertyValue('throughputKbps') ??
        $throughputKbps;
  }

  num $transportRttEstimate = 0;

  Future<num> get transportRttEstimate async {
    return await $$context$$?.getPropertyValue('transportRttEstimate') ??
        $transportRttEstimate;
  }

  RequestProfile({this.$$context$$});

  void setValues(
      {num? SSLconnectionEnd,
      num? SSLconnectionStart,
      num? connectEnd,
      num? connectStart,
      num? domainLookupEnd,
      num? domainLookupStart,
      num? downstreamThroughputKbpsEstimate,
      num? estimate_nettype,
      num? fetchStart,
      num? httpRttEstimate,
      String? peerIP,
      num? port,
      String? protocol,
      num? receivedBytedCount,
      num? redirectEnd,
      num? redirectStart,
      num? requestEnd,
      num? requestStart,
      num? responseEnd,
      num? responseStart,
      num? rtt,
      num? sendBytesCount,
      bool? socketReused,
      num? throughputKbps,
      num? transportRttEstimate}) {
    if (SSLconnectionEnd != null) $SSLconnectionEnd = SSLconnectionEnd;
    if (SSLconnectionStart != null) $SSLconnectionStart = SSLconnectionStart;
    if (connectEnd != null) $connectEnd = connectEnd;
    if (connectStart != null) $connectStart = connectStart;
    if (domainLookupEnd != null) $domainLookupEnd = domainLookupEnd;
    if (domainLookupStart != null) $domainLookupStart = domainLookupStart;
    if (downstreamThroughputKbpsEstimate != null)
      $downstreamThroughputKbpsEstimate = downstreamThroughputKbpsEstimate;
    if (estimate_nettype != null) $estimate_nettype = estimate_nettype;
    if (fetchStart != null) $fetchStart = fetchStart;
    if (httpRttEstimate != null) $httpRttEstimate = httpRttEstimate;
    if (peerIP != null) $peerIP = peerIP;
    if (port != null) $port = port;
    if (protocol != null) $protocol = protocol;
    if (receivedBytedCount != null) $receivedBytedCount = receivedBytedCount;
    if (redirectEnd != null) $redirectEnd = redirectEnd;
    if (redirectStart != null) $redirectStart = redirectStart;
    if (requestEnd != null) $requestEnd = requestEnd;
    if (requestStart != null) $requestStart = requestStart;
    if (responseEnd != null) $responseEnd = responseEnd;
    if (responseStart != null) $responseStart = responseStart;
    if (rtt != null) $rtt = rtt;
    if (sendBytesCount != null) $sendBytesCount = sendBytesCount;
    if (socketReused != null) $socketReused = socketReused;
    if (throughputKbps != null) $throughputKbps = throughputKbps;
    if (transportRttEstimate != null)
      $transportRttEstimate = transportRttEstimate;
  }

  Map toJson() {
    return {
      'SSLconnectionEnd': $SSLconnectionEnd,
      'SSLconnectionStart': $SSLconnectionStart,
      'connectEnd': $connectEnd,
      'connectStart': $connectStart,
      'domainLookupEnd': $domainLookupEnd,
      'domainLookupStart': $domainLookupStart,
      'downstreamThroughputKbpsEstimate': $downstreamThroughputKbpsEstimate,
      'estimate_nettype': $estimate_nettype,
      'fetchStart': $fetchStart,
      'httpRttEstimate': $httpRttEstimate,
      'peerIP': $peerIP,
      'port': $port,
      'protocol': $protocol,
      'receivedBytedCount': $receivedBytedCount,
      'redirectEnd': $redirectEnd,
      'redirectStart': $redirectStart,
      'requestEnd': $requestEnd,
      'requestStart': $requestStart,
      'responseEnd': $responseEnd,
      'responseStart': $responseStart,
      'rtt': $rtt,
      'sendBytesCount': $sendBytesCount,
      'socketReused': $socketReused,
      'throughputKbps': $throughputKbps,
      'transportRttEstimate': $transportRttEstimate
    }..removeWhere((key, value) => value == null);
  }
}

class RequestSubscribeDeviceMessageFailCallbackResult {
  mpjs.JsObject? $$context$$;

  num $errCode = 0;

  Future<num> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  RequestSubscribeDeviceMessageFailCallbackResult({this.$$context$$});

  void setValues({num? errCode, String? errMsg}) {
    if (errCode != null) $errCode = errCode;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errCode': $errCode, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class RequestSubscribeDeviceMessageOption {
  mpjs.JsObject? $$context$$;

  String $modelId = "";

  Future<String> get modelId async {
    return await $$context$$?.getPropertyValue('modelId') ?? $modelId;
  }

  String $sn = "";

  Future<String> get sn async {
    return await $$context$$?.getPropertyValue('sn') ?? $sn;
  }

  String $snTicket = "";

  Future<String> get snTicket async {
    return await $$context$$?.getPropertyValue('snTicket') ?? $snTicket;
  }

  List<dynamic> $tmplIds = <dynamic>[];

  Future<List<dynamic>> get tmplIds async {
    return await $$context$$?.getPropertyValue('tmplIds') ?? $tmplIds;
  }

  RequestSubscribeDeviceMessageCompleteCallback? $complete;

  Future<RequestSubscribeDeviceMessageCompleteCallback?> get complete async {
    return $complete;
  }

  RequestSubscribeDeviceMessageFailCallback? $fail;

  Future<RequestSubscribeDeviceMessageFailCallback?> get fail async {
    return $fail;
  }

  RequestSubscribeDeviceMessageSuccessCallback? $success;

  Future<RequestSubscribeDeviceMessageSuccessCallback?> get success async {
    return $success;
  }

  RequestSubscribeDeviceMessageOption({this.$$context$$});

  void setValues(
      {String? modelId,
      String? sn,
      String? snTicket,
      List<dynamic>? tmplIds,
      RequestSubscribeDeviceMessageCompleteCallback? complete,
      RequestSubscribeDeviceMessageFailCallback? fail,
      RequestSubscribeDeviceMessageSuccessCallback? success}) {
    if (modelId != null) $modelId = modelId;
    if (sn != null) $sn = sn;
    if (snTicket != null) $snTicket = snTicket;
    if (tmplIds != null) $tmplIds = tmplIds;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'modelId': $modelId,
      'sn': $sn,
      'snTicket': $snTicket,
      'tmplIds': $tmplIds,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [
              (e) => RequestSubscribeDeviceMessageFailCallbackResult(
                  $$context$$: e)
            ])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [
              (e) => RequestSubscribeDeviceMessageSuccessCallbackResult(
                  $$context$$: e)
            ])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class RequestSubscribeDeviceMessageSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  RequestSubscribeDeviceMessageSuccessCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class RequestSubscribeMessageFailCallbackResult {
  mpjs.JsObject? $$context$$;

  num $errCode = 0;

  Future<num> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  RequestSubscribeMessageFailCallbackResult({this.$$context$$});

  void setValues({num? errCode, String? errMsg}) {
    if (errCode != null) $errCode = errCode;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errCode': $errCode, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class RequestSubscribeMessageOption {
  mpjs.JsObject? $$context$$;

  List<dynamic> $tmplIds = <dynamic>[];

  Future<List<dynamic>> get tmplIds async {
    return await $$context$$?.getPropertyValue('tmplIds') ?? $tmplIds;
  }

  RequestSubscribeMessageCompleteCallback? $complete;

  Future<RequestSubscribeMessageCompleteCallback?> get complete async {
    return $complete;
  }

  RequestSubscribeMessageFailCallback? $fail;

  Future<RequestSubscribeMessageFailCallback?> get fail async {
    return $fail;
  }

  RequestSubscribeMessageSuccessCallback? $success;

  Future<RequestSubscribeMessageSuccessCallback?> get success async {
    return $success;
  }

  RequestSubscribeMessageOption({this.$$context$$});

  void setValues(
      {List<dynamic>? tmplIds,
      RequestSubscribeMessageCompleteCallback? complete,
      RequestSubscribeMessageFailCallback? fail,
      RequestSubscribeMessageSuccessCallback? success}) {
    if (tmplIds != null) $tmplIds = tmplIds;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'tmplIds': $tmplIds,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [
              (e) => RequestSubscribeMessageFailCallbackResult($$context$$: e)
            ])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [
              (e) =>
                  RequestSubscribeMessageSuccessCallbackResult($$context$$: e)
            ])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class RequestSubscribeMessageSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  RequestSubscribeMessageSuccessCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class RequestSuccessCallbackResult<T extends dynamic> {
  mpjs.JsObject? $$context$$;

  List<String> $cookies = <String>[];

  Future<List<String>> get cookies async {
    return await $$context$$?.getPropertyValue('cookies') ?? $cookies;
  }

  T? $data;

  Future<T?> get data async {
    return await $$context$$?.getPropertyValue('data') ?? $data;
  }

  IAnyObject $header = IAnyObject();

  Future<IAnyObject> get header async {
    return IAnyObject($$context$$: $$context$$?.getProperty('header'));
  }

  RequestProfile $profile = RequestProfile();

  Future<RequestProfile> get profile async {
    return RequestProfile($$context$$: $$context$$?.getProperty('profile'));
  }

  num $statusCode = 0;

  Future<num> get statusCode async {
    return await $$context$$?.getPropertyValue('statusCode') ?? $statusCode;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  RequestSuccessCallbackResult({this.$$context$$});

  void setValues(
      {List<String>? cookies,
      T? data,
      IAnyObject? header,
      RequestProfile? profile,
      num? statusCode,
      String? errMsg}) {
    if (cookies != null) $cookies = cookies;
    if (data != null) $data = data;
    if (header != null) $header = header;
    if (profile != null) $profile = profile;
    if (statusCode != null) $statusCode = statusCode;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'cookies': $cookies,
      'data': $data,
      'header': $header,
      'profile': $profile,
      'statusCode': $statusCode,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class ReserveChannelsLiveOption {
  mpjs.JsObject? $$context$$;

  String $noticeId = "";

  Future<String> get noticeId async {
    return await $$context$$?.getPropertyValue('noticeId') ?? $noticeId;
  }

  ReserveChannelsLiveOption({this.$$context$$});

  void setValues({String? noticeId}) {
    if (noticeId != null) $noticeId = noticeId;
  }

  Map toJson() {
    return {'noticeId': $noticeId}..removeWhere((key, value) => value == null);
  }
}

class Result {
  mpjs.JsObject? $$context$$;

  ArrayBuffer $data = ArrayBuffer();

  Future<ArrayBuffer> get data async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('data'));
  }

  Result({this.$$context$$});

  void setValues({ArrayBuffer? data}) {
    if (data != null) $data = data;
  }

  Map toJson() {
    return {'data': $data}..removeWhere((key, value) => value == null);
  }
}

class ResumeBGMOption {
  mpjs.JsObject? $$context$$;

  ResumeBGMCompleteCallback? $complete;

  Future<ResumeBGMCompleteCallback?> get complete async {
    return $complete;
  }

  ResumeBGMFailCallback? $fail;

  Future<ResumeBGMFailCallback?> get fail async {
    return $fail;
  }

  ResumeBGMSuccessCallback? $success;

  Future<ResumeBGMSuccessCallback?> get success async {
    return $success;
  }

  ResumeBGMOption({this.$$context$$});

  void setValues(
      {ResumeBGMCompleteCallback? complete,
      ResumeBGMFailCallback? fail,
      ResumeBGMSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ResumeOption {
  mpjs.JsObject? $$context$$;

  ResumeCompleteCallback? $complete;

  Future<ResumeCompleteCallback?> get complete async {
    return $complete;
  }

  ResumeFailCallback? $fail;

  Future<ResumeFailCallback?> get fail async {
    return $fail;
  }

  ResumeSuccessCallback? $success;

  Future<ResumeSuccessCallback?> get success async {
    return $success;
  }

  ResumeOption({this.$$context$$});

  void setValues(
      {ResumeCompleteCallback? complete,
      ResumeFailCallback? fail,
      ResumeSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class RewardedVideoAdOnCloseListenerResult {
  mpjs.JsObject? $$context$$;

  bool $isEnded = false;

  Future<bool> get isEnded async {
    return await $$context$$?.getPropertyValue('isEnded') ?? $isEnded;
  }

  RewardedVideoAdOnCloseListenerResult({this.$$context$$});

  void setValues({bool? isEnded}) {
    if (isEnded != null) $isEnded = isEnded;
  }

  Map toJson() {
    return {'isEnded': $isEnded}..removeWhere((key, value) => value == null);
  }
}

class RewardedVideoAdOnErrorListenerResult {
  mpjs.JsObject? $$context$$;

  dynamic $errCode;

  Future<dynamic> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  RewardedVideoAdOnErrorListenerResult({this.$$context$$});

  void setValues({dynamic errCode, String? errMsg}) {
    if (errCode != null) $errCode = errCode;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errCode': $errCode, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class RmdirFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  RmdirFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class RmdirOption {
  mpjs.JsObject? $$context$$;

  String $dirPath = "";

  Future<String> get dirPath async {
    return await $$context$$?.getPropertyValue('dirPath') ?? $dirPath;
  }

  RmdirCompleteCallback? $complete;

  Future<RmdirCompleteCallback?> get complete async {
    return $complete;
  }

  RmdirFailCallback? $fail;

  Future<RmdirFailCallback?> get fail async {
    return $fail;
  }

  bool? $recursive;

  Future<bool?> get recursive async {
    return await $$context$$?.getPropertyValue('recursive') ?? $recursive;
  }

  RmdirSuccessCallback? $success;

  Future<RmdirSuccessCallback?> get success async {
    return $success;
  }

  RmdirOption({this.$$context$$});

  void setValues(
      {String? dirPath,
      RmdirCompleteCallback? complete,
      RmdirFailCallback? fail,
      bool? recursive,
      RmdirSuccessCallback? success}) {
    if (dirPath != null) $dirPath = dirPath;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (recursive != null) $recursive = recursive;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'dirPath': $dirPath,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => RmdirFailCallbackResult($$context$$: e)])
          : null,
      'recursive': $recursive,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class RunOCROption {
  mpjs.JsObject? $$context$$;

  ArrayBuffer $frameBuffer = ArrayBuffer();

  Future<ArrayBuffer> get frameBuffer async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('frameBuffer'));
  }

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  RunOCROption({this.$$context$$});

  void setValues({ArrayBuffer? frameBuffer, num? height, num? width}) {
    if (frameBuffer != null) $frameBuffer = frameBuffer;
    if (height != null) $height = height;
    if (width != null) $width = width;
  }

  Map toJson() {
    return {'frameBuffer': $frameBuffer, 'height': $height, 'width': $width}
      ..removeWhere((key, value) => value == null);
  }
}

class SafeArea {
  mpjs.JsObject? $$context$$;

  num $bottom = 0;

  Future<num> get bottom async {
    return await $$context$$?.getPropertyValue('bottom') ?? $bottom;
  }

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  num $left = 0;

  Future<num> get left async {
    return await $$context$$?.getPropertyValue('left') ?? $left;
  }

  num $right = 0;

  Future<num> get right async {
    return await $$context$$?.getPropertyValue('right') ?? $right;
  }

  num $top = 0;

  Future<num> get top async {
    return await $$context$$?.getPropertyValue('top') ?? $top;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  SafeArea({this.$$context$$});

  void setValues(
      {num? bottom, num? height, num? left, num? right, num? top, num? width}) {
    if (bottom != null) $bottom = bottom;
    if (height != null) $height = height;
    if (left != null) $left = left;
    if (right != null) $right = right;
    if (top != null) $top = top;
    if (width != null) $width = width;
  }

  Map toJson() {
    return {
      'bottom': $bottom,
      'height': $height,
      'left': $left,
      'right': $right,
      'top': $top,
      'width': $width
    }..removeWhere((key, value) => value == null);
  }
}

class SaveFileFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  SaveFileFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class SaveFileOption {
  mpjs.JsObject? $$context$$;

  String $tempFilePath = "";

  Future<String> get tempFilePath async {
    return await $$context$$?.getPropertyValue('tempFilePath') ?? $tempFilePath;
  }

  SaveFileCompleteCallback? $complete;

  Future<SaveFileCompleteCallback?> get complete async {
    return $complete;
  }

  SaveFileFailCallback? $fail;

  Future<SaveFileFailCallback?> get fail async {
    return $fail;
  }

  String? $filePath;

  Future<String?> get filePath async {
    return await $$context$$?.getPropertyValue('filePath') ?? $filePath;
  }

  SaveFileSuccessCallback? $success;

  Future<SaveFileSuccessCallback?> get success async {
    return $success;
  }

  SaveFileOption({this.$$context$$});

  void setValues(
      {String? tempFilePath,
      SaveFileCompleteCallback? complete,
      SaveFileFailCallback? fail,
      String? filePath,
      SaveFileSuccessCallback? success}) {
    if (tempFilePath != null) $tempFilePath = tempFilePath;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (filePath != null) $filePath = filePath;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'tempFilePath': $tempFilePath,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => SaveFileFailCallbackResult($$context$$: e)])
          : null,
      'filePath': $filePath,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => SaveFileSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SaveFileSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $savedFilePath = "";

  Future<String> get savedFilePath async {
    return await $$context$$?.getPropertyValue('savedFilePath') ??
        $savedFilePath;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  SaveFileSuccessCallbackResult({this.$$context$$});

  void setValues({String? savedFilePath, String? errMsg}) {
    if (savedFilePath != null) $savedFilePath = savedFilePath;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'savedFilePath': $savedFilePath, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class SaveFileToDiskOption {
  mpjs.JsObject? $$context$$;

  String $filePath = "";

  Future<String> get filePath async {
    return await $$context$$?.getPropertyValue('filePath') ?? $filePath;
  }

  SaveFileToDiskCompleteCallback? $complete;

  Future<SaveFileToDiskCompleteCallback?> get complete async {
    return $complete;
  }

  SaveFileToDiskFailCallback? $fail;

  Future<SaveFileToDiskFailCallback?> get fail async {
    return $fail;
  }

  SaveFileToDiskSuccessCallback? $success;

  Future<SaveFileToDiskSuccessCallback?> get success async {
    return $success;
  }

  SaveFileToDiskOption({this.$$context$$});

  void setValues(
      {String? filePath,
      SaveFileToDiskCompleteCallback? complete,
      SaveFileToDiskFailCallback? fail,
      SaveFileToDiskSuccessCallback? success}) {
    if (filePath != null) $filePath = filePath;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'filePath': $filePath,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SaveImageToPhotosAlbumOption {
  mpjs.JsObject? $$context$$;

  String $filePath = "";

  Future<String> get filePath async {
    return await $$context$$?.getPropertyValue('filePath') ?? $filePath;
  }

  SaveImageToPhotosAlbumCompleteCallback? $complete;

  Future<SaveImageToPhotosAlbumCompleteCallback?> get complete async {
    return $complete;
  }

  SaveImageToPhotosAlbumFailCallback? $fail;

  Future<SaveImageToPhotosAlbumFailCallback?> get fail async {
    return $fail;
  }

  SaveImageToPhotosAlbumSuccessCallback? $success;

  Future<SaveImageToPhotosAlbumSuccessCallback?> get success async {
    return $success;
  }

  SaveImageToPhotosAlbumOption({this.$$context$$});

  void setValues(
      {String? filePath,
      SaveImageToPhotosAlbumCompleteCallback? complete,
      SaveImageToPhotosAlbumFailCallback? fail,
      SaveImageToPhotosAlbumSuccessCallback? success}) {
    if (filePath != null) $filePath = filePath;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'filePath': $filePath,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SaveVideoToPhotosAlbumOption {
  mpjs.JsObject? $$context$$;

  String $filePath = "";

  Future<String> get filePath async {
    return await $$context$$?.getPropertyValue('filePath') ?? $filePath;
  }

  SaveVideoToPhotosAlbumCompleteCallback? $complete;

  Future<SaveVideoToPhotosAlbumCompleteCallback?> get complete async {
    return $complete;
  }

  SaveVideoToPhotosAlbumFailCallback? $fail;

  Future<SaveVideoToPhotosAlbumFailCallback?> get fail async {
    return $fail;
  }

  SaveVideoToPhotosAlbumSuccessCallback? $success;

  Future<SaveVideoToPhotosAlbumSuccessCallback?> get success async {
    return $success;
  }

  SaveVideoToPhotosAlbumOption({this.$$context$$});

  void setValues(
      {String? filePath,
      SaveVideoToPhotosAlbumCompleteCallback? complete,
      SaveVideoToPhotosAlbumFailCallback? fail,
      SaveVideoToPhotosAlbumSuccessCallback? success}) {
    if (filePath != null) $filePath = filePath;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'filePath': $filePath,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ScanCodeOption {
  mpjs.JsObject? $$context$$;

  ScanCodeCompleteCallback? $complete;

  Future<ScanCodeCompleteCallback?> get complete async {
    return $complete;
  }

  ScanCodeFailCallback? $fail;

  Future<ScanCodeFailCallback?> get fail async {
    return $fail;
  }

  bool? $onlyFromCamera;

  Future<bool?> get onlyFromCamera async {
    return await $$context$$?.getPropertyValue('onlyFromCamera') ??
        $onlyFromCamera;
  }

  Array<dynamic>? $scanType;

  Future<Array<dynamic>?> get scanType async {
    return $scanType;
  }

  ScanCodeSuccessCallback? $success;

  Future<ScanCodeSuccessCallback?> get success async {
    return $success;
  }

  ScanCodeOption({this.$$context$$});

  void setValues(
      {ScanCodeCompleteCallback? complete,
      ScanCodeFailCallback? fail,
      bool? onlyFromCamera,
      Array<dynamic>? scanType,
      ScanCodeSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (onlyFromCamera != null) $onlyFromCamera = onlyFromCamera;
    if (scanType != null) $scanType = scanType;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'onlyFromCamera': $onlyFromCamera,
      'scanType': $scanType,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => ScanCodeSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ScanCodeSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $charSet = "";

  Future<String> get charSet async {
    return await $$context$$?.getPropertyValue('charSet') ?? $charSet;
  }

  String $path = "";

  Future<String> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  String $rawData = "";

  Future<String> get rawData async {
    return await $$context$$?.getPropertyValue('rawData') ?? $rawData;
  }

  String $result = "";

  Future<String> get result async {
    return await $$context$$?.getPropertyValue('result') ?? $result;
  }

  dynamic $scanType;

  Future<dynamic> get scanType async {
    return await $$context$$?.getPropertyValue('scanType') ?? $scanType;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  ScanCodeSuccessCallbackResult({this.$$context$$});

  void setValues(
      {String? charSet,
      String? path,
      String? rawData,
      String? result,
      dynamic scanType,
      String? errMsg}) {
    if (charSet != null) $charSet = charSet;
    if (path != null) $path = path;
    if (rawData != null) $rawData = rawData;
    if (result != null) $result = result;
    if (scanType != null) $scanType = scanType;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'charSet': $charSet,
      'path': $path,
      'rawData': $rawData,
      'result': $result,
      'scanType': $scanType,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class ScrollOffsetCallbackResult {
  mpjs.JsObject? $$context$$;

  IAnyObject $dataset = IAnyObject();

  Future<IAnyObject> get dataset async {
    return IAnyObject($$context$$: $$context$$?.getProperty('dataset'));
  }

  String $id = "";

  Future<String> get id async {
    return await $$context$$?.getPropertyValue('id') ?? $id;
  }

  num $scrollLeft = 0;

  Future<num> get scrollLeft async {
    return await $$context$$?.getPropertyValue('scrollLeft') ?? $scrollLeft;
  }

  num $scrollTop = 0;

  Future<num> get scrollTop async {
    return await $$context$$?.getPropertyValue('scrollTop') ?? $scrollTop;
  }

  ScrollOffsetCallbackResult({this.$$context$$});

  void setValues(
      {IAnyObject? dataset, String? id, num? scrollLeft, num? scrollTop}) {
    if (dataset != null) $dataset = dataset;
    if (id != null) $id = id;
    if (scrollLeft != null) $scrollLeft = scrollLeft;
    if (scrollTop != null) $scrollTop = scrollTop;
  }

  Map toJson() {
    return {
      'dataset': $dataset,
      'id': $id,
      'scrollLeft': $scrollLeft,
      'scrollTop': $scrollTop
    }..removeWhere((key, value) => value == null);
  }
}

class ScrollToOption {
  mpjs.JsObject? $$context$$;

  bool? $animated;

  Future<bool?> get animated async {
    return await $$context$$?.getPropertyValue('animated') ?? $animated;
  }

  num? $duration;

  Future<num?> get duration async {
    return await $$context$$?.getPropertyValue('duration') ?? $duration;
  }

  num? $left;

  Future<num?> get left async {
    return await $$context$$?.getPropertyValue('left') ?? $left;
  }

  num? $top;

  Future<num?> get top async {
    return await $$context$$?.getPropertyValue('top') ?? $top;
  }

  num? $velocity;

  Future<num?> get velocity async {
    return await $$context$$?.getPropertyValue('velocity') ?? $velocity;
  }

  ScrollToOption({this.$$context$$});

  void setValues(
      {bool? animated, num? duration, num? left, num? top, num? velocity}) {
    if (animated != null) $animated = animated;
    if (duration != null) $duration = duration;
    if (left != null) $left = left;
    if (top != null) $top = top;
    if (velocity != null) $velocity = velocity;
  }

  Map toJson() {
    return {
      'animated': $animated,
      'duration': $duration,
      'left': $left,
      'top': $top,
      'velocity': $velocity
    }..removeWhere((key, value) => value == null);
  }
}

class ScrollViewContext {
  mpjs.JsObject? $$context$$;

  bool $bounces = false;

  Future<bool> get bounces async {
    return await $$context$$?.getPropertyValue('bounces') ?? $bounces;
  }

  bool $decelerationDisabled = false;

  Future<bool> get decelerationDisabled async {
    return await $$context$$?.getPropertyValue('decelerationDisabled') ??
        $decelerationDisabled;
  }

  bool $fastDeceleration = false;

  Future<bool> get fastDeceleration async {
    return await $$context$$?.getPropertyValue('fastDeceleration') ??
        $fastDeceleration;
  }

  bool $pagingEnabled = false;

  Future<bool> get pagingEnabled async {
    return await $$context$$?.getPropertyValue('pagingEnabled') ??
        $pagingEnabled;
  }

  bool $scrollEnabled = false;

  Future<bool> get scrollEnabled async {
    return await $$context$$?.getPropertyValue('scrollEnabled') ??
        $scrollEnabled;
  }

  bool $showScrollbar = false;

  Future<bool> get showScrollbar async {
    return await $$context$$?.getPropertyValue('showScrollbar') ??
        $showScrollbar;
  }

  ScrollViewContext({this.$$context$$});

  void setValues(
      {bool? bounces,
      bool? decelerationDisabled,
      bool? fastDeceleration,
      bool? pagingEnabled,
      bool? scrollEnabled,
      bool? showScrollbar}) {
    if (bounces != null) $bounces = bounces;
    if (decelerationDisabled != null)
      $decelerationDisabled = decelerationDisabled;
    if (fastDeceleration != null) $fastDeceleration = fastDeceleration;
    if (pagingEnabled != null) $pagingEnabled = pagingEnabled;
    if (scrollEnabled != null) $scrollEnabled = scrollEnabled;
    if (showScrollbar != null) $showScrollbar = showScrollbar;
  }

  Map toJson() {
    return {
      'bounces': $bounces,
      'decelerationDisabled': $decelerationDisabled,
      'fastDeceleration': $fastDeceleration,
      'pagingEnabled': $pagingEnabled,
      'scrollEnabled': $scrollEnabled,
      'showScrollbar': $showScrollbar
    }..removeWhere((key, value) => value == null);
  }

  Future<void> scrollIntoView(String selector) async {
    final result = await $$context$$?.callMethod('scrollIntoView', [selector]);
    return result;
  }

  Future<void> scrollTo(ScrollToOption option) async {
    final result = await $$context$$?.callMethod('scrollTo', [option.toJson()]);
    return result;
  }
}

class SeekBackgroundAudioOption {
  mpjs.JsObject? $$context$$;

  num $position = 0;

  Future<num> get position async {
    return await $$context$$?.getPropertyValue('position') ?? $position;
  }

  SeekBackgroundAudioCompleteCallback? $complete;

  Future<SeekBackgroundAudioCompleteCallback?> get complete async {
    return $complete;
  }

  SeekBackgroundAudioFailCallback? $fail;

  Future<SeekBackgroundAudioFailCallback?> get fail async {
    return $fail;
  }

  SeekBackgroundAudioSuccessCallback? $success;

  Future<SeekBackgroundAudioSuccessCallback?> get success async {
    return $success;
  }

  SeekBackgroundAudioOption({this.$$context$$});

  void setValues(
      {num? position,
      SeekBackgroundAudioCompleteCallback? complete,
      SeekBackgroundAudioFailCallback? fail,
      SeekBackgroundAudioSuccessCallback? success}) {
    if (position != null) $position = position;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'position': $position,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SendHCEMessageOption {
  mpjs.JsObject? $$context$$;

  ArrayBuffer $data = ArrayBuffer();

  Future<ArrayBuffer> get data async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('data'));
  }

  SendHCEMessageCompleteCallback? $complete;

  Future<SendHCEMessageCompleteCallback?> get complete async {
    return $complete;
  }

  SendHCEMessageFailCallback? $fail;

  Future<SendHCEMessageFailCallback?> get fail async {
    return $fail;
  }

  SendHCEMessageSuccessCallback? $success;

  Future<SendHCEMessageSuccessCallback?> get success async {
    return $success;
  }

  SendHCEMessageOption({this.$$context$$});

  void setValues(
      {ArrayBuffer? data,
      SendHCEMessageCompleteCallback? complete,
      SendHCEMessageFailCallback? fail,
      SendHCEMessageSuccessCallback? success}) {
    if (data != null) $data = data;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'data': $data,
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => NFCError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => NFCError($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => NFCError($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SendMessageOption {
  mpjs.JsObject? $$context$$;

  String $msg = "";

  Future<String> get msg async {
    return await $$context$$?.getPropertyValue('msg') ?? $msg;
  }

  SendMessageCompleteCallback? $complete;

  Future<SendMessageCompleteCallback?> get complete async {
    return $complete;
  }

  SendMessageFailCallback? $fail;

  Future<SendMessageFailCallback?> get fail async {
    return $fail;
  }

  SendMessageSuccessCallback? $success;

  Future<SendMessageSuccessCallback?> get success async {
    return $success;
  }

  SendMessageOption({this.$$context$$});

  void setValues(
      {String? msg,
      SendMessageCompleteCallback? complete,
      SendMessageFailCallback? fail,
      SendMessageSuccessCallback? success}) {
    if (msg != null) $msg = msg;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'msg': $msg,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SendSmsOption {
  mpjs.JsObject? $$context$$;

  SendSmsCompleteCallback? $complete;

  Future<SendSmsCompleteCallback?> get complete async {
    return $complete;
  }

  String? $content;

  Future<String?> get content async {
    return await $$context$$?.getPropertyValue('content') ?? $content;
  }

  SendSmsFailCallback? $fail;

  Future<SendSmsFailCallback?> get fail async {
    return $fail;
  }

  String? $phoneNumber;

  Future<String?> get phoneNumber async {
    return await $$context$$?.getPropertyValue('phoneNumber') ?? $phoneNumber;
  }

  SendSmsSuccessCallback? $success;

  Future<SendSmsSuccessCallback?> get success async {
    return $success;
  }

  SendSmsOption({this.$$context$$});

  void setValues(
      {SendSmsCompleteCallback? complete,
      String? content,
      SendSmsFailCallback? fail,
      String? phoneNumber,
      SendSmsSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (content != null) $content = content;
    if (fail != null) $fail = fail;
    if (phoneNumber != null) $phoneNumber = phoneNumber;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'content': $content,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'phoneNumber': $phoneNumber,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SendSocketMessageOption {
  mpjs.JsObject? $$context$$;

  dynamic $data;

  Future<dynamic> get data async {
    return await $$context$$?.getPropertyValue('data') ?? $data;
  }

  SendSocketMessageCompleteCallback? $complete;

  Future<SendSocketMessageCompleteCallback?> get complete async {
    return $complete;
  }

  SendSocketMessageFailCallback? $fail;

  Future<SendSocketMessageFailCallback?> get fail async {
    return $fail;
  }

  SendSocketMessageSuccessCallback? $success;

  Future<SendSocketMessageSuccessCallback?> get success async {
    return $success;
  }

  SendSocketMessageOption({this.$$context$$});

  void setValues(
      {dynamic data,
      SendSocketMessageCompleteCallback? complete,
      SendSocketMessageFailCallback? fail,
      SendSocketMessageSuccessCallback? success}) {
    if (data != null) $data = data;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'data': $data,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetBGMVolumeOption {
  mpjs.JsObject? $$context$$;

  String $volume = "";

  Future<String> get volume async {
    return await $$context$$?.getPropertyValue('volume') ?? $volume;
  }

  SetBGMVolumeCompleteCallback? $complete;

  Future<SetBGMVolumeCompleteCallback?> get complete async {
    return $complete;
  }

  SetBGMVolumeFailCallback? $fail;

  Future<SetBGMVolumeFailCallback?> get fail async {
    return $fail;
  }

  SetBGMVolumeSuccessCallback? $success;

  Future<SetBGMVolumeSuccessCallback?> get success async {
    return $success;
  }

  SetBGMVolumeOption({this.$$context$$});

  void setValues(
      {String? volume,
      SetBGMVolumeCompleteCallback? complete,
      SetBGMVolumeFailCallback? fail,
      SetBGMVolumeSuccessCallback? success}) {
    if (volume != null) $volume = volume;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'volume': $volume,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetBLEMTUFailCallbackResult {
  mpjs.JsObject? $$context$$;

  num $mtu = 0;

  Future<num> get mtu async {
    return await $$context$$?.getPropertyValue('mtu') ?? $mtu;
  }

  SetBLEMTUFailCallbackResult({this.$$context$$});

  void setValues({num? mtu}) {
    if (mtu != null) $mtu = mtu;
  }

  Map toJson() {
    return {'mtu': $mtu}..removeWhere((key, value) => value == null);
  }
}

class SetBLEMTUOption {
  mpjs.JsObject? $$context$$;

  String $deviceId = "";

  Future<String> get deviceId async {
    return await $$context$$?.getPropertyValue('deviceId') ?? $deviceId;
  }

  num $mtu = 0;

  Future<num> get mtu async {
    return await $$context$$?.getPropertyValue('mtu') ?? $mtu;
  }

  SetBLEMTUCompleteCallback? $complete;

  Future<SetBLEMTUCompleteCallback?> get complete async {
    return $complete;
  }

  SetBLEMTUFailCallback? $fail;

  Future<SetBLEMTUFailCallback?> get fail async {
    return $fail;
  }

  SetBLEMTUSuccessCallback? $success;

  Future<SetBLEMTUSuccessCallback?> get success async {
    return $success;
  }

  SetBLEMTUOption({this.$$context$$});

  void setValues(
      {String? deviceId,
      num? mtu,
      SetBLEMTUCompleteCallback? complete,
      SetBLEMTUFailCallback? fail,
      SetBLEMTUSuccessCallback? success}) {
    if (deviceId != null) $deviceId = deviceId;
    if (mtu != null) $mtu = mtu;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'deviceId': $deviceId,
      'mtu': $mtu,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => SetBLEMTUFailCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => SetBLEMTUSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetBLEMTUSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  num $mtu = 0;

  Future<num> get mtu async {
    return await $$context$$?.getPropertyValue('mtu') ?? $mtu;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  SetBLEMTUSuccessCallbackResult({this.$$context$$});

  void setValues({num? mtu, String? errMsg}) {
    if (mtu != null) $mtu = mtu;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'mtu': $mtu, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class SetBackgroundColorOption {
  mpjs.JsObject? $$context$$;

  String? $backgroundColor;

  Future<String?> get backgroundColor async {
    return await $$context$$?.getPropertyValue('backgroundColor') ??
        $backgroundColor;
  }

  String? $backgroundColorBottom;

  Future<String?> get backgroundColorBottom async {
    return await $$context$$?.getPropertyValue('backgroundColorBottom') ??
        $backgroundColorBottom;
  }

  String? $backgroundColorTop;

  Future<String?> get backgroundColorTop async {
    return await $$context$$?.getPropertyValue('backgroundColorTop') ??
        $backgroundColorTop;
  }

  SetBackgroundColorCompleteCallback? $complete;

  Future<SetBackgroundColorCompleteCallback?> get complete async {
    return $complete;
  }

  SetBackgroundColorFailCallback? $fail;

  Future<SetBackgroundColorFailCallback?> get fail async {
    return $fail;
  }

  SetBackgroundColorSuccessCallback? $success;

  Future<SetBackgroundColorSuccessCallback?> get success async {
    return $success;
  }

  SetBackgroundColorOption({this.$$context$$});

  void setValues(
      {String? backgroundColor,
      String? backgroundColorBottom,
      String? backgroundColorTop,
      SetBackgroundColorCompleteCallback? complete,
      SetBackgroundColorFailCallback? fail,
      SetBackgroundColorSuccessCallback? success}) {
    if (backgroundColor != null) $backgroundColor = backgroundColor;
    if (backgroundColorBottom != null)
      $backgroundColorBottom = backgroundColorBottom;
    if (backgroundColorTop != null) $backgroundColorTop = backgroundColorTop;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'backgroundColor': $backgroundColor,
      'backgroundColorBottom': $backgroundColorBottom,
      'backgroundColorTop': $backgroundColorTop,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetBackgroundFetchTokenOption {
  mpjs.JsObject? $$context$$;

  String $token = "";

  Future<String> get token async {
    return await $$context$$?.getPropertyValue('token') ?? $token;
  }

  SetBackgroundFetchTokenCompleteCallback? $complete;

  Future<SetBackgroundFetchTokenCompleteCallback?> get complete async {
    return $complete;
  }

  SetBackgroundFetchTokenFailCallback? $fail;

  Future<SetBackgroundFetchTokenFailCallback?> get fail async {
    return $fail;
  }

  SetBackgroundFetchTokenSuccessCallback? $success;

  Future<SetBackgroundFetchTokenSuccessCallback?> get success async {
    return $success;
  }

  SetBackgroundFetchTokenOption({this.$$context$$});

  void setValues(
      {String? token,
      SetBackgroundFetchTokenCompleteCallback? complete,
      SetBackgroundFetchTokenFailCallback? fail,
      SetBackgroundFetchTokenSuccessCallback? success}) {
    if (token != null) $token = token;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'token': $token,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetBackgroundTextStyleOption {
  mpjs.JsObject? $$context$$;

  dynamic $textStyle;

  Future<dynamic> get textStyle async {
    return await $$context$$?.getPropertyValue('textStyle') ?? $textStyle;
  }

  SetBackgroundTextStyleCompleteCallback? $complete;

  Future<SetBackgroundTextStyleCompleteCallback?> get complete async {
    return $complete;
  }

  SetBackgroundTextStyleFailCallback? $fail;

  Future<SetBackgroundTextStyleFailCallback?> get fail async {
    return $fail;
  }

  SetBackgroundTextStyleSuccessCallback? $success;

  Future<SetBackgroundTextStyleSuccessCallback?> get success async {
    return $success;
  }

  SetBackgroundTextStyleOption({this.$$context$$});

  void setValues(
      {dynamic textStyle,
      SetBackgroundTextStyleCompleteCallback? complete,
      SetBackgroundTextStyleFailCallback? fail,
      SetBackgroundTextStyleSuccessCallback? success}) {
    if (textStyle != null) $textStyle = textStyle;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'textStyle': $textStyle,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetBoundaryOption {
  mpjs.JsObject? $$context$$;

  MapPostion $northeast = MapPostion();

  Future<MapPostion> get northeast async {
    return MapPostion($$context$$: $$context$$?.getProperty('northeast'));
  }

  MapPostion $southwest = MapPostion();

  Future<MapPostion> get southwest async {
    return MapPostion($$context$$: $$context$$?.getProperty('southwest'));
  }

  SetBoundaryCompleteCallback? $complete;

  Future<SetBoundaryCompleteCallback?> get complete async {
    return $complete;
  }

  SetBoundaryFailCallback? $fail;

  Future<SetBoundaryFailCallback?> get fail async {
    return $fail;
  }

  SetBoundarySuccessCallback? $success;

  Future<SetBoundarySuccessCallback?> get success async {
    return $success;
  }

  SetBoundaryOption({this.$$context$$});

  void setValues(
      {MapPostion? northeast,
      MapPostion? southwest,
      SetBoundaryCompleteCallback? complete,
      SetBoundaryFailCallback? fail,
      SetBoundarySuccessCallback? success}) {
    if (northeast != null) $northeast = northeast;
    if (southwest != null) $southwest = southwest;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'northeast': $northeast,
      'southwest': $southwest,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetCenterOffsetOption {
  mpjs.JsObject? $$context$$;

  List<num> $offset = <num>[];

  Future<List<num>> get offset async {
    return await $$context$$?.getPropertyValue('offset') ?? $offset;
  }

  SetCenterOffsetCompleteCallback? $complete;

  Future<SetCenterOffsetCompleteCallback?> get complete async {
    return $complete;
  }

  SetCenterOffsetFailCallback? $fail;

  Future<SetCenterOffsetFailCallback?> get fail async {
    return $fail;
  }

  SetCenterOffsetSuccessCallback? $success;

  Future<SetCenterOffsetSuccessCallback?> get success async {
    return $success;
  }

  SetCenterOffsetOption({this.$$context$$});

  void setValues(
      {List<num>? offset,
      SetCenterOffsetCompleteCallback? complete,
      SetCenterOffsetFailCallback? fail,
      SetCenterOffsetSuccessCallback? success}) {
    if (offset != null) $offset = offset;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'offset': $offset,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetClipboardDataOption {
  mpjs.JsObject? $$context$$;

  String $data = "";

  Future<String> get data async {
    return await $$context$$?.getPropertyValue('data') ?? $data;
  }

  SetClipboardDataCompleteCallback? $complete;

  Future<SetClipboardDataCompleteCallback?> get complete async {
    return $complete;
  }

  SetClipboardDataFailCallback? $fail;

  Future<SetClipboardDataFailCallback?> get fail async {
    return $fail;
  }

  SetClipboardDataSuccessCallback? $success;

  Future<SetClipboardDataSuccessCallback?> get success async {
    return $success;
  }

  SetClipboardDataOption({this.$$context$$});

  void setValues(
      {String? data,
      SetClipboardDataCompleteCallback? complete,
      SetClipboardDataFailCallback? fail,
      SetClipboardDataSuccessCallback? success}) {
    if (data != null) $data = data;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'data': $data,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetContentsOption {
  mpjs.JsObject? $$context$$;

  SetContentsCompleteCallback? $complete;

  Future<SetContentsCompleteCallback?> get complete async {
    return $complete;
  }

  IAnyObject? $delta;

  Future<IAnyObject?> get delta async {
    return IAnyObject($$context$$: $$context$$?.getProperty('delta'));
  }

  SetContentsFailCallback? $fail;

  Future<SetContentsFailCallback?> get fail async {
    return $fail;
  }

  String? $html;

  Future<String?> get html async {
    return await $$context$$?.getPropertyValue('html') ?? $html;
  }

  SetContentsSuccessCallback? $success;

  Future<SetContentsSuccessCallback?> get success async {
    return $success;
  }

  SetContentsOption({this.$$context$$});

  void setValues(
      {SetContentsCompleteCallback? complete,
      IAnyObject? delta,
      SetContentsFailCallback? fail,
      String? html,
      SetContentsSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (delta != null) $delta = delta;
    if (fail != null) $fail = fail;
    if (html != null) $html = html;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'delta': $delta,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'html': $html,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetEnable1v1ChatOption {
  mpjs.JsObject? $$context$$;

  bool $enable = false;

  Future<bool> get enable async {
    return await $$context$$?.getPropertyValue('enable') ?? $enable;
  }

  dynamic $backgroundType;

  Future<dynamic> get backgroundType async {
    return await $$context$$?.getPropertyValue('backgroundType') ??
        $backgroundType;
  }

  SetEnable1v1ChatCompleteCallback? $complete;

  Future<SetEnable1v1ChatCompleteCallback?> get complete async {
    return $complete;
  }

  SetEnable1v1ChatFailCallback? $fail;

  Future<SetEnable1v1ChatFailCallback?> get fail async {
    return $fail;
  }

  num? $minWindowType;

  Future<num?> get minWindowType async {
    return await $$context$$?.getPropertyValue('minWindowType') ??
        $minWindowType;
  }

  SetEnable1v1ChatSuccessCallback? $success;

  Future<SetEnable1v1ChatSuccessCallback?> get success async {
    return $success;
  }

  SetEnable1v1ChatOption({this.$$context$$});

  void setValues(
      {bool? enable,
      dynamic backgroundType,
      SetEnable1v1ChatCompleteCallback? complete,
      SetEnable1v1ChatFailCallback? fail,
      num? minWindowType,
      SetEnable1v1ChatSuccessCallback? success}) {
    if (enable != null) $enable = enable;
    if (backgroundType != null) $backgroundType = backgroundType;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (minWindowType != null) $minWindowType = minWindowType;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'enable': $enable,
      'backgroundType': $backgroundType,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'minWindowType': $minWindowType,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetEnableDebugOption {
  mpjs.JsObject? $$context$$;

  bool $enableDebug = false;

  Future<bool> get enableDebug async {
    return await $$context$$?.getPropertyValue('enableDebug') ?? $enableDebug;
  }

  SetEnableDebugCompleteCallback? $complete;

  Future<SetEnableDebugCompleteCallback?> get complete async {
    return $complete;
  }

  SetEnableDebugFailCallback? $fail;

  Future<SetEnableDebugFailCallback?> get fail async {
    return $fail;
  }

  SetEnableDebugSuccessCallback? $success;

  Future<SetEnableDebugSuccessCallback?> get success async {
    return $success;
  }

  SetEnableDebugOption({this.$$context$$});

  void setValues(
      {bool? enableDebug,
      SetEnableDebugCompleteCallback? complete,
      SetEnableDebugFailCallback? fail,
      SetEnableDebugSuccessCallback? success}) {
    if (enableDebug != null) $enableDebug = enableDebug;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'enableDebug': $enableDebug,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetInnerAudioOption {
  mpjs.JsObject? $$context$$;

  SetInnerAudioOptionCompleteCallback? $complete;

  Future<SetInnerAudioOptionCompleteCallback?> get complete async {
    return $complete;
  }

  SetInnerAudioOptionFailCallback? $fail;

  Future<SetInnerAudioOptionFailCallback?> get fail async {
    return $fail;
  }

  bool? $mixWithOther;

  Future<bool?> get mixWithOther async {
    return await $$context$$?.getPropertyValue('mixWithOther') ?? $mixWithOther;
  }

  bool? $obeyMuteSwitch;

  Future<bool?> get obeyMuteSwitch async {
    return await $$context$$?.getPropertyValue('obeyMuteSwitch') ??
        $obeyMuteSwitch;
  }

  bool? $speakerOn;

  Future<bool?> get speakerOn async {
    return await $$context$$?.getPropertyValue('speakerOn') ?? $speakerOn;
  }

  SetInnerAudioOptionSuccessCallback? $success;

  Future<SetInnerAudioOptionSuccessCallback?> get success async {
    return $success;
  }

  SetInnerAudioOption({this.$$context$$});

  void setValues(
      {SetInnerAudioOptionCompleteCallback? complete,
      SetInnerAudioOptionFailCallback? fail,
      bool? mixWithOther,
      bool? obeyMuteSwitch,
      bool? speakerOn,
      SetInnerAudioOptionSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (mixWithOther != null) $mixWithOther = mixWithOther;
    if (obeyMuteSwitch != null) $obeyMuteSwitch = obeyMuteSwitch;
    if (speakerOn != null) $speakerOn = speakerOn;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'mixWithOther': $mixWithOther,
      'obeyMuteSwitch': $obeyMuteSwitch,
      'speakerOn': $speakerOn,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetKeepScreenOnOption {
  mpjs.JsObject? $$context$$;

  bool $keepScreenOn = false;

  Future<bool> get keepScreenOn async {
    return await $$context$$?.getPropertyValue('keepScreenOn') ?? $keepScreenOn;
  }

  SetKeepScreenOnCompleteCallback? $complete;

  Future<SetKeepScreenOnCompleteCallback?> get complete async {
    return $complete;
  }

  SetKeepScreenOnFailCallback? $fail;

  Future<SetKeepScreenOnFailCallback?> get fail async {
    return $fail;
  }

  SetKeepScreenOnSuccessCallback? $success;

  Future<SetKeepScreenOnSuccessCallback?> get success async {
    return $success;
  }

  SetKeepScreenOnOption({this.$$context$$});

  void setValues(
      {bool? keepScreenOn,
      SetKeepScreenOnCompleteCallback? complete,
      SetKeepScreenOnFailCallback? fail,
      SetKeepScreenOnSuccessCallback? success}) {
    if (keepScreenOn != null) $keepScreenOn = keepScreenOn;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'keepScreenOn': $keepScreenOn,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetLocMarkerIconOption {
  mpjs.JsObject? $$context$$;

  SetLocMarkerIconCompleteCallback? $complete;

  Future<SetLocMarkerIconCompleteCallback?> get complete async {
    return $complete;
  }

  SetLocMarkerIconFailCallback? $fail;

  Future<SetLocMarkerIconFailCallback?> get fail async {
    return $fail;
  }

  String? $iconPath;

  Future<String?> get iconPath async {
    return await $$context$$?.getPropertyValue('iconPath') ?? $iconPath;
  }

  SetLocMarkerIconSuccessCallback? $success;

  Future<SetLocMarkerIconSuccessCallback?> get success async {
    return $success;
  }

  SetLocMarkerIconOption({this.$$context$$});

  void setValues(
      {SetLocMarkerIconCompleteCallback? complete,
      SetLocMarkerIconFailCallback? fail,
      String? iconPath,
      SetLocMarkerIconSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (iconPath != null) $iconPath = iconPath;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'iconPath': $iconPath,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetMICVolumeOption {
  mpjs.JsObject? $$context$$;

  num $volume = 0;

  Future<num> get volume async {
    return await $$context$$?.getPropertyValue('volume') ?? $volume;
  }

  SetMICVolumeCompleteCallback? $complete;

  Future<SetMICVolumeCompleteCallback?> get complete async {
    return $complete;
  }

  SetMICVolumeFailCallback? $fail;

  Future<SetMICVolumeFailCallback?> get fail async {
    return $fail;
  }

  SetMICVolumeSuccessCallback? $success;

  Future<SetMICVolumeSuccessCallback?> get success async {
    return $success;
  }

  SetMICVolumeOption({this.$$context$$});

  void setValues(
      {num? volume,
      SetMICVolumeCompleteCallback? complete,
      SetMICVolumeFailCallback? fail,
      SetMICVolumeSuccessCallback? success}) {
    if (volume != null) $volume = volume;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'volume': $volume,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetNavigationBarColorOption {
  mpjs.JsObject? $$context$$;

  String $backgroundColor = "";

  Future<String> get backgroundColor async {
    return await $$context$$?.getPropertyValue('backgroundColor') ??
        $backgroundColor;
  }

  String $frontColor = "";

  Future<String> get frontColor async {
    return await $$context$$?.getPropertyValue('frontColor') ?? $frontColor;
  }

  AnimationOption? $animation;

  Future<AnimationOption?> get animation async {
    return AnimationOption($$context$$: $$context$$?.getProperty('animation'));
  }

  SetNavigationBarColorCompleteCallback? $complete;

  Future<SetNavigationBarColorCompleteCallback?> get complete async {
    return $complete;
  }

  SetNavigationBarColorFailCallback? $fail;

  Future<SetNavigationBarColorFailCallback?> get fail async {
    return $fail;
  }

  SetNavigationBarColorSuccessCallback? $success;

  Future<SetNavigationBarColorSuccessCallback?> get success async {
    return $success;
  }

  SetNavigationBarColorOption({this.$$context$$});

  void setValues(
      {String? backgroundColor,
      String? frontColor,
      AnimationOption? animation,
      SetNavigationBarColorCompleteCallback? complete,
      SetNavigationBarColorFailCallback? fail,
      SetNavigationBarColorSuccessCallback? success}) {
    if (backgroundColor != null) $backgroundColor = backgroundColor;
    if (frontColor != null) $frontColor = frontColor;
    if (animation != null) $animation = animation;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'backgroundColor': $backgroundColor,
      'frontColor': $frontColor,
      'animation': $animation,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetNavigationBarTitleOption {
  mpjs.JsObject? $$context$$;

  String $title = "";

  Future<String> get title async {
    return await $$context$$?.getPropertyValue('title') ?? $title;
  }

  SetNavigationBarTitleCompleteCallback? $complete;

  Future<SetNavigationBarTitleCompleteCallback?> get complete async {
    return $complete;
  }

  SetNavigationBarTitleFailCallback? $fail;

  Future<SetNavigationBarTitleFailCallback?> get fail async {
    return $fail;
  }

  SetNavigationBarTitleSuccessCallback? $success;

  Future<SetNavigationBarTitleSuccessCallback?> get success async {
    return $success;
  }

  SetNavigationBarTitleOption({this.$$context$$});

  void setValues(
      {String? title,
      SetNavigationBarTitleCompleteCallback? complete,
      SetNavigationBarTitleFailCallback? fail,
      SetNavigationBarTitleSuccessCallback? success}) {
    if (title != null) $title = title;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'title': $title,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetScreenBrightnessOption {
  mpjs.JsObject? $$context$$;

  num $value = 0;

  Future<num> get value async {
    return await $$context$$?.getPropertyValue('value') ?? $value;
  }

  SetScreenBrightnessCompleteCallback? $complete;

  Future<SetScreenBrightnessCompleteCallback?> get complete async {
    return $complete;
  }

  SetScreenBrightnessFailCallback? $fail;

  Future<SetScreenBrightnessFailCallback?> get fail async {
    return $fail;
  }

  SetScreenBrightnessSuccessCallback? $success;

  Future<SetScreenBrightnessSuccessCallback?> get success async {
    return $success;
  }

  SetScreenBrightnessOption({this.$$context$$});

  void setValues(
      {num? value,
      SetScreenBrightnessCompleteCallback? complete,
      SetScreenBrightnessFailCallback? fail,
      SetScreenBrightnessSuccessCallback? success}) {
    if (value != null) $value = value;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'value': $value,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetStorageOption<T extends dynamic> {
  mpjs.JsObject? $$context$$;

  T? $data;

  Future<T?> get data async {
    return await $$context$$?.getPropertyValue('data') ?? $data;
  }

  String $key = "";

  Future<String> get key async {
    return await $$context$$?.getPropertyValue('key') ?? $key;
  }

  SetStorageCompleteCallback? $complete;

  Future<SetStorageCompleteCallback?> get complete async {
    return $complete;
  }

  bool? $encrypt;

  Future<bool?> get encrypt async {
    return await $$context$$?.getPropertyValue('encrypt') ?? $encrypt;
  }

  SetStorageFailCallback? $fail;

  Future<SetStorageFailCallback?> get fail async {
    return $fail;
  }

  SetStorageSuccessCallback? $success;

  Future<SetStorageSuccessCallback?> get success async {
    return $success;
  }

  SetStorageOption({this.$$context$$});

  void setValues(
      {T? data,
      String? key,
      SetStorageCompleteCallback? complete,
      bool? encrypt,
      SetStorageFailCallback? fail,
      SetStorageSuccessCallback? success}) {
    if (data != null) $data = data;
    if (key != null) $key = key;
    if (complete != null) $complete = complete;
    if (encrypt != null) $encrypt = encrypt;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'data': $data,
      'key': $key,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'encrypt': $encrypt,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetTabBarBadgeOption {
  mpjs.JsObject? $$context$$;

  num $index = 0;

  Future<num> get index async {
    return await $$context$$?.getPropertyValue('index') ?? $index;
  }

  String $text = "";

  Future<String> get text async {
    return await $$context$$?.getPropertyValue('text') ?? $text;
  }

  SetTabBarBadgeCompleteCallback? $complete;

  Future<SetTabBarBadgeCompleteCallback?> get complete async {
    return $complete;
  }

  SetTabBarBadgeFailCallback? $fail;

  Future<SetTabBarBadgeFailCallback?> get fail async {
    return $fail;
  }

  SetTabBarBadgeSuccessCallback? $success;

  Future<SetTabBarBadgeSuccessCallback?> get success async {
    return $success;
  }

  SetTabBarBadgeOption({this.$$context$$});

  void setValues(
      {num? index,
      String? text,
      SetTabBarBadgeCompleteCallback? complete,
      SetTabBarBadgeFailCallback? fail,
      SetTabBarBadgeSuccessCallback? success}) {
    if (index != null) $index = index;
    if (text != null) $text = text;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'index': $index,
      'text': $text,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetTabBarItemOption {
  mpjs.JsObject? $$context$$;

  num $index = 0;

  Future<num> get index async {
    return await $$context$$?.getPropertyValue('index') ?? $index;
  }

  SetTabBarItemCompleteCallback? $complete;

  Future<SetTabBarItemCompleteCallback?> get complete async {
    return $complete;
  }

  SetTabBarItemFailCallback? $fail;

  Future<SetTabBarItemFailCallback?> get fail async {
    return $fail;
  }

  String? $iconPath;

  Future<String?> get iconPath async {
    return await $$context$$?.getPropertyValue('iconPath') ?? $iconPath;
  }

  String? $selectedIconPath;

  Future<String?> get selectedIconPath async {
    return await $$context$$?.getPropertyValue('selectedIconPath') ??
        $selectedIconPath;
  }

  SetTabBarItemSuccessCallback? $success;

  Future<SetTabBarItemSuccessCallback?> get success async {
    return $success;
  }

  String? $text;

  Future<String?> get text async {
    return await $$context$$?.getPropertyValue('text') ?? $text;
  }

  SetTabBarItemOption({this.$$context$$});

  void setValues(
      {num? index,
      SetTabBarItemCompleteCallback? complete,
      SetTabBarItemFailCallback? fail,
      String? iconPath,
      String? selectedIconPath,
      SetTabBarItemSuccessCallback? success,
      String? text}) {
    if (index != null) $index = index;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (iconPath != null) $iconPath = iconPath;
    if (selectedIconPath != null) $selectedIconPath = selectedIconPath;
    if (success != null) $success = success;
    if (text != null) $text = text;
  }

  Map toJson() {
    return {
      'index': $index,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'iconPath': $iconPath,
      'selectedIconPath': $selectedIconPath,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'text': $text
    }..removeWhere((key, value) => value == null);
  }
}

class SetTabBarStyleOption {
  mpjs.JsObject? $$context$$;

  String? $backgroundColor;

  Future<String?> get backgroundColor async {
    return await $$context$$?.getPropertyValue('backgroundColor') ??
        $backgroundColor;
  }

  String? $borderStyle;

  Future<String?> get borderStyle async {
    return await $$context$$?.getPropertyValue('borderStyle') ?? $borderStyle;
  }

  String? $color;

  Future<String?> get color async {
    return await $$context$$?.getPropertyValue('color') ?? $color;
  }

  SetTabBarStyleCompleteCallback? $complete;

  Future<SetTabBarStyleCompleteCallback?> get complete async {
    return $complete;
  }

  SetTabBarStyleFailCallback? $fail;

  Future<SetTabBarStyleFailCallback?> get fail async {
    return $fail;
  }

  String? $selectedColor;

  Future<String?> get selectedColor async {
    return await $$context$$?.getPropertyValue('selectedColor') ??
        $selectedColor;
  }

  SetTabBarStyleSuccessCallback? $success;

  Future<SetTabBarStyleSuccessCallback?> get success async {
    return $success;
  }

  SetTabBarStyleOption({this.$$context$$});

  void setValues(
      {String? backgroundColor,
      String? borderStyle,
      String? color,
      SetTabBarStyleCompleteCallback? complete,
      SetTabBarStyleFailCallback? fail,
      String? selectedColor,
      SetTabBarStyleSuccessCallback? success}) {
    if (backgroundColor != null) $backgroundColor = backgroundColor;
    if (borderStyle != null) $borderStyle = borderStyle;
    if (color != null) $color = color;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (selectedColor != null) $selectedColor = selectedColor;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'backgroundColor': $backgroundColor,
      'borderStyle': $borderStyle,
      'color': $color,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'selectedColor': $selectedColor,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetTimeoutOption {
  mpjs.JsObject? $$context$$;

  num $timeout = 0;

  Future<num> get timeout async {
    return await $$context$$?.getPropertyValue('timeout') ?? $timeout;
  }

  SetTimeoutCompleteCallback? $complete;

  Future<SetTimeoutCompleteCallback?> get complete async {
    return $complete;
  }

  SetTimeoutFailCallback? $fail;

  Future<SetTimeoutFailCallback?> get fail async {
    return $fail;
  }

  SetTimeoutSuccessCallback? $success;

  Future<SetTimeoutSuccessCallback?> get success async {
    return $success;
  }

  SetTimeoutOption({this.$$context$$});

  void setValues(
      {num? timeout,
      SetTimeoutCompleteCallback? complete,
      SetTimeoutFailCallback? fail,
      SetTimeoutSuccessCallback? success}) {
    if (timeout != null) $timeout = timeout;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'timeout': $timeout,
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => Nfcrwerror($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => Nfcrwerror($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => Nfcrwerror($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetTopBarTextOption {
  mpjs.JsObject? $$context$$;

  String $text = "";

  Future<String> get text async {
    return await $$context$$?.getPropertyValue('text') ?? $text;
  }

  SetTopBarTextCompleteCallback? $complete;

  Future<SetTopBarTextCompleteCallback?> get complete async {
    return $complete;
  }

  SetTopBarTextFailCallback? $fail;

  Future<SetTopBarTextFailCallback?> get fail async {
    return $fail;
  }

  SetTopBarTextSuccessCallback? $success;

  Future<SetTopBarTextSuccessCallback?> get success async {
    return $success;
  }

  SetTopBarTextOption({this.$$context$$});

  void setValues(
      {String? text,
      SetTopBarTextCompleteCallback? complete,
      SetTopBarTextFailCallback? fail,
      SetTopBarTextSuccessCallback? success}) {
    if (text != null) $text = text;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'text': $text,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetVisualEffectOnCaptureOption {
  mpjs.JsObject? $$context$$;

  SetVisualEffectOnCaptureCompleteCallback? $complete;

  Future<SetVisualEffectOnCaptureCompleteCallback?> get complete async {
    return $complete;
  }

  SetVisualEffectOnCaptureFailCallback? $fail;

  Future<SetVisualEffectOnCaptureFailCallback?> get fail async {
    return $fail;
  }

  SetVisualEffectOnCaptureSuccessCallback? $success;

  Future<SetVisualEffectOnCaptureSuccessCallback?> get success async {
    return $success;
  }

  String? $visualEffect;

  Future<String?> get visualEffect async {
    return await $$context$$?.getPropertyValue('visualEffect') ?? $visualEffect;
  }

  SetVisualEffectOnCaptureOption({this.$$context$$});

  void setValues(
      {SetVisualEffectOnCaptureCompleteCallback? complete,
      SetVisualEffectOnCaptureFailCallback? fail,
      SetVisualEffectOnCaptureSuccessCallback? success,
      String? visualEffect}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
    if (visualEffect != null) $visualEffect = visualEffect;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'visualEffect': $visualEffect
    }..removeWhere((key, value) => value == null);
  }
}

class SetWifiListOption {
  mpjs.JsObject? $$context$$;

  List<WifiData> $wifiList = <WifiData>[];

  Future<List<WifiData>> get wifiList async {
    return ((await $$context$$?.getPropertyValue('wifiList')) as List)
        .map((it) => WifiData($$context$$: it))
        .toList();
  }

  SetWifiListCompleteCallback? $complete;

  Future<SetWifiListCompleteCallback?> get complete async {
    return $complete;
  }

  SetWifiListFailCallback? $fail;

  Future<SetWifiListFailCallback?> get fail async {
    return $fail;
  }

  SetWifiListSuccessCallback? $success;

  Future<SetWifiListSuccessCallback?> get success async {
    return $success;
  }

  SetWifiListOption({this.$$context$$});

  void setValues(
      {List<WifiData>? wifiList,
      SetWifiListCompleteCallback? complete,
      SetWifiListFailCallback? fail,
      SetWifiListSuccessCallback? success}) {
    if (wifiList != null) $wifiList = wifiList;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'wifiList': $wifiList,
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => WifiError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => WifiError($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => WifiError($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetWindowSizeOption {
  mpjs.JsObject? $$context$$;

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  SetWindowSizeCompleteCallback? $complete;

  Future<SetWindowSizeCompleteCallback?> get complete async {
    return $complete;
  }

  SetWindowSizeFailCallback? $fail;

  Future<SetWindowSizeFailCallback?> get fail async {
    return $fail;
  }

  SetWindowSizeSuccessCallback? $success;

  Future<SetWindowSizeSuccessCallback?> get success async {
    return $success;
  }

  SetWindowSizeOption({this.$$context$$});

  void setValues(
      {num? height,
      num? width,
      SetWindowSizeCompleteCallback? complete,
      SetWindowSizeFailCallback? fail,
      SetWindowSizeSuccessCallback? success}) {
    if (height != null) $height = height;
    if (width != null) $width = width;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'height': $height,
      'width': $width,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetZoomOption {
  mpjs.JsObject? $$context$$;

  num $zoom = 0;

  Future<num> get zoom async {
    return await $$context$$?.getPropertyValue('zoom') ?? $zoom;
  }

  SetZoomCompleteCallback? $complete;

  Future<SetZoomCompleteCallback?> get complete async {
    return $complete;
  }

  SetZoomFailCallback? $fail;

  Future<SetZoomFailCallback?> get fail async {
    return $fail;
  }

  SetZoomSuccessCallback? $success;

  Future<SetZoomSuccessCallback?> get success async {
    return $success;
  }

  SetZoomOption({this.$$context$$});

  void setValues(
      {num? zoom,
      SetZoomCompleteCallback? complete,
      SetZoomFailCallback? fail,
      SetZoomSuccessCallback? success}) {
    if (zoom != null) $zoom = zoom;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'zoom': $zoom,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => SetZoomSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SetZoomSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  num $zoom = 0;

  Future<num> get zoom async {
    return await $$context$$?.getPropertyValue('zoom') ?? $zoom;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  SetZoomSuccessCallbackResult({this.$$context$$});

  void setValues({num? zoom, String? errMsg}) {
    if (zoom != null) $zoom = zoom;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'zoom': $zoom, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class ShareFileMessageOption {
  mpjs.JsObject? $$context$$;

  String $filePath = "";

  Future<String> get filePath async {
    return await $$context$$?.getPropertyValue('filePath') ?? $filePath;
  }

  ShareFileMessageCompleteCallback? $complete;

  Future<ShareFileMessageCompleteCallback?> get complete async {
    return $complete;
  }

  ShareFileMessageFailCallback? $fail;

  Future<ShareFileMessageFailCallback?> get fail async {
    return $fail;
  }

  String? $fileName;

  Future<String?> get fileName async {
    return await $$context$$?.getPropertyValue('fileName') ?? $fileName;
  }

  ShareFileMessageSuccessCallback? $success;

  Future<ShareFileMessageSuccessCallback?> get success async {
    return $success;
  }

  ShareFileMessageOption({this.$$context$$});

  void setValues(
      {String? filePath,
      ShareFileMessageCompleteCallback? complete,
      ShareFileMessageFailCallback? fail,
      String? fileName,
      ShareFileMessageSuccessCallback? success}) {
    if (filePath != null) $filePath = filePath;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (fileName != null) $fileName = fileName;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'filePath': $filePath,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fileName': $fileName,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ShareToWeRunOption {
  mpjs.JsObject? $$context$$;

  List<WxaSportRecord> $recordList = <WxaSportRecord>[];

  Future<List<WxaSportRecord>> get recordList async {
    return ((await $$context$$?.getPropertyValue('recordList')) as List)
        .map((it) => WxaSportRecord($$context$$: it))
        .toList();
  }

  ShareToWeRunCompleteCallback? $complete;

  Future<ShareToWeRunCompleteCallback?> get complete async {
    return $complete;
  }

  ShareToWeRunFailCallback? $fail;

  Future<ShareToWeRunFailCallback?> get fail async {
    return $fail;
  }

  ShareToWeRunSuccessCallback? $success;

  Future<ShareToWeRunSuccessCallback?> get success async {
    return $success;
  }

  ShareToWeRunOption({this.$$context$$});

  void setValues(
      {List<WxaSportRecord>? recordList,
      ShareToWeRunCompleteCallback? complete,
      ShareToWeRunFailCallback? fail,
      ShareToWeRunSuccessCallback? success}) {
    if (recordList != null) $recordList = recordList;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'recordList': $recordList,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ShareVideoMessageOption {
  mpjs.JsObject? $$context$$;

  String $videoPath = "";

  Future<String> get videoPath async {
    return await $$context$$?.getPropertyValue('videoPath') ?? $videoPath;
  }

  ShareVideoMessageCompleteCallback? $complete;

  Future<ShareVideoMessageCompleteCallback?> get complete async {
    return $complete;
  }

  ShareVideoMessageFailCallback? $fail;

  Future<ShareVideoMessageFailCallback?> get fail async {
    return $fail;
  }

  ShareVideoMessageSuccessCallback? $success;

  Future<ShareVideoMessageSuccessCallback?> get success async {
    return $success;
  }

  String? $thumbPath;

  Future<String?> get thumbPath async {
    return await $$context$$?.getPropertyValue('thumbPath') ?? $thumbPath;
  }

  ShareVideoMessageOption({this.$$context$$});

  void setValues(
      {String? videoPath,
      ShareVideoMessageCompleteCallback? complete,
      ShareVideoMessageFailCallback? fail,
      ShareVideoMessageSuccessCallback? success,
      String? thumbPath}) {
    if (videoPath != null) $videoPath = videoPath;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
    if (thumbPath != null) $thumbPath = thumbPath;
  }

  Map toJson() {
    return {
      'videoPath': $videoPath,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'thumbPath': $thumbPath
    }..removeWhere((key, value) => value == null);
  }
}

class ShowActionSheetOption {
  mpjs.JsObject? $$context$$;

  List<String> $itemList = <String>[];

  Future<List<String>> get itemList async {
    return await $$context$$?.getPropertyValue('itemList') ?? $itemList;
  }

  String? $alertText;

  Future<String?> get alertText async {
    return await $$context$$?.getPropertyValue('alertText') ?? $alertText;
  }

  ShowActionSheetCompleteCallback? $complete;

  Future<ShowActionSheetCompleteCallback?> get complete async {
    return $complete;
  }

  ShowActionSheetFailCallback? $fail;

  Future<ShowActionSheetFailCallback?> get fail async {
    return $fail;
  }

  String? $itemColor;

  Future<String?> get itemColor async {
    return await $$context$$?.getPropertyValue('itemColor') ?? $itemColor;
  }

  ShowActionSheetSuccessCallback? $success;

  Future<ShowActionSheetSuccessCallback?> get success async {
    return $success;
  }

  ShowActionSheetOption({this.$$context$$});

  void setValues(
      {List<String>? itemList,
      String? alertText,
      ShowActionSheetCompleteCallback? complete,
      ShowActionSheetFailCallback? fail,
      String? itemColor,
      ShowActionSheetSuccessCallback? success}) {
    if (itemList != null) $itemList = itemList;
    if (alertText != null) $alertText = alertText;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (itemColor != null) $itemColor = itemColor;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'itemList': $itemList,
      'alertText': $alertText,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'itemColor': $itemColor,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => ShowActionSheetSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ShowActionSheetSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  num $tapIndex = 0;

  Future<num> get tapIndex async {
    return await $$context$$?.getPropertyValue('tapIndex') ?? $tapIndex;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  ShowActionSheetSuccessCallbackResult({this.$$context$$});

  void setValues({num? tapIndex, String? errMsg}) {
    if (tapIndex != null) $tapIndex = tapIndex;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'tapIndex': $tapIndex, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class ShowLoadingOption {
  mpjs.JsObject? $$context$$;

  String $title = "";

  Future<String> get title async {
    return await $$context$$?.getPropertyValue('title') ?? $title;
  }

  ShowLoadingCompleteCallback? $complete;

  Future<ShowLoadingCompleteCallback?> get complete async {
    return $complete;
  }

  ShowLoadingFailCallback? $fail;

  Future<ShowLoadingFailCallback?> get fail async {
    return $fail;
  }

  bool? $mask;

  Future<bool?> get mask async {
    return await $$context$$?.getPropertyValue('mask') ?? $mask;
  }

  ShowLoadingSuccessCallback? $success;

  Future<ShowLoadingSuccessCallback?> get success async {
    return $success;
  }

  ShowLoadingOption({this.$$context$$});

  void setValues(
      {String? title,
      ShowLoadingCompleteCallback? complete,
      ShowLoadingFailCallback? fail,
      bool? mask,
      ShowLoadingSuccessCallback? success}) {
    if (title != null) $title = title;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (mask != null) $mask = mask;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'title': $title,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'mask': $mask,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ShowModalOption {
  mpjs.JsObject? $$context$$;

  String? $cancelColor;

  Future<String?> get cancelColor async {
    return await $$context$$?.getPropertyValue('cancelColor') ?? $cancelColor;
  }

  String? $cancelText;

  Future<String?> get cancelText async {
    return await $$context$$?.getPropertyValue('cancelText') ?? $cancelText;
  }

  ShowModalCompleteCallback? $complete;

  Future<ShowModalCompleteCallback?> get complete async {
    return $complete;
  }

  String? $confirmColor;

  Future<String?> get confirmColor async {
    return await $$context$$?.getPropertyValue('confirmColor') ?? $confirmColor;
  }

  String? $confirmText;

  Future<String?> get confirmText async {
    return await $$context$$?.getPropertyValue('confirmText') ?? $confirmText;
  }

  String? $content;

  Future<String?> get content async {
    return await $$context$$?.getPropertyValue('content') ?? $content;
  }

  bool? $editable;

  Future<bool?> get editable async {
    return await $$context$$?.getPropertyValue('editable') ?? $editable;
  }

  ShowModalFailCallback? $fail;

  Future<ShowModalFailCallback?> get fail async {
    return $fail;
  }

  String? $placeholderText;

  Future<String?> get placeholderText async {
    return await $$context$$?.getPropertyValue('placeholderText') ??
        $placeholderText;
  }

  bool? $showCancel;

  Future<bool?> get showCancel async {
    return await $$context$$?.getPropertyValue('showCancel') ?? $showCancel;
  }

  ShowModalSuccessCallback? $success;

  Future<ShowModalSuccessCallback?> get success async {
    return $success;
  }

  String? $title;

  Future<String?> get title async {
    return await $$context$$?.getPropertyValue('title') ?? $title;
  }

  ShowModalOption({this.$$context$$});

  void setValues(
      {String? cancelColor,
      String? cancelText,
      ShowModalCompleteCallback? complete,
      String? confirmColor,
      String? confirmText,
      String? content,
      bool? editable,
      ShowModalFailCallback? fail,
      String? placeholderText,
      bool? showCancel,
      ShowModalSuccessCallback? success,
      String? title}) {
    if (cancelColor != null) $cancelColor = cancelColor;
    if (cancelText != null) $cancelText = cancelText;
    if (complete != null) $complete = complete;
    if (confirmColor != null) $confirmColor = confirmColor;
    if (confirmText != null) $confirmText = confirmText;
    if (content != null) $content = content;
    if (editable != null) $editable = editable;
    if (fail != null) $fail = fail;
    if (placeholderText != null) $placeholderText = placeholderText;
    if (showCancel != null) $showCancel = showCancel;
    if (success != null) $success = success;
    if (title != null) $title = title;
  }

  Map toJson() {
    return {
      'cancelColor': $cancelColor,
      'cancelText': $cancelText,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'confirmColor': $confirmColor,
      'confirmText': $confirmText,
      'content': $content,
      'editable': $editable,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'placeholderText': $placeholderText,
      'showCancel': $showCancel,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => ShowModalSuccessCallbackResult($$context$$: e)])
          : null,
      'title': $title
    }..removeWhere((key, value) => value == null);
  }
}

class ShowModalSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  bool $cancel = false;

  Future<bool> get cancel async {
    return await $$context$$?.getPropertyValue('cancel') ?? $cancel;
  }

  bool $confirm = false;

  Future<bool> get confirm async {
    return await $$context$$?.getPropertyValue('confirm') ?? $confirm;
  }

  String $content = "";

  Future<String> get content async {
    return await $$context$$?.getPropertyValue('content') ?? $content;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  ShowModalSuccessCallbackResult({this.$$context$$});

  void setValues(
      {bool? cancel, bool? confirm, String? content, String? errMsg}) {
    if (cancel != null) $cancel = cancel;
    if (confirm != null) $confirm = confirm;
    if (content != null) $content = content;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'cancel': $cancel,
      'confirm': $confirm,
      'content': $content,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class ShowNavigationBarLoadingOption {
  mpjs.JsObject? $$context$$;

  ShowNavigationBarLoadingCompleteCallback? $complete;

  Future<ShowNavigationBarLoadingCompleteCallback?> get complete async {
    return $complete;
  }

  ShowNavigationBarLoadingFailCallback? $fail;

  Future<ShowNavigationBarLoadingFailCallback?> get fail async {
    return $fail;
  }

  ShowNavigationBarLoadingSuccessCallback? $success;

  Future<ShowNavigationBarLoadingSuccessCallback?> get success async {
    return $success;
  }

  ShowNavigationBarLoadingOption({this.$$context$$});

  void setValues(
      {ShowNavigationBarLoadingCompleteCallback? complete,
      ShowNavigationBarLoadingFailCallback? fail,
      ShowNavigationBarLoadingSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ShowRedPackageOption {
  mpjs.JsObject? $$context$$;

  String $url = "";

  Future<String> get url async {
    return await $$context$$?.getPropertyValue('url') ?? $url;
  }

  ShowRedPackageCompleteCallback? $complete;

  Future<ShowRedPackageCompleteCallback?> get complete async {
    return $complete;
  }

  ShowRedPackageFailCallback? $fail;

  Future<ShowRedPackageFailCallback?> get fail async {
    return $fail;
  }

  ShowRedPackageSuccessCallback? $success;

  Future<ShowRedPackageSuccessCallback?> get success async {
    return $success;
  }

  ShowRedPackageOption({this.$$context$$});

  void setValues(
      {String? url,
      ShowRedPackageCompleteCallback? complete,
      ShowRedPackageFailCallback? fail,
      ShowRedPackageSuccessCallback? success}) {
    if (url != null) $url = url;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'url': $url,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ShowShareImageMenuOption {
  mpjs.JsObject? $$context$$;

  String $path = "";

  Future<String> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  ShowShareImageMenuCompleteCallback? $complete;

  Future<ShowShareImageMenuCompleteCallback?> get complete async {
    return $complete;
  }

  ShowShareImageMenuFailCallback? $fail;

  Future<ShowShareImageMenuFailCallback?> get fail async {
    return $fail;
  }

  ShowShareImageMenuSuccessCallback? $success;

  Future<ShowShareImageMenuSuccessCallback?> get success async {
    return $success;
  }

  ShowShareImageMenuOption({this.$$context$$});

  void setValues(
      {String? path,
      ShowShareImageMenuCompleteCallback? complete,
      ShowShareImageMenuFailCallback? fail,
      ShowShareImageMenuSuccessCallback? success}) {
    if (path != null) $path = path;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'path': $path,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ShowShareMenuOption {
  mpjs.JsObject? $$context$$;

  ShowShareMenuCompleteCallback? $complete;

  Future<ShowShareMenuCompleteCallback?> get complete async {
    return $complete;
  }

  ShowShareMenuFailCallback? $fail;

  Future<ShowShareMenuFailCallback?> get fail async {
    return $fail;
  }

  List<String>? $menus;

  Future<List<String>?> get menus async {
    return await $$context$$?.getPropertyValue('menus') ?? $menus;
  }

  ShowShareMenuSuccessCallback? $success;

  Future<ShowShareMenuSuccessCallback?> get success async {
    return $success;
  }

  bool? $withShareTicket;

  Future<bool?> get withShareTicket async {
    return await $$context$$?.getPropertyValue('withShareTicket') ??
        $withShareTicket;
  }

  ShowShareMenuOption({this.$$context$$});

  void setValues(
      {ShowShareMenuCompleteCallback? complete,
      ShowShareMenuFailCallback? fail,
      List<String>? menus,
      ShowShareMenuSuccessCallback? success,
      bool? withShareTicket}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (menus != null) $menus = menus;
    if (success != null) $success = success;
    if (withShareTicket != null) $withShareTicket = withShareTicket;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'menus': $menus,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'withShareTicket': $withShareTicket
    }..removeWhere((key, value) => value == null);
  }
}

class ShowTabBarOption {
  mpjs.JsObject? $$context$$;

  bool? $animation;

  Future<bool?> get animation async {
    return await $$context$$?.getPropertyValue('animation') ?? $animation;
  }

  ShowTabBarCompleteCallback? $complete;

  Future<ShowTabBarCompleteCallback?> get complete async {
    return $complete;
  }

  ShowTabBarFailCallback? $fail;

  Future<ShowTabBarFailCallback?> get fail async {
    return $fail;
  }

  ShowTabBarSuccessCallback? $success;

  Future<ShowTabBarSuccessCallback?> get success async {
    return $success;
  }

  ShowTabBarOption({this.$$context$$});

  void setValues(
      {bool? animation,
      ShowTabBarCompleteCallback? complete,
      ShowTabBarFailCallback? fail,
      ShowTabBarSuccessCallback? success}) {
    if (animation != null) $animation = animation;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'animation': $animation,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ShowTabBarRedDotOption {
  mpjs.JsObject? $$context$$;

  num $index = 0;

  Future<num> get index async {
    return await $$context$$?.getPropertyValue('index') ?? $index;
  }

  ShowTabBarRedDotCompleteCallback? $complete;

  Future<ShowTabBarRedDotCompleteCallback?> get complete async {
    return $complete;
  }

  ShowTabBarRedDotFailCallback? $fail;

  Future<ShowTabBarRedDotFailCallback?> get fail async {
    return $fail;
  }

  ShowTabBarRedDotSuccessCallback? $success;

  Future<ShowTabBarRedDotSuccessCallback?> get success async {
    return $success;
  }

  ShowTabBarRedDotOption({this.$$context$$});

  void setValues(
      {num? index,
      ShowTabBarRedDotCompleteCallback? complete,
      ShowTabBarRedDotFailCallback? fail,
      ShowTabBarRedDotSuccessCallback? success}) {
    if (index != null) $index = index;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'index': $index,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ShowToastOption {
  mpjs.JsObject? $$context$$;

  String $title = "";

  Future<String> get title async {
    return await $$context$$?.getPropertyValue('title') ?? $title;
  }

  ShowToastCompleteCallback? $complete;

  Future<ShowToastCompleteCallback?> get complete async {
    return $complete;
  }

  num? $duration;

  Future<num?> get duration async {
    return await $$context$$?.getPropertyValue('duration') ?? $duration;
  }

  ShowToastFailCallback? $fail;

  Future<ShowToastFailCallback?> get fail async {
    return $fail;
  }

  dynamic $icon;

  Future<dynamic> get icon async {
    return await $$context$$?.getPropertyValue('icon') ?? $icon;
  }

  String? $image;

  Future<String?> get image async {
    return await $$context$$?.getPropertyValue('image') ?? $image;
  }

  bool? $mask;

  Future<bool?> get mask async {
    return await $$context$$?.getPropertyValue('mask') ?? $mask;
  }

  ShowToastSuccessCallback? $success;

  Future<ShowToastSuccessCallback?> get success async {
    return $success;
  }

  ShowToastOption({this.$$context$$});

  void setValues(
      {String? title,
      ShowToastCompleteCallback? complete,
      num? duration,
      ShowToastFailCallback? fail,
      dynamic icon,
      String? image,
      bool? mask,
      ShowToastSuccessCallback? success}) {
    if (title != null) $title = title;
    if (complete != null) $complete = complete;
    if (duration != null) $duration = duration;
    if (fail != null) $fail = fail;
    if (icon != null) $icon = icon;
    if (image != null) $image = image;
    if (mask != null) $mask = mask;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'title': $title,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'duration': $duration,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'icon': $icon,
      'image': $image,
      'mask': $mask,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class Size {
  mpjs.JsObject? $$context$$;

  num $windowHeight = 0;

  Future<num> get windowHeight async {
    return await $$context$$?.getPropertyValue('windowHeight') ?? $windowHeight;
  }

  num $windowWidth = 0;

  Future<num> get windowWidth async {
    return await $$context$$?.getPropertyValue('windowWidth') ?? $windowWidth;
  }

  Size({this.$$context$$});

  void setValues({num? windowHeight, num? windowWidth}) {
    if (windowHeight != null) $windowHeight = windowHeight;
    if (windowWidth != null) $windowWidth = windowWidth;
  }

  Map toJson() {
    return {'windowHeight': $windowHeight, 'windowWidth': $windowWidth}
      ..removeWhere((key, value) => value == null);
  }
}

class SkylineInfo {
  mpjs.JsObject? $$context$$;

  bool $isSupported = false;

  Future<bool> get isSupported async {
    return await $$context$$?.getPropertyValue('isSupported') ?? $isSupported;
  }

  dynamic $reason;

  Future<dynamic> get reason async {
    return await $$context$$?.getPropertyValue('reason') ?? $reason;
  }

  String $version = "";

  Future<String> get version async {
    return await $$context$$?.getPropertyValue('version') ?? $version;
  }

  SkylineInfo({this.$$context$$});

  void setValues({bool? isSupported, dynamic reason, String? version}) {
    if (isSupported != null) $isSupported = isSupported;
    if (reason != null) $reason = reason;
    if (version != null) $version = version;
  }

  Map toJson() {
    return {'isSupported': $isSupported, 'reason': $reason, 'version': $version}
      ..removeWhere((key, value) => value == null);
  }
}

class SocketProfile {
  mpjs.JsObject? $$context$$;

  num $connectEnd = 0;

  Future<num> get connectEnd async {
    return await $$context$$?.getPropertyValue('connectEnd') ?? $connectEnd;
  }

  num $connectStart = 0;

  Future<num> get connectStart async {
    return await $$context$$?.getPropertyValue('connectStart') ?? $connectStart;
  }

  num $cost = 0;

  Future<num> get cost async {
    return await $$context$$?.getPropertyValue('cost') ?? $cost;
  }

  num $domainLookupEnd = 0;

  Future<num> get domainLookupEnd async {
    return await $$context$$?.getPropertyValue('domainLookupEnd') ??
        $domainLookupEnd;
  }

  num $domainLookupStart = 0;

  Future<num> get domainLookupStart async {
    return await $$context$$?.getPropertyValue('domainLookupStart') ??
        $domainLookupStart;
  }

  num $fetchStart = 0;

  Future<num> get fetchStart async {
    return await $$context$$?.getPropertyValue('fetchStart') ?? $fetchStart;
  }

  num $handshakeCost = 0;

  Future<num> get handshakeCost async {
    return await $$context$$?.getPropertyValue('handshakeCost') ??
        $handshakeCost;
  }

  num $rtt = 0;

  Future<num> get rtt async {
    return await $$context$$?.getPropertyValue('rtt') ?? $rtt;
  }

  SocketProfile({this.$$context$$});

  void setValues(
      {num? connectEnd,
      num? connectStart,
      num? cost,
      num? domainLookupEnd,
      num? domainLookupStart,
      num? fetchStart,
      num? handshakeCost,
      num? rtt}) {
    if (connectEnd != null) $connectEnd = connectEnd;
    if (connectStart != null) $connectStart = connectStart;
    if (cost != null) $cost = cost;
    if (domainLookupEnd != null) $domainLookupEnd = domainLookupEnd;
    if (domainLookupStart != null) $domainLookupStart = domainLookupStart;
    if (fetchStart != null) $fetchStart = fetchStart;
    if (handshakeCost != null) $handshakeCost = handshakeCost;
    if (rtt != null) $rtt = rtt;
  }

  Map toJson() {
    return {
      'connectEnd': $connectEnd,
      'connectStart': $connectStart,
      'cost': $cost,
      'domainLookupEnd': $domainLookupEnd,
      'domainLookupStart': $domainLookupStart,
      'fetchStart': $fetchStart,
      'handshakeCost': $handshakeCost,
      'rtt': $rtt
    }..removeWhere((key, value) => value == null);
  }
}

class SocketTaskCloseOption {
  mpjs.JsObject? $$context$$;

  num? $code;

  Future<num?> get code async {
    return await $$context$$?.getPropertyValue('code') ?? $code;
  }

  FileSystemManagerCloseCompleteCallback? $complete;

  Future<FileSystemManagerCloseCompleteCallback?> get complete async {
    return $complete;
  }

  SocketTaskCloseFailCallback? $fail;

  Future<SocketTaskCloseFailCallback?> get fail async {
    return $fail;
  }

  String? $reason;

  Future<String?> get reason async {
    return await $$context$$?.getPropertyValue('reason') ?? $reason;
  }

  FileSystemManagerCloseSuccessCallback? $success;

  Future<FileSystemManagerCloseSuccessCallback?> get success async {
    return $success;
  }

  SocketTaskCloseOption({this.$$context$$});

  void setValues(
      {num? code,
      FileSystemManagerCloseCompleteCallback? complete,
      SocketTaskCloseFailCallback? fail,
      String? reason,
      FileSystemManagerCloseSuccessCallback? success}) {
    if (code != null) $code = code;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (reason != null) $reason = reason;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'code': $code,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'reason': $reason,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SocketTaskOnCloseListenerResult {
  mpjs.JsObject? $$context$$;

  num $code = 0;

  Future<num> get code async {
    return await $$context$$?.getPropertyValue('code') ?? $code;
  }

  String $reason = "";

  Future<String> get reason async {
    return await $$context$$?.getPropertyValue('reason') ?? $reason;
  }

  SocketTaskOnCloseListenerResult({this.$$context$$});

  void setValues({num? code, String? reason}) {
    if (code != null) $code = code;
    if (reason != null) $reason = reason;
  }

  Map toJson() {
    return {'code': $code, 'reason': $reason}
      ..removeWhere((key, value) => value == null);
  }
}

class SocketTaskOnMessageListenerResult {
  mpjs.JsObject? $$context$$;

  dynamic $data;

  Future<dynamic> get data async {
    return await $$context$$?.getPropertyValue('data') ?? $data;
  }

  SocketTaskOnMessageListenerResult({this.$$context$$});

  void setValues({dynamic data}) {
    if (data != null) $data = data;
  }

  Map toJson() {
    return {'data': $data}..removeWhere((key, value) => value == null);
  }
}

class SocketTaskSendOption {
  mpjs.JsObject? $$context$$;

  dynamic $data;

  Future<dynamic> get data async {
    return await $$context$$?.getPropertyValue('data') ?? $data;
  }

  SendCompleteCallback? $complete;

  Future<SendCompleteCallback?> get complete async {
    return $complete;
  }

  SendFailCallback? $fail;

  Future<SendFailCallback?> get fail async {
    return $fail;
  }

  SendSuccessCallback? $success;

  Future<SendSuccessCallback?> get success async {
    return $success;
  }

  SocketTaskSendOption({this.$$context$$});

  void setValues(
      {dynamic data,
      SendCompleteCallback? complete,
      SendFailCallback? fail,
      SendSuccessCallback? success}) {
    if (data != null) $data = data;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'data': $data,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SpringOption {
  mpjs.JsObject? $$context$$;

  num? $damping;

  Future<num?> get damping async {
    return await $$context$$?.getPropertyValue('damping') ?? $damping;
  }

  num? $mass;

  Future<num?> get mass async {
    return await $$context$$?.getPropertyValue('mass') ?? $mass;
  }

  bool? $overshootClamping;

  Future<bool?> get overshootClamping async {
    return await $$context$$?.getPropertyValue('overshootClamping') ??
        $overshootClamping;
  }

  num? $restDisplacementThreshold;

  Future<num?> get restDisplacementThreshold async {
    return await $$context$$?.getPropertyValue('restDisplacementThreshold') ??
        $restDisplacementThreshold;
  }

  num? $restSpeedThreshold;

  Future<num?> get restSpeedThreshold async {
    return await $$context$$?.getPropertyValue('restSpeedThreshold') ??
        $restSpeedThreshold;
  }

  num? $stiffness;

  Future<num?> get stiffness async {
    return await $$context$$?.getPropertyValue('stiffness') ?? $stiffness;
  }

  num? $velocity;

  Future<num?> get velocity async {
    return await $$context$$?.getPropertyValue('velocity') ?? $velocity;
  }

  SpringOption({this.$$context$$});

  void setValues(
      {num? damping,
      num? mass,
      bool? overshootClamping,
      num? restDisplacementThreshold,
      num? restSpeedThreshold,
      num? stiffness,
      num? velocity}) {
    if (damping != null) $damping = damping;
    if (mass != null) $mass = mass;
    if (overshootClamping != null) $overshootClamping = overshootClamping;
    if (restDisplacementThreshold != null)
      $restDisplacementThreshold = restDisplacementThreshold;
    if (restSpeedThreshold != null) $restSpeedThreshold = restSpeedThreshold;
    if (stiffness != null) $stiffness = stiffness;
    if (velocity != null) $velocity = velocity;
  }

  Map toJson() {
    return {
      'damping': $damping,
      'mass': $mass,
      'overshootClamping': $overshootClamping,
      'restDisplacementThreshold': $restDisplacementThreshold,
      'restSpeedThreshold': $restSpeedThreshold,
      'stiffness': $stiffness,
      'velocity': $velocity
    }..removeWhere((key, value) => value == null);
  }
}

class StartAccelerometerOption {
  mpjs.JsObject? $$context$$;

  StartAccelerometerCompleteCallback? $complete;

  Future<StartAccelerometerCompleteCallback?> get complete async {
    return $complete;
  }

  StartAccelerometerFailCallback? $fail;

  Future<StartAccelerometerFailCallback?> get fail async {
    return $fail;
  }

  dynamic $interval;

  Future<dynamic> get interval async {
    return await $$context$$?.getPropertyValue('interval') ?? $interval;
  }

  StartAccelerometerSuccessCallback? $success;

  Future<StartAccelerometerSuccessCallback?> get success async {
    return $success;
  }

  StartAccelerometerOption({this.$$context$$});

  void setValues(
      {StartAccelerometerCompleteCallback? complete,
      StartAccelerometerFailCallback? fail,
      dynamic interval,
      StartAccelerometerSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (interval != null) $interval = interval;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'interval': $interval,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StartAdvertisingObject {
  mpjs.JsObject? $$context$$;

  AdvertiseReqObj $advertiseRequest = AdvertiseReqObj();

  Future<AdvertiseReqObj> get advertiseRequest async {
    return AdvertiseReqObj(
        $$context$$: $$context$$?.getProperty('advertiseRequest'));
  }

  StartAdvertisingCompleteCallback? $complete;

  Future<StartAdvertisingCompleteCallback?> get complete async {
    return $complete;
  }

  StartAdvertisingFailCallback? $fail;

  Future<StartAdvertisingFailCallback?> get fail async {
    return $fail;
  }

  dynamic $powerLevel;

  Future<dynamic> get powerLevel async {
    return await $$context$$?.getPropertyValue('powerLevel') ?? $powerLevel;
  }

  StartAdvertisingSuccessCallback? $success;

  Future<StartAdvertisingSuccessCallback?> get success async {
    return $success;
  }

  StartAdvertisingObject({this.$$context$$});

  void setValues(
      {AdvertiseReqObj? advertiseRequest,
      StartAdvertisingCompleteCallback? complete,
      StartAdvertisingFailCallback? fail,
      dynamic powerLevel,
      StartAdvertisingSuccessCallback? success}) {
    if (advertiseRequest != null) $advertiseRequest = advertiseRequest;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (powerLevel != null) $powerLevel = powerLevel;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'advertiseRequest': $advertiseRequest,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'powerLevel': $powerLevel,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StartBeaconDiscoveryOption {
  mpjs.JsObject? $$context$$;

  List<String> $uuids = <String>[];

  Future<List<String>> get uuids async {
    return await $$context$$?.getPropertyValue('uuids') ?? $uuids;
  }

  StartBeaconDiscoveryCompleteCallback? $complete;

  Future<StartBeaconDiscoveryCompleteCallback?> get complete async {
    return $complete;
  }

  StartBeaconDiscoveryFailCallback? $fail;

  Future<StartBeaconDiscoveryFailCallback?> get fail async {
    return $fail;
  }

  bool? $ignoreBluetoothAvailable;

  Future<bool?> get ignoreBluetoothAvailable async {
    return await $$context$$?.getPropertyValue('ignoreBluetoothAvailable') ??
        $ignoreBluetoothAvailable;
  }

  StartBeaconDiscoverySuccessCallback? $success;

  Future<StartBeaconDiscoverySuccessCallback?> get success async {
    return $success;
  }

  StartBeaconDiscoveryOption({this.$$context$$});

  void setValues(
      {List<String>? uuids,
      StartBeaconDiscoveryCompleteCallback? complete,
      StartBeaconDiscoveryFailCallback? fail,
      bool? ignoreBluetoothAvailable,
      StartBeaconDiscoverySuccessCallback? success}) {
    if (uuids != null) $uuids = uuids;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (ignoreBluetoothAvailable != null)
      $ignoreBluetoothAvailable = ignoreBluetoothAvailable;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'uuids': $uuids,
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => BeaconError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => BeaconError($$context$$: e)])
          : null,
      'ignoreBluetoothAvailable': $ignoreBluetoothAvailable,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => BeaconError($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StartBluetoothDevicesDiscoveryOption {
  mpjs.JsObject? $$context$$;

  bool? $allowDuplicatesKey;

  Future<bool?> get allowDuplicatesKey async {
    return await $$context$$?.getPropertyValue('allowDuplicatesKey') ??
        $allowDuplicatesKey;
  }

  StartBluetoothDevicesDiscoveryCompleteCallback? $complete;

  Future<StartBluetoothDevicesDiscoveryCompleteCallback?> get complete async {
    return $complete;
  }

  StartBluetoothDevicesDiscoveryFailCallback? $fail;

  Future<StartBluetoothDevicesDiscoveryFailCallback?> get fail async {
    return $fail;
  }

  num? $interval;

  Future<num?> get interval async {
    return await $$context$$?.getPropertyValue('interval') ?? $interval;
  }

  dynamic $powerLevel;

  Future<dynamic> get powerLevel async {
    return await $$context$$?.getPropertyValue('powerLevel') ?? $powerLevel;
  }

  List<String>? $services;

  Future<List<String>?> get services async {
    return await $$context$$?.getPropertyValue('services') ?? $services;
  }

  StartBluetoothDevicesDiscoverySuccessCallback? $success;

  Future<StartBluetoothDevicesDiscoverySuccessCallback?> get success async {
    return $success;
  }

  StartBluetoothDevicesDiscoveryOption({this.$$context$$});

  void setValues(
      {bool? allowDuplicatesKey,
      StartBluetoothDevicesDiscoveryCompleteCallback? complete,
      StartBluetoothDevicesDiscoveryFailCallback? fail,
      num? interval,
      dynamic powerLevel,
      List<String>? services,
      StartBluetoothDevicesDiscoverySuccessCallback? success}) {
    if (allowDuplicatesKey != null) $allowDuplicatesKey = allowDuplicatesKey;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (interval != null) $interval = interval;
    if (powerLevel != null) $powerLevel = powerLevel;
    if (services != null) $services = services;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'allowDuplicatesKey': $allowDuplicatesKey,
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'interval': $interval,
      'powerLevel': $powerLevel,
      'services': $services,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => BluetoothError($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StartCompassOption {
  mpjs.JsObject? $$context$$;

  StartCompassCompleteCallback? $complete;

  Future<StartCompassCompleteCallback?> get complete async {
    return $complete;
  }

  StartCompassFailCallback? $fail;

  Future<StartCompassFailCallback?> get fail async {
    return $fail;
  }

  StartCompassSuccessCallback? $success;

  Future<StartCompassSuccessCallback?> get success async {
    return $success;
  }

  StartCompassOption({this.$$context$$});

  void setValues(
      {StartCompassCompleteCallback? complete,
      StartCompassFailCallback? fail,
      StartCompassSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StartDeviceMotionListeningOption {
  mpjs.JsObject? $$context$$;

  StartDeviceMotionListeningCompleteCallback? $complete;

  Future<StartDeviceMotionListeningCompleteCallback?> get complete async {
    return $complete;
  }

  StartDeviceMotionListeningFailCallback? $fail;

  Future<StartDeviceMotionListeningFailCallback?> get fail async {
    return $fail;
  }

  dynamic $interval;

  Future<dynamic> get interval async {
    return await $$context$$?.getPropertyValue('interval') ?? $interval;
  }

  StartDeviceMotionListeningSuccessCallback? $success;

  Future<StartDeviceMotionListeningSuccessCallback?> get success async {
    return $success;
  }

  StartDeviceMotionListeningOption({this.$$context$$});

  void setValues(
      {StartDeviceMotionListeningCompleteCallback? complete,
      StartDeviceMotionListeningFailCallback? fail,
      dynamic interval,
      StartDeviceMotionListeningSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (interval != null) $interval = interval;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'interval': $interval,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StartDiscoveryOption {
  mpjs.JsObject? $$context$$;

  StartDiscoveryCompleteCallback? $complete;

  Future<StartDiscoveryCompleteCallback?> get complete async {
    return $complete;
  }

  StartDiscoveryFailCallback? $fail;

  Future<StartDiscoveryFailCallback?> get fail async {
    return $fail;
  }

  StartDiscoverySuccessCallback? $success;

  Future<StartDiscoverySuccessCallback?> get success async {
    return $success;
  }

  StartDiscoveryOption({this.$$context$$});

  void setValues(
      {StartDiscoveryCompleteCallback? complete,
      StartDiscoveryFailCallback? fail,
      StartDiscoverySuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => Nfcrwerror($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => Nfcrwerror($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => Nfcrwerror($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StartGyroscopeOption {
  mpjs.JsObject? $$context$$;

  StartGyroscopeCompleteCallback? $complete;

  Future<StartGyroscopeCompleteCallback?> get complete async {
    return $complete;
  }

  StartGyroscopeFailCallback? $fail;

  Future<StartGyroscopeFailCallback?> get fail async {
    return $fail;
  }

  dynamic $interval;

  Future<dynamic> get interval async {
    return await $$context$$?.getPropertyValue('interval') ?? $interval;
  }

  StartGyroscopeSuccessCallback? $success;

  Future<StartGyroscopeSuccessCallback?> get success async {
    return $success;
  }

  StartGyroscopeOption({this.$$context$$});

  void setValues(
      {StartGyroscopeCompleteCallback? complete,
      StartGyroscopeFailCallback? fail,
      dynamic interval,
      StartGyroscopeSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (interval != null) $interval = interval;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'interval': $interval,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StartHCEOption {
  mpjs.JsObject? $$context$$;

  List<String> $aid_list = <String>[];

  Future<List<String>> get aid_list async {
    return await $$context$$?.getPropertyValue('aid_list') ?? $aid_list;
  }

  StartHCECompleteCallback? $complete;

  Future<StartHCECompleteCallback?> get complete async {
    return $complete;
  }

  StartHCEFailCallback? $fail;

  Future<StartHCEFailCallback?> get fail async {
    return $fail;
  }

  StartHCESuccessCallback? $success;

  Future<StartHCESuccessCallback?> get success async {
    return $success;
  }

  StartHCEOption({this.$$context$$});

  void setValues(
      {List<String>? aid_list,
      StartHCECompleteCallback? complete,
      StartHCEFailCallback? fail,
      StartHCESuccessCallback? success}) {
    if (aid_list != null) $aid_list = aid_list;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'aid_list': $aid_list,
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => NFCError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => NFCError($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => NFCError($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StartLocalServiceDiscoveryFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  StartLocalServiceDiscoveryFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class StartLocalServiceDiscoveryOption {
  mpjs.JsObject? $$context$$;

  String $serviceType = "";

  Future<String> get serviceType async {
    return await $$context$$?.getPropertyValue('serviceType') ?? $serviceType;
  }

  StartLocalServiceDiscoveryCompleteCallback? $complete;

  Future<StartLocalServiceDiscoveryCompleteCallback?> get complete async {
    return $complete;
  }

  StartLocalServiceDiscoveryFailCallback? $fail;

  Future<StartLocalServiceDiscoveryFailCallback?> get fail async {
    return $fail;
  }

  StartLocalServiceDiscoverySuccessCallback? $success;

  Future<StartLocalServiceDiscoverySuccessCallback?> get success async {
    return $success;
  }

  StartLocalServiceDiscoveryOption({this.$$context$$});

  void setValues(
      {String? serviceType,
      StartLocalServiceDiscoveryCompleteCallback? complete,
      StartLocalServiceDiscoveryFailCallback? fail,
      StartLocalServiceDiscoverySuccessCallback? success}) {
    if (serviceType != null) $serviceType = serviceType;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'serviceType': $serviceType,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [
              (e) =>
                  StartLocalServiceDiscoveryFailCallbackResult($$context$$: e)
            ])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StartLocationUpdateBackgroundOption {
  mpjs.JsObject? $$context$$;

  StartLocationUpdateBackgroundCompleteCallback? $complete;

  Future<StartLocationUpdateBackgroundCompleteCallback?> get complete async {
    return $complete;
  }

  StartLocationUpdateBackgroundFailCallback? $fail;

  Future<StartLocationUpdateBackgroundFailCallback?> get fail async {
    return $fail;
  }

  StartLocationUpdateBackgroundSuccessCallback? $success;

  Future<StartLocationUpdateBackgroundSuccessCallback?> get success async {
    return $success;
  }

  String? $type;

  Future<String?> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  StartLocationUpdateBackgroundOption({this.$$context$$});

  void setValues(
      {StartLocationUpdateBackgroundCompleteCallback? complete,
      StartLocationUpdateBackgroundFailCallback? fail,
      StartLocationUpdateBackgroundSuccessCallback? success,
      String? type}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
    if (type != null) $type = type;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'type': $type
    }..removeWhere((key, value) => value == null);
  }
}

class StartLocationUpdateOption {
  mpjs.JsObject? $$context$$;

  StartLocationUpdateCompleteCallback? $complete;

  Future<StartLocationUpdateCompleteCallback?> get complete async {
    return $complete;
  }

  StartLocationUpdateFailCallback? $fail;

  Future<StartLocationUpdateFailCallback?> get fail async {
    return $fail;
  }

  StartLocationUpdateSuccessCallback? $success;

  Future<StartLocationUpdateSuccessCallback?> get success async {
    return $success;
  }

  String? $type;

  Future<String?> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  StartLocationUpdateOption({this.$$context$$});

  void setValues(
      {StartLocationUpdateCompleteCallback? complete,
      StartLocationUpdateFailCallback? fail,
      StartLocationUpdateSuccessCallback? success,
      String? type}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
    if (type != null) $type = type;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'type': $type
    }..removeWhere((key, value) => value == null);
  }
}

class StartPreviewOption {
  mpjs.JsObject? $$context$$;

  StartPreviewCompleteCallback? $complete;

  Future<StartPreviewCompleteCallback?> get complete async {
    return $complete;
  }

  StartPreviewFailCallback? $fail;

  Future<StartPreviewFailCallback?> get fail async {
    return $fail;
  }

  StartPreviewSuccessCallback? $success;

  Future<StartPreviewSuccessCallback?> get success async {
    return $success;
  }

  StartPreviewOption({this.$$context$$});

  void setValues(
      {StartPreviewCompleteCallback? complete,
      StartPreviewFailCallback? fail,
      StartPreviewSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StartPullDownRefreshOption {
  mpjs.JsObject? $$context$$;

  StartPullDownRefreshCompleteCallback? $complete;

  Future<StartPullDownRefreshCompleteCallback?> get complete async {
    return $complete;
  }

  StartPullDownRefreshFailCallback? $fail;

  Future<StartPullDownRefreshFailCallback?> get fail async {
    return $fail;
  }

  StartPullDownRefreshSuccessCallback? $success;

  Future<StartPullDownRefreshSuccessCallback?> get success async {
    return $success;
  }

  StartPullDownRefreshOption({this.$$context$$});

  void setValues(
      {StartPullDownRefreshCompleteCallback? complete,
      StartPullDownRefreshFailCallback? fail,
      StartPullDownRefreshSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StartRecordSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $tempFilePath = "";

  Future<String> get tempFilePath async {
    return await $$context$$?.getPropertyValue('tempFilePath') ?? $tempFilePath;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  StartRecordSuccessCallbackResult({this.$$context$$});

  void setValues({String? tempFilePath, String? errMsg}) {
    if (tempFilePath != null) $tempFilePath = tempFilePath;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'tempFilePath': $tempFilePath, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class StartRecordTimeoutCallbackResult {
  mpjs.JsObject? $$context$$;

  String $tempThumbPath = "";

  Future<String> get tempThumbPath async {
    return await $$context$$?.getPropertyValue('tempThumbPath') ??
        $tempThumbPath;
  }

  String $tempVideoPath = "";

  Future<String> get tempVideoPath async {
    return await $$context$$?.getPropertyValue('tempVideoPath') ??
        $tempVideoPath;
  }

  StartRecordTimeoutCallbackResult({this.$$context$$});

  void setValues({String? tempThumbPath, String? tempVideoPath}) {
    if (tempThumbPath != null) $tempThumbPath = tempThumbPath;
    if (tempVideoPath != null) $tempVideoPath = tempVideoPath;
  }

  Map toJson() {
    return {'tempThumbPath': $tempThumbPath, 'tempVideoPath': $tempVideoPath}
      ..removeWhere((key, value) => value == null);
  }
}

class StartSoterAuthenticationOption {
  mpjs.JsObject? $$context$$;

  String $challenge = "";

  Future<String> get challenge async {
    return await $$context$$?.getPropertyValue('challenge') ?? $challenge;
  }

  Array<dynamic> $requestAuthModes = [];

  Future<Array<dynamic>> get requestAuthModes async {
    return $requestAuthModes;
  }

  String? $authContent;

  Future<String?> get authContent async {
    return await $$context$$?.getPropertyValue('authContent') ?? $authContent;
  }

  StartSoterAuthenticationCompleteCallback? $complete;

  Future<StartSoterAuthenticationCompleteCallback?> get complete async {
    return $complete;
  }

  StartSoterAuthenticationFailCallback? $fail;

  Future<StartSoterAuthenticationFailCallback?> get fail async {
    return $fail;
  }

  StartSoterAuthenticationSuccessCallback? $success;

  Future<StartSoterAuthenticationSuccessCallback?> get success async {
    return $success;
  }

  StartSoterAuthenticationOption({this.$$context$$});

  void setValues(
      {String? challenge,
      Array<dynamic>? requestAuthModes,
      String? authContent,
      StartSoterAuthenticationCompleteCallback? complete,
      StartSoterAuthenticationFailCallback? fail,
      StartSoterAuthenticationSuccessCallback? success}) {
    if (challenge != null) $challenge = challenge;
    if (requestAuthModes != null) $requestAuthModes = requestAuthModes;
    if (authContent != null) $authContent = authContent;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'challenge': $challenge,
      'requestAuthModes': $requestAuthModes,
      'authContent': $authContent,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [
              (e) =>
                  StartSoterAuthenticationSuccessCallbackResult($$context$$: e)
            ])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StartSoterAuthenticationSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $authMode = "";

  Future<String> get authMode async {
    return await $$context$$?.getPropertyValue('authMode') ?? $authMode;
  }

  num $errCode = 0;

  Future<num> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  String $resultJSON = "";

  Future<String> get resultJSON async {
    return await $$context$$?.getPropertyValue('resultJSON') ?? $resultJSON;
  }

  String $resultJSONSignature = "";

  Future<String> get resultJSONSignature async {
    return await $$context$$?.getPropertyValue('resultJSONSignature') ??
        $resultJSONSignature;
  }

  StartSoterAuthenticationSuccessCallbackResult({this.$$context$$});

  void setValues(
      {String? authMode,
      num? errCode,
      String? errMsg,
      String? resultJSON,
      String? resultJSONSignature}) {
    if (authMode != null) $authMode = authMode;
    if (errCode != null) $errCode = errCode;
    if (errMsg != null) $errMsg = errMsg;
    if (resultJSON != null) $resultJSON = resultJSON;
    if (resultJSONSignature != null) $resultJSONSignature = resultJSONSignature;
  }

  Map toJson() {
    return {
      'authMode': $authMode,
      'errCode': $errCode,
      'errMsg': $errMsg,
      'resultJSON': $resultJSON,
      'resultJSONSignature': $resultJSONSignature
    }..removeWhere((key, value) => value == null);
  }
}

class StartWifiOption {
  mpjs.JsObject? $$context$$;

  StartWifiCompleteCallback? $complete;

  Future<StartWifiCompleteCallback?> get complete async {
    return $complete;
  }

  StartWifiFailCallback? $fail;

  Future<StartWifiFailCallback?> get fail async {
    return $fail;
  }

  StartWifiSuccessCallback? $success;

  Future<StartWifiSuccessCallback?> get success async {
    return $success;
  }

  StartWifiOption({this.$$context$$});

  void setValues(
      {StartWifiCompleteCallback? complete,
      StartWifiFailCallback? fail,
      StartWifiSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => WifiError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => WifiError($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => WifiError($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StatFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  StatFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class StatOption {
  mpjs.JsObject? $$context$$;

  String $path = "";

  Future<String> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  StatCompleteCallback? $complete;

  Future<StatCompleteCallback?> get complete async {
    return $complete;
  }

  StatFailCallback? $fail;

  Future<StatFailCallback?> get fail async {
    return $fail;
  }

  bool? $recursive;

  Future<bool?> get recursive async {
    return await $$context$$?.getPropertyValue('recursive') ?? $recursive;
  }

  StatSuccessCallback? $success;

  Future<StatSuccessCallback?> get success async {
    return $success;
  }

  StatOption({this.$$context$$});

  void setValues(
      {String? path,
      StatCompleteCallback? complete,
      StatFailCallback? fail,
      bool? recursive,
      StatSuccessCallback? success}) {
    if (path != null) $path = path;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (recursive != null) $recursive = recursive;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'path': $path,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => StatFailCallbackResult($$context$$: e)])
          : null,
      'recursive': $recursive,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => StatSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StatSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  dynamic $stats;

  Future<dynamic> get stats async {
    return await $$context$$?.getPropertyValue('stats') ?? $stats;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  StatSuccessCallbackResult({this.$$context$$});

  void setValues({dynamic stats, String? errMsg}) {
    if (stats != null) $stats = stats;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'stats': $stats, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class Stats {
  mpjs.JsObject? $$context$$;

  num $lastAccessedTime = 0;

  Future<num> get lastAccessedTime async {
    return await $$context$$?.getPropertyValue('lastAccessedTime') ??
        $lastAccessedTime;
  }

  num $lastModifiedTime = 0;

  Future<num> get lastModifiedTime async {
    return await $$context$$?.getPropertyValue('lastModifiedTime') ??
        $lastModifiedTime;
  }

  String $mode = "";

  Future<String> get mode async {
    return await $$context$$?.getPropertyValue('mode') ?? $mode;
  }

  num $size = 0;

  Future<num> get size async {
    return await $$context$$?.getPropertyValue('size') ?? $size;
  }

  Stats({this.$$context$$});

  void setValues(
      {num? lastAccessedTime, num? lastModifiedTime, String? mode, num? size}) {
    if (lastAccessedTime != null) $lastAccessedTime = lastAccessedTime;
    if (lastModifiedTime != null) $lastModifiedTime = lastModifiedTime;
    if (mode != null) $mode = mode;
    if (size != null) $size = size;
  }

  Map toJson() {
    return {
      'lastAccessedTime': $lastAccessedTime,
      'lastModifiedTime': $lastModifiedTime,
      'mode': $mode,
      'size': $size
    }..removeWhere((key, value) => value == null);
  }

  Future<bool> isDirectory() async {
    final result = await $$context$$?.callMethod('isDirectory', []);
    return result;
  }

  Future<bool> isFile() async {
    final result = await $$context$$?.callMethod('isFile', []);
    return result;
  }
}

class StepOption {
  mpjs.JsObject? $$context$$;

  num? $delay;

  Future<num?> get delay async {
    return await $$context$$?.getPropertyValue('delay') ?? $delay;
  }

  num? $duration;

  Future<num?> get duration async {
    return await $$context$$?.getPropertyValue('duration') ?? $duration;
  }

  dynamic $timingFunction;

  Future<dynamic> get timingFunction async {
    return await $$context$$?.getPropertyValue('timingFunction') ??
        $timingFunction;
  }

  String? $transformOrigin;

  Future<String?> get transformOrigin async {
    return await $$context$$?.getPropertyValue('transformOrigin') ??
        $transformOrigin;
  }

  StepOption({this.$$context$$});

  void setValues(
      {num? delay,
      num? duration,
      dynamic timingFunction,
      String? transformOrigin}) {
    if (delay != null) $delay = delay;
    if (duration != null) $duration = duration;
    if (timingFunction != null) $timingFunction = timingFunction;
    if (transformOrigin != null) $transformOrigin = transformOrigin;
  }

  Map toJson() {
    return {
      'delay': $delay,
      'duration': $duration,
      'timingFunction': $timingFunction,
      'transformOrigin': $transformOrigin
    }..removeWhere((key, value) => value == null);
  }
}

class Sticker {
  mpjs.JsObject? $$context$$;

  num $len = 0;

  Future<num> get len async {
    return await $$context$$?.getPropertyValue('len') ?? $len;
  }

  String $path = "";

  Future<String> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  String $title = "";

  Future<String> get title async {
    return await $$context$$?.getPropertyValue('title') ?? $title;
  }

  dynamic $active;

  Future<dynamic> get active async {
    return await $$context$$?.getPropertyValue('active') ?? $active;
  }

  String? $id;

  Future<String?> get id async {
    return await $$context$$?.getPropertyValue('id') ?? $id;
  }

  String? $md5;

  Future<String?> get md5 async {
    return await $$context$$?.getPropertyValue('md5') ?? $md5;
  }

  List<String>? $pos;

  Future<List<String>?> get pos async {
    return await $$context$$?.getPropertyValue('pos') ?? $pos;
  }

  dynamic $segtype;

  Future<dynamic> get segtype async {
    return await $$context$$?.getPropertyValue('segtype') ?? $segtype;
  }

  Sticker({this.$$context$$});

  void setValues(
      {num? len,
      String? path,
      String? title,
      dynamic active,
      String? id,
      String? md5,
      List<String>? pos,
      dynamic segtype}) {
    if (len != null) $len = len;
    if (path != null) $path = path;
    if (title != null) $title = title;
    if (active != null) $active = active;
    if (id != null) $id = id;
    if (md5 != null) $md5 = md5;
    if (pos != null) $pos = pos;
    if (segtype != null) $segtype = segtype;
  }

  Map toJson() {
    return {
      'len': $len,
      'path': $path,
      'title': $title,
      'active': $active,
      'id': $id,
      'md5': $md5,
      'pos': $pos,
      'segtype': $segtype
    }..removeWhere((key, value) => value == null);
  }
}

class StopAccelerometerOption {
  mpjs.JsObject? $$context$$;

  StopAccelerometerCompleteCallback? $complete;

  Future<StopAccelerometerCompleteCallback?> get complete async {
    return $complete;
  }

  StopAccelerometerFailCallback? $fail;

  Future<StopAccelerometerFailCallback?> get fail async {
    return $fail;
  }

  StopAccelerometerSuccessCallback? $success;

  Future<StopAccelerometerSuccessCallback?> get success async {
    return $success;
  }

  StopAccelerometerOption({this.$$context$$});

  void setValues(
      {StopAccelerometerCompleteCallback? complete,
      StopAccelerometerFailCallback? fail,
      StopAccelerometerSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StopAdvertisingOption {
  mpjs.JsObject? $$context$$;

  StopAdvertisingCompleteCallback? $complete;

  Future<StopAdvertisingCompleteCallback?> get complete async {
    return $complete;
  }

  StopAdvertisingFailCallback? $fail;

  Future<StopAdvertisingFailCallback?> get fail async {
    return $fail;
  }

  StopAdvertisingSuccessCallback? $success;

  Future<StopAdvertisingSuccessCallback?> get success async {
    return $success;
  }

  StopAdvertisingOption({this.$$context$$});

  void setValues(
      {StopAdvertisingCompleteCallback? complete,
      StopAdvertisingFailCallback? fail,
      StopAdvertisingSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StopBGMOption {
  mpjs.JsObject? $$context$$;

  StopBGMCompleteCallback? $complete;

  Future<StopBGMCompleteCallback?> get complete async {
    return $complete;
  }

  StopBGMFailCallback? $fail;

  Future<StopBGMFailCallback?> get fail async {
    return $fail;
  }

  StopBGMSuccessCallback? $success;

  Future<StopBGMSuccessCallback?> get success async {
    return $success;
  }

  StopBGMOption({this.$$context$$});

  void setValues(
      {StopBGMCompleteCallback? complete,
      StopBGMFailCallback? fail,
      StopBGMSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StopBackgroundAudioOption {
  mpjs.JsObject? $$context$$;

  StopBackgroundAudioCompleteCallback? $complete;

  Future<StopBackgroundAudioCompleteCallback?> get complete async {
    return $complete;
  }

  StopBackgroundAudioFailCallback? $fail;

  Future<StopBackgroundAudioFailCallback?> get fail async {
    return $fail;
  }

  StopBackgroundAudioSuccessCallback? $success;

  Future<StopBackgroundAudioSuccessCallback?> get success async {
    return $success;
  }

  StopBackgroundAudioOption({this.$$context$$});

  void setValues(
      {StopBackgroundAudioCompleteCallback? complete,
      StopBackgroundAudioFailCallback? fail,
      StopBackgroundAudioSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StopBeaconDiscoveryOption {
  mpjs.JsObject? $$context$$;

  StopBeaconDiscoveryCompleteCallback? $complete;

  Future<StopBeaconDiscoveryCompleteCallback?> get complete async {
    return $complete;
  }

  StopBeaconDiscoveryFailCallback? $fail;

  Future<StopBeaconDiscoveryFailCallback?> get fail async {
    return $fail;
  }

  StopBeaconDiscoverySuccessCallback? $success;

  Future<StopBeaconDiscoverySuccessCallback?> get success async {
    return $success;
  }

  StopBeaconDiscoveryOption({this.$$context$$});

  void setValues(
      {StopBeaconDiscoveryCompleteCallback? complete,
      StopBeaconDiscoveryFailCallback? fail,
      StopBeaconDiscoverySuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => BeaconError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => BeaconError($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => BeaconError($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StopBluetoothDevicesDiscoveryOption {
  mpjs.JsObject? $$context$$;

  StopBluetoothDevicesDiscoveryCompleteCallback? $complete;

  Future<StopBluetoothDevicesDiscoveryCompleteCallback?> get complete async {
    return $complete;
  }

  StopBluetoothDevicesDiscoveryFailCallback? $fail;

  Future<StopBluetoothDevicesDiscoveryFailCallback?> get fail async {
    return $fail;
  }

  StopBluetoothDevicesDiscoverySuccessCallback? $success;

  Future<StopBluetoothDevicesDiscoverySuccessCallback?> get success async {
    return $success;
  }

  StopBluetoothDevicesDiscoveryOption({this.$$context$$});

  void setValues(
      {StopBluetoothDevicesDiscoveryCompleteCallback? complete,
      StopBluetoothDevicesDiscoveryFailCallback? fail,
      StopBluetoothDevicesDiscoverySuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => BluetoothError($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StopCompassOption {
  mpjs.JsObject? $$context$$;

  StopCompassCompleteCallback? $complete;

  Future<StopCompassCompleteCallback?> get complete async {
    return $complete;
  }

  StopCompassFailCallback? $fail;

  Future<StopCompassFailCallback?> get fail async {
    return $fail;
  }

  StopCompassSuccessCallback? $success;

  Future<StopCompassSuccessCallback?> get success async {
    return $success;
  }

  StopCompassOption({this.$$context$$});

  void setValues(
      {StopCompassCompleteCallback? complete,
      StopCompassFailCallback? fail,
      StopCompassSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StopDeviceMotionListeningOption {
  mpjs.JsObject? $$context$$;

  StopDeviceMotionListeningCompleteCallback? $complete;

  Future<StopDeviceMotionListeningCompleteCallback?> get complete async {
    return $complete;
  }

  StopDeviceMotionListeningFailCallback? $fail;

  Future<StopDeviceMotionListeningFailCallback?> get fail async {
    return $fail;
  }

  StopDeviceMotionListeningSuccessCallback? $success;

  Future<StopDeviceMotionListeningSuccessCallback?> get success async {
    return $success;
  }

  StopDeviceMotionListeningOption({this.$$context$$});

  void setValues(
      {StopDeviceMotionListeningCompleteCallback? complete,
      StopDeviceMotionListeningFailCallback? fail,
      StopDeviceMotionListeningSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StopDiscoveryOption {
  mpjs.JsObject? $$context$$;

  StopDiscoveryCompleteCallback? $complete;

  Future<StopDiscoveryCompleteCallback?> get complete async {
    return $complete;
  }

  StopDiscoveryFailCallback? $fail;

  Future<StopDiscoveryFailCallback?> get fail async {
    return $fail;
  }

  StopDiscoverySuccessCallback? $success;

  Future<StopDiscoverySuccessCallback?> get success async {
    return $success;
  }

  StopDiscoveryOption({this.$$context$$});

  void setValues(
      {StopDiscoveryCompleteCallback? complete,
      StopDiscoveryFailCallback? fail,
      StopDiscoverySuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => Nfcrwerror($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => Nfcrwerror($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => Nfcrwerror($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StopFaceDetectOption {
  mpjs.JsObject? $$context$$;

  StopFaceDetectCompleteCallback? $complete;

  Future<StopFaceDetectCompleteCallback?> get complete async {
    return $complete;
  }

  StopFaceDetectFailCallback? $fail;

  Future<StopFaceDetectFailCallback?> get fail async {
    return $fail;
  }

  StopFaceDetectSuccessCallback? $success;

  Future<StopFaceDetectSuccessCallback?> get success async {
    return $success;
  }

  StopFaceDetectOption({this.$$context$$});

  void setValues(
      {StopFaceDetectCompleteCallback? complete,
      StopFaceDetectFailCallback? fail,
      StopFaceDetectSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StopGyroscopeOption {
  mpjs.JsObject? $$context$$;

  StopGyroscopeCompleteCallback? $complete;

  Future<StopGyroscopeCompleteCallback?> get complete async {
    return $complete;
  }

  StopGyroscopeFailCallback? $fail;

  Future<StopGyroscopeFailCallback?> get fail async {
    return $fail;
  }

  StopGyroscopeSuccessCallback? $success;

  Future<StopGyroscopeSuccessCallback?> get success async {
    return $success;
  }

  StopGyroscopeOption({this.$$context$$});

  void setValues(
      {StopGyroscopeCompleteCallback? complete,
      StopGyroscopeFailCallback? fail,
      StopGyroscopeSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StopHCEOption {
  mpjs.JsObject? $$context$$;

  StopHCECompleteCallback? $complete;

  Future<StopHCECompleteCallback?> get complete async {
    return $complete;
  }

  StopHCEFailCallback? $fail;

  Future<StopHCEFailCallback?> get fail async {
    return $fail;
  }

  StopHCESuccessCallback? $success;

  Future<StopHCESuccessCallback?> get success async {
    return $success;
  }

  StopHCEOption({this.$$context$$});

  void setValues(
      {StopHCECompleteCallback? complete,
      StopHCEFailCallback? fail,
      StopHCESuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => NFCError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => NFCError($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => NFCError($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StopLocalServiceDiscoveryFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  StopLocalServiceDiscoveryFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class StopLocalServiceDiscoveryOption {
  mpjs.JsObject? $$context$$;

  StopLocalServiceDiscoveryCompleteCallback? $complete;

  Future<StopLocalServiceDiscoveryCompleteCallback?> get complete async {
    return $complete;
  }

  StopLocalServiceDiscoveryFailCallback? $fail;

  Future<StopLocalServiceDiscoveryFailCallback?> get fail async {
    return $fail;
  }

  StopLocalServiceDiscoverySuccessCallback? $success;

  Future<StopLocalServiceDiscoverySuccessCallback?> get success async {
    return $success;
  }

  StopLocalServiceDiscoveryOption({this.$$context$$});

  void setValues(
      {StopLocalServiceDiscoveryCompleteCallback? complete,
      StopLocalServiceDiscoveryFailCallback? fail,
      StopLocalServiceDiscoverySuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [
              (e) => StopLocalServiceDiscoveryFailCallbackResult($$context$$: e)
            ])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StopLocationUpdateOption {
  mpjs.JsObject? $$context$$;

  StopLocationUpdateCompleteCallback? $complete;

  Future<StopLocationUpdateCompleteCallback?> get complete async {
    return $complete;
  }

  StopLocationUpdateFailCallback? $fail;

  Future<StopLocationUpdateFailCallback?> get fail async {
    return $fail;
  }

  StopLocationUpdateSuccessCallback? $success;

  Future<StopLocationUpdateSuccessCallback?> get success async {
    return $success;
  }

  StopLocationUpdateOption({this.$$context$$});

  void setValues(
      {StopLocationUpdateCompleteCallback? complete,
      StopLocationUpdateFailCallback? fail,
      StopLocationUpdateSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StopOption {
  mpjs.JsObject? $$context$$;

  StopCompleteCallback? $complete;

  Future<StopCompleteCallback?> get complete async {
    return $complete;
  }

  StopFailCallback? $fail;

  Future<StopFailCallback?> get fail async {
    return $fail;
  }

  StopSuccessCallback? $success;

  Future<StopSuccessCallback?> get success async {
    return $success;
  }

  StopOption({this.$$context$$});

  void setValues(
      {StopCompleteCallback? complete,
      StopFailCallback? fail,
      StopSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StopPreviewOption {
  mpjs.JsObject? $$context$$;

  StopPreviewCompleteCallback? $complete;

  Future<StopPreviewCompleteCallback?> get complete async {
    return $complete;
  }

  StopPreviewFailCallback? $fail;

  Future<StopPreviewFailCallback?> get fail async {
    return $fail;
  }

  StopPreviewSuccessCallback? $success;

  Future<StopPreviewSuccessCallback?> get success async {
    return $success;
  }

  StopPreviewOption({this.$$context$$});

  void setValues(
      {StopPreviewCompleteCallback? complete,
      StopPreviewFailCallback? fail,
      StopPreviewSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StopPullDownRefreshOption {
  mpjs.JsObject? $$context$$;

  StopPullDownRefreshCompleteCallback? $complete;

  Future<StopPullDownRefreshCompleteCallback?> get complete async {
    return $complete;
  }

  StopPullDownRefreshFailCallback? $fail;

  Future<StopPullDownRefreshFailCallback?> get fail async {
    return $fail;
  }

  StopPullDownRefreshSuccessCallback? $success;

  Future<StopPullDownRefreshSuccessCallback?> get success async {
    return $success;
  }

  StopPullDownRefreshOption({this.$$context$$});

  void setValues(
      {StopPullDownRefreshCompleteCallback? complete,
      StopPullDownRefreshFailCallback? fail,
      StopPullDownRefreshSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StopRecordSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $tempThumbPath = "";

  Future<String> get tempThumbPath async {
    return await $$context$$?.getPropertyValue('tempThumbPath') ??
        $tempThumbPath;
  }

  String $tempVideoPath = "";

  Future<String> get tempVideoPath async {
    return await $$context$$?.getPropertyValue('tempVideoPath') ??
        $tempVideoPath;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  StopRecordSuccessCallbackResult({this.$$context$$});

  void setValues(
      {String? tempThumbPath, String? tempVideoPath, String? errMsg}) {
    if (tempThumbPath != null) $tempThumbPath = tempThumbPath;
    if (tempVideoPath != null) $tempVideoPath = tempVideoPath;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {
      'tempThumbPath': $tempThumbPath,
      'tempVideoPath': $tempVideoPath,
      'errMsg': $errMsg
    }..removeWhere((key, value) => value == null);
  }
}

class StopVoiceOption {
  mpjs.JsObject? $$context$$;

  StopVoiceCompleteCallback? $complete;

  Future<StopVoiceCompleteCallback?> get complete async {
    return $complete;
  }

  StopVoiceFailCallback? $fail;

  Future<StopVoiceFailCallback?> get fail async {
    return $fail;
  }

  StopVoiceSuccessCallback? $success;

  Future<StopVoiceSuccessCallback?> get success async {
    return $success;
  }

  StopVoiceOption({this.$$context$$});

  void setValues(
      {StopVoiceCompleteCallback? complete,
      StopVoiceFailCallback? fail,
      StopVoiceSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class StopWifiOption {
  mpjs.JsObject? $$context$$;

  StopWifiCompleteCallback? $complete;

  Future<StopWifiCompleteCallback?> get complete async {
    return $complete;
  }

  StopWifiFailCallback? $fail;

  Future<StopWifiFailCallback?> get fail async {
    return $fail;
  }

  StopWifiSuccessCallback? $success;

  Future<StopWifiSuccessCallback?> get success async {
    return $success;
  }

  StopWifiOption({this.$$context$$});

  void setValues(
      {StopWifiCompleteCallback? complete,
      StopWifiFailCallback? fail,
      StopWifiSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => WifiError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => WifiError($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => WifiError($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SubscribeVoIPVideoMembersOption {
  mpjs.JsObject? $$context$$;

  List<String> $openIdList = <String>[];

  Future<List<String>> get openIdList async {
    return await $$context$$?.getPropertyValue('openIdList') ?? $openIdList;
  }

  SubscribeVoIPVideoMembersCompleteCallback? $complete;

  Future<SubscribeVoIPVideoMembersCompleteCallback?> get complete async {
    return $complete;
  }

  SubscribeVoIPVideoMembersFailCallback? $fail;

  Future<SubscribeVoIPVideoMembersFailCallback?> get fail async {
    return $fail;
  }

  SubscribeVoIPVideoMembersSuccessCallback? $success;

  Future<SubscribeVoIPVideoMembersSuccessCallback?> get success async {
    return $success;
  }

  SubscribeVoIPVideoMembersOption({this.$$context$$});

  void setValues(
      {List<String>? openIdList,
      SubscribeVoIPVideoMembersCompleteCallback? complete,
      SubscribeVoIPVideoMembersFailCallback? fail,
      SubscribeVoIPVideoMembersSuccessCallback? success}) {
    if (openIdList != null) $openIdList = openIdList;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'openIdList': $openIdList,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SubscriptionsSetting {
  mpjs.JsObject? $$context$$;

  bool $mainSwitch = false;

  Future<bool> get mainSwitch async {
    return await $$context$$?.getPropertyValue('mainSwitch') ?? $mainSwitch;
  }

  IAnyObject? $itemSettings;

  Future<IAnyObject?> get itemSettings async {
    return IAnyObject($$context$$: $$context$$?.getProperty('itemSettings'));
  }

  SubscriptionsSetting({this.$$context$$});

  void setValues({bool? mainSwitch, IAnyObject? itemSettings}) {
    if (mainSwitch != null) $mainSwitch = mainSwitch;
    if (itemSettings != null) $itemSettings = itemSettings;
  }

  Map toJson() {
    return {'mainSwitch': $mainSwitch, 'itemSettings': $itemSettings}
      ..removeWhere((key, value) => value == null);
  }
}

class SwitchCameraOption {
  mpjs.JsObject? $$context$$;

  SwitchCameraCompleteCallback? $complete;

  Future<SwitchCameraCompleteCallback?> get complete async {
    return $complete;
  }

  SwitchCameraFailCallback? $fail;

  Future<SwitchCameraFailCallback?> get fail async {
    return $fail;
  }

  SwitchCameraSuccessCallback? $success;

  Future<SwitchCameraSuccessCallback?> get success async {
    return $success;
  }

  SwitchCameraOption({this.$$context$$});

  void setValues(
      {SwitchCameraCompleteCallback? complete,
      SwitchCameraFailCallback? fail,
      SwitchCameraSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SwitchTabOption {
  mpjs.JsObject? $$context$$;

  String $url = "";

  Future<String> get url async {
    return await $$context$$?.getPropertyValue('url') ?? $url;
  }

  SwitchTabCompleteCallback? $complete;

  Future<SwitchTabCompleteCallback?> get complete async {
    return $complete;
  }

  SwitchTabFailCallback? $fail;

  Future<SwitchTabFailCallback?> get fail async {
    return $fail;
  }

  SwitchTabSuccessCallback? $success;

  Future<SwitchTabSuccessCallback?> get success async {
    return $success;
  }

  SwitchTabOption({this.$$context$$});

  void setValues(
      {String? url,
      SwitchTabCompleteCallback? complete,
      SwitchTabFailCallback? fail,
      SwitchTabSuccessCallback? success}) {
    if (url != null) $url = url;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'url': $url,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class SystemInfo {
  mpjs.JsObject? $$context$$;

  String $SDKVersion = "";

  Future<String> get SDKVersion async {
    return await $$context$$?.getPropertyValue('SDKVersion') ?? $SDKVersion;
  }

  bool $albumAuthorized = false;

  Future<bool> get albumAuthorized async {
    return await $$context$$?.getPropertyValue('albumAuthorized') ??
        $albumAuthorized;
  }

  num $benchmarkLevel = 0;

  Future<num> get benchmarkLevel async {
    return await $$context$$?.getPropertyValue('benchmarkLevel') ??
        $benchmarkLevel;
  }

  bool $bluetoothEnabled = false;

  Future<bool> get bluetoothEnabled async {
    return await $$context$$?.getPropertyValue('bluetoothEnabled') ??
        $bluetoothEnabled;
  }

  String $brand = "";

  Future<String> get brand async {
    return await $$context$$?.getPropertyValue('brand') ?? $brand;
  }

  bool $cameraAuthorized = false;

  Future<bool> get cameraAuthorized async {
    return await $$context$$?.getPropertyValue('cameraAuthorized') ??
        $cameraAuthorized;
  }

  dynamic $deviceOrientation;

  Future<dynamic> get deviceOrientation async {
    return await $$context$$?.getPropertyValue('deviceOrientation') ??
        $deviceOrientation;
  }

  bool $enableDebug = false;

  Future<bool> get enableDebug async {
    return await $$context$$?.getPropertyValue('enableDebug') ?? $enableDebug;
  }

  num $fontSizeSetting = 0;

  Future<num> get fontSizeSetting async {
    return await $$context$$?.getPropertyValue('fontSizeSetting') ??
        $fontSizeSetting;
  }

  SystemInfoHost $host = SystemInfoHost();

  Future<SystemInfoHost> get host async {
    return SystemInfoHost($$context$$: $$context$$?.getProperty('host'));
  }

  String $language = "";

  Future<String> get language async {
    return await $$context$$?.getPropertyValue('language') ?? $language;
  }

  bool $locationAuthorized = false;

  Future<bool> get locationAuthorized async {
    return await $$context$$?.getPropertyValue('locationAuthorized') ??
        $locationAuthorized;
  }

  bool $locationEnabled = false;

  Future<bool> get locationEnabled async {
    return await $$context$$?.getPropertyValue('locationEnabled') ??
        $locationEnabled;
  }

  bool $locationReducedAccuracy = false;

  Future<bool> get locationReducedAccuracy async {
    return await $$context$$?.getPropertyValue('locationReducedAccuracy') ??
        $locationReducedAccuracy;
  }

  bool $microphoneAuthorized = false;

  Future<bool> get microphoneAuthorized async {
    return await $$context$$?.getPropertyValue('microphoneAuthorized') ??
        $microphoneAuthorized;
  }

  String $model = "";

  Future<String> get model async {
    return await $$context$$?.getPropertyValue('model') ?? $model;
  }

  bool $notificationAlertAuthorized = false;

  Future<bool> get notificationAlertAuthorized async {
    return await $$context$$?.getPropertyValue('notificationAlertAuthorized') ??
        $notificationAlertAuthorized;
  }

  bool $notificationAuthorized = false;

  Future<bool> get notificationAuthorized async {
    return await $$context$$?.getPropertyValue('notificationAuthorized') ??
        $notificationAuthorized;
  }

  bool $notificationBadgeAuthorized = false;

  Future<bool> get notificationBadgeAuthorized async {
    return await $$context$$?.getPropertyValue('notificationBadgeAuthorized') ??
        $notificationBadgeAuthorized;
  }

  bool $notificationSoundAuthorized = false;

  Future<bool> get notificationSoundAuthorized async {
    return await $$context$$?.getPropertyValue('notificationSoundAuthorized') ??
        $notificationSoundAuthorized;
  }

  bool $phoneCalendarAuthorized = false;

  Future<bool> get phoneCalendarAuthorized async {
    return await $$context$$?.getPropertyValue('phoneCalendarAuthorized') ??
        $phoneCalendarAuthorized;
  }

  num $pixelRatio = 0;

  Future<num> get pixelRatio async {
    return await $$context$$?.getPropertyValue('pixelRatio') ?? $pixelRatio;
  }

  dynamic $platform;

  Future<dynamic> get platform async {
    return await $$context$$?.getPropertyValue('platform') ?? $platform;
  }

  SafeArea $safeArea = SafeArea();

  Future<SafeArea> get safeArea async {
    return SafeArea($$context$$: $$context$$?.getProperty('safeArea'));
  }

  num $screenHeight = 0;

  Future<num> get screenHeight async {
    return await $$context$$?.getPropertyValue('screenHeight') ?? $screenHeight;
  }

  num $screenWidth = 0;

  Future<num> get screenWidth async {
    return await $$context$$?.getPropertyValue('screenWidth') ?? $screenWidth;
  }

  num $statusBarHeight = 0;

  Future<num> get statusBarHeight async {
    return await $$context$$?.getPropertyValue('statusBarHeight') ??
        $statusBarHeight;
  }

  String $system = "";

  Future<String> get system async {
    return await $$context$$?.getPropertyValue('system') ?? $system;
  }

  String $version = "";

  Future<String> get version async {
    return await $$context$$?.getPropertyValue('version') ?? $version;
  }

  bool $wifiEnabled = false;

  Future<bool> get wifiEnabled async {
    return await $$context$$?.getPropertyValue('wifiEnabled') ?? $wifiEnabled;
  }

  num $windowHeight = 0;

  Future<num> get windowHeight async {
    return await $$context$$?.getPropertyValue('windowHeight') ?? $windowHeight;
  }

  num $windowWidth = 0;

  Future<num> get windowWidth async {
    return await $$context$$?.getPropertyValue('windowWidth') ?? $windowWidth;
  }

  dynamic $theme;

  Future<dynamic> get theme async {
    return await $$context$$?.getPropertyValue('theme') ?? $theme;
  }

  SystemInfo({this.$$context$$});

  void setValues(
      {String? SDKVersion,
      bool? albumAuthorized,
      num? benchmarkLevel,
      bool? bluetoothEnabled,
      String? brand,
      bool? cameraAuthorized,
      dynamic deviceOrientation,
      bool? enableDebug,
      num? fontSizeSetting,
      SystemInfoHost? host,
      String? language,
      bool? locationAuthorized,
      bool? locationEnabled,
      bool? locationReducedAccuracy,
      bool? microphoneAuthorized,
      String? model,
      bool? notificationAlertAuthorized,
      bool? notificationAuthorized,
      bool? notificationBadgeAuthorized,
      bool? notificationSoundAuthorized,
      bool? phoneCalendarAuthorized,
      num? pixelRatio,
      dynamic platform,
      SafeArea? safeArea,
      num? screenHeight,
      num? screenWidth,
      num? statusBarHeight,
      String? system,
      String? version,
      bool? wifiEnabled,
      num? windowHeight,
      num? windowWidth,
      dynamic theme}) {
    if (SDKVersion != null) $SDKVersion = SDKVersion;
    if (albumAuthorized != null) $albumAuthorized = albumAuthorized;
    if (benchmarkLevel != null) $benchmarkLevel = benchmarkLevel;
    if (bluetoothEnabled != null) $bluetoothEnabled = bluetoothEnabled;
    if (brand != null) $brand = brand;
    if (cameraAuthorized != null) $cameraAuthorized = cameraAuthorized;
    if (deviceOrientation != null) $deviceOrientation = deviceOrientation;
    if (enableDebug != null) $enableDebug = enableDebug;
    if (fontSizeSetting != null) $fontSizeSetting = fontSizeSetting;
    if (host != null) $host = host;
    if (language != null) $language = language;
    if (locationAuthorized != null) $locationAuthorized = locationAuthorized;
    if (locationEnabled != null) $locationEnabled = locationEnabled;
    if (locationReducedAccuracy != null)
      $locationReducedAccuracy = locationReducedAccuracy;
    if (microphoneAuthorized != null)
      $microphoneAuthorized = microphoneAuthorized;
    if (model != null) $model = model;
    if (notificationAlertAuthorized != null)
      $notificationAlertAuthorized = notificationAlertAuthorized;
    if (notificationAuthorized != null)
      $notificationAuthorized = notificationAuthorized;
    if (notificationBadgeAuthorized != null)
      $notificationBadgeAuthorized = notificationBadgeAuthorized;
    if (notificationSoundAuthorized != null)
      $notificationSoundAuthorized = notificationSoundAuthorized;
    if (phoneCalendarAuthorized != null)
      $phoneCalendarAuthorized = phoneCalendarAuthorized;
    if (pixelRatio != null) $pixelRatio = pixelRatio;
    if (platform != null) $platform = platform;
    if (safeArea != null) $safeArea = safeArea;
    if (screenHeight != null) $screenHeight = screenHeight;
    if (screenWidth != null) $screenWidth = screenWidth;
    if (statusBarHeight != null) $statusBarHeight = statusBarHeight;
    if (system != null) $system = system;
    if (version != null) $version = version;
    if (wifiEnabled != null) $wifiEnabled = wifiEnabled;
    if (windowHeight != null) $windowHeight = windowHeight;
    if (windowWidth != null) $windowWidth = windowWidth;
    if (theme != null) $theme = theme;
  }

  Map toJson() {
    return {
      'SDKVersion': $SDKVersion,
      'albumAuthorized': $albumAuthorized,
      'benchmarkLevel': $benchmarkLevel,
      'bluetoothEnabled': $bluetoothEnabled,
      'brand': $brand,
      'cameraAuthorized': $cameraAuthorized,
      'deviceOrientation': $deviceOrientation,
      'enableDebug': $enableDebug,
      'fontSizeSetting': $fontSizeSetting,
      'host': $host,
      'language': $language,
      'locationAuthorized': $locationAuthorized,
      'locationEnabled': $locationEnabled,
      'locationReducedAccuracy': $locationReducedAccuracy,
      'microphoneAuthorized': $microphoneAuthorized,
      'model': $model,
      'notificationAlertAuthorized': $notificationAlertAuthorized,
      'notificationAuthorized': $notificationAuthorized,
      'notificationBadgeAuthorized': $notificationBadgeAuthorized,
      'notificationSoundAuthorized': $notificationSoundAuthorized,
      'phoneCalendarAuthorized': $phoneCalendarAuthorized,
      'pixelRatio': $pixelRatio,
      'platform': $platform,
      'safeArea': $safeArea,
      'screenHeight': $screenHeight,
      'screenWidth': $screenWidth,
      'statusBarHeight': $statusBarHeight,
      'system': $system,
      'version': $version,
      'wifiEnabled': $wifiEnabled,
      'windowHeight': $windowHeight,
      'windowWidth': $windowWidth,
      'theme': $theme
    }..removeWhere((key, value) => value == null);
  }
}

class SystemInfoHost {
  mpjs.JsObject? $$context$$;

  String $appId = "";

  Future<String> get appId async {
    return await $$context$$?.getPropertyValue('appId') ?? $appId;
  }

  SystemInfoHost({this.$$context$$});

  void setValues({String? appId}) {
    if (appId != null) $appId = appId;
  }

  Map toJson() {
    return {'appId': $appId}..removeWhere((key, value) => value == null);
  }
}

class SystemSetting {
  mpjs.JsObject? $$context$$;

  bool $bluetoothEnabled = false;

  Future<bool> get bluetoothEnabled async {
    return await $$context$$?.getPropertyValue('bluetoothEnabled') ??
        $bluetoothEnabled;
  }

  dynamic $deviceOrientation;

  Future<dynamic> get deviceOrientation async {
    return await $$context$$?.getPropertyValue('deviceOrientation') ??
        $deviceOrientation;
  }

  bool $locationEnabled = false;

  Future<bool> get locationEnabled async {
    return await $$context$$?.getPropertyValue('locationEnabled') ??
        $locationEnabled;
  }

  bool $wifiEnabled = false;

  Future<bool> get wifiEnabled async {
    return await $$context$$?.getPropertyValue('wifiEnabled') ?? $wifiEnabled;
  }

  SystemSetting({this.$$context$$});

  void setValues(
      {bool? bluetoothEnabled,
      dynamic deviceOrientation,
      bool? locationEnabled,
      bool? wifiEnabled}) {
    if (bluetoothEnabled != null) $bluetoothEnabled = bluetoothEnabled;
    if (deviceOrientation != null) $deviceOrientation = deviceOrientation;
    if (locationEnabled != null) $locationEnabled = locationEnabled;
    if (wifiEnabled != null) $wifiEnabled = wifiEnabled;
  }

  Map toJson() {
    return {
      'bluetoothEnabled': $bluetoothEnabled,
      'deviceOrientation': $deviceOrientation,
      'locationEnabled': $locationEnabled,
      'wifiEnabled': $wifiEnabled
    }..removeWhere((key, value) => value == null);
  }
}

class TCPSocketConnectOption {
  mpjs.JsObject? $$context$$;

  String $address = "";

  Future<String> get address async {
    return await $$context$$?.getPropertyValue('address') ?? $address;
  }

  num $port = 0;

  Future<num> get port async {
    return await $$context$$?.getPropertyValue('port') ?? $port;
  }

  num? $timeout;

  Future<num?> get timeout async {
    return await $$context$$?.getPropertyValue('timeout') ?? $timeout;
  }

  TCPSocketConnectOption({this.$$context$$});

  void setValues({String? address, num? port, num? timeout}) {
    if (address != null) $address = address;
    if (port != null) $port = port;
    if (timeout != null) $timeout = timeout;
  }

  Map toJson() {
    return {'address': $address, 'port': $port, 'timeout': $timeout}
      ..removeWhere((key, value) => value == null);
  }
}

class TCPSocketOnMessageListenerResult {
  mpjs.JsObject? $$context$$;

  LocalInfo $localInfo = LocalInfo();

  Future<LocalInfo> get localInfo async {
    return LocalInfo($$context$$: $$context$$?.getProperty('localInfo'));
  }

  ArrayBuffer $message = ArrayBuffer();

  Future<ArrayBuffer> get message async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('message'));
  }

  RemoteInfo $remoteInfo = RemoteInfo();

  Future<RemoteInfo> get remoteInfo async {
    return RemoteInfo($$context$$: $$context$$?.getProperty('remoteInfo'));
  }

  TCPSocketOnMessageListenerResult({this.$$context$$});

  void setValues(
      {LocalInfo? localInfo, ArrayBuffer? message, RemoteInfo? remoteInfo}) {
    if (localInfo != null) $localInfo = localInfo;
    if (message != null) $message = message;
    if (remoteInfo != null) $remoteInfo = remoteInfo;
  }

  Map toJson() {
    return {
      'localInfo': $localInfo,
      'message': $message,
      'remoteInfo': $remoteInfo
    }..removeWhere((key, value) => value == null);
  }
}

class TakePhotoOption {
  mpjs.JsObject? $$context$$;

  TakePhotoCompleteCallback? $complete;

  Future<TakePhotoCompleteCallback?> get complete async {
    return $complete;
  }

  TakePhotoFailCallback? $fail;

  Future<TakePhotoFailCallback?> get fail async {
    return $fail;
  }

  dynamic $quality;

  Future<dynamic> get quality async {
    return await $$context$$?.getPropertyValue('quality') ?? $quality;
  }

  bool? $selfieMirror;

  Future<bool?> get selfieMirror async {
    return await $$context$$?.getPropertyValue('selfieMirror') ?? $selfieMirror;
  }

  TakePhotoSuccessCallback? $success;

  Future<TakePhotoSuccessCallback?> get success async {
    return $success;
  }

  TakePhotoOption({this.$$context$$});

  void setValues(
      {TakePhotoCompleteCallback? complete,
      TakePhotoFailCallback? fail,
      dynamic quality,
      bool? selfieMirror,
      TakePhotoSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (quality != null) $quality = quality;
    if (selfieMirror != null) $selfieMirror = selfieMirror;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'quality': $quality,
      'selfieMirror': $selfieMirror,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => TakePhotoSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class TakePhotoSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $tempImagePath = "";

  Future<String> get tempImagePath async {
    return await $$context$$?.getPropertyValue('tempImagePath') ??
        $tempImagePath;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  TakePhotoSuccessCallbackResult({this.$$context$$});

  void setValues({String? tempImagePath, String? errMsg}) {
    if (tempImagePath != null) $tempImagePath = tempImagePath;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'tempImagePath': $tempImagePath, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class TechType {
  mpjs.JsObject? $$context$$;

  String $isoDep = "";

  Future<String> get isoDep async {
    return await $$context$$?.getPropertyValue('isoDep') ?? $isoDep;
  }

  String $mifareClassic = "";

  Future<String> get mifareClassic async {
    return await $$context$$?.getPropertyValue('mifareClassic') ??
        $mifareClassic;
  }

  String $mifareUltralight = "";

  Future<String> get mifareUltralight async {
    return await $$context$$?.getPropertyValue('mifareUltralight') ??
        $mifareUltralight;
  }

  String $ndef = "";

  Future<String> get ndef async {
    return await $$context$$?.getPropertyValue('ndef') ?? $ndef;
  }

  String $nfcA = "";

  Future<String> get nfcA async {
    return await $$context$$?.getPropertyValue('nfcA') ?? $nfcA;
  }

  String $nfcB = "";

  Future<String> get nfcB async {
    return await $$context$$?.getPropertyValue('nfcB') ?? $nfcB;
  }

  String $nfcF = "";

  Future<String> get nfcF async {
    return await $$context$$?.getPropertyValue('nfcF') ?? $nfcF;
  }

  String $nfcV = "";

  Future<String> get nfcV async {
    return await $$context$$?.getPropertyValue('nfcV') ?? $nfcV;
  }

  TechType({this.$$context$$});

  void setValues(
      {String? isoDep,
      String? mifareClassic,
      String? mifareUltralight,
      String? ndef,
      String? nfcA,
      String? nfcB,
      String? nfcF,
      String? nfcV}) {
    if (isoDep != null) $isoDep = isoDep;
    if (mifareClassic != null) $mifareClassic = mifareClassic;
    if (mifareUltralight != null) $mifareUltralight = mifareUltralight;
    if (ndef != null) $ndef = ndef;
    if (nfcA != null) $nfcA = nfcA;
    if (nfcB != null) $nfcB = nfcB;
    if (nfcF != null) $nfcF = nfcF;
    if (nfcV != null) $nfcV = nfcV;
  }

  Map toJson() {
    return {
      'isoDep': $isoDep,
      'mifareClassic': $mifareClassic,
      'mifareUltralight': $mifareUltralight,
      'ndef': $ndef,
      'nfcA': $nfcA,
      'nfcB': $nfcB,
      'nfcF': $nfcF,
      'nfcV': $nfcV
    }..removeWhere((key, value) => value == null);
  }
}

class TextMetrics {
  mpjs.JsObject? $$context$$;

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  TextMetrics({this.$$context$$});

  void setValues({num? width}) {
    if (width != null) $width = width;
  }

  Map toJson() {
    return {'width': $width}..removeWhere((key, value) => value == null);
  }
}

class TimingOption {
  mpjs.JsObject? $$context$$;

  num? $duration;

  Future<num?> get duration async {
    return await $$context$$?.getPropertyValue('duration') ?? $duration;
  }

  String? $easing;

  Future<String?> get easing async {
    return await $$context$$?.getPropertyValue('easing') ?? $easing;
  }

  TimingOption({this.$$context$$});

  void setValues({num? duration, String? easing}) {
    if (duration != null) $duration = duration;
    if (easing != null) $easing = easing;
  }

  Map toJson() {
    return {'duration': $duration, 'easing': $easing}
      ..removeWhere((key, value) => value == null);
  }
}

class ToScreenLocationOption {
  mpjs.JsObject? $$context$$;

  num $latitude = 0;

  Future<num> get latitude async {
    return await $$context$$?.getPropertyValue('latitude') ?? $latitude;
  }

  num $longitude = 0;

  Future<num> get longitude async {
    return await $$context$$?.getPropertyValue('longitude') ?? $longitude;
  }

  ToScreenLocationCompleteCallback? $complete;

  Future<ToScreenLocationCompleteCallback?> get complete async {
    return $complete;
  }

  ToScreenLocationFailCallback? $fail;

  Future<ToScreenLocationFailCallback?> get fail async {
    return $fail;
  }

  ToScreenLocationSuccessCallback? $success;

  Future<ToScreenLocationSuccessCallback?> get success async {
    return $success;
  }

  ToScreenLocationOption({this.$$context$$});

  void setValues(
      {num? latitude,
      num? longitude,
      ToScreenLocationCompleteCallback? complete,
      ToScreenLocationFailCallback? fail,
      ToScreenLocationSuccessCallback? success}) {
    if (latitude != null) $latitude = latitude;
    if (longitude != null) $longitude = longitude;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'latitude': $latitude,
      'longitude': $longitude,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => ToScreenLocationSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class ToScreenLocationSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  num $x = 0;

  Future<num> get x async {
    return await $$context$$?.getPropertyValue('x') ?? $x;
  }

  num $y = 0;

  Future<num> get y async {
    return await $$context$$?.getPropertyValue('y') ?? $y;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  ToScreenLocationSuccessCallbackResult({this.$$context$$});

  void setValues({num? x, num? y, String? errMsg}) {
    if (x != null) $x = x;
    if (y != null) $y = y;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'x': $x, 'y': $y, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class ToggleTorchOption {
  mpjs.JsObject? $$context$$;

  ToggleTorchCompleteCallback? $complete;

  Future<ToggleTorchCompleteCallback?> get complete async {
    return $complete;
  }

  ToggleTorchFailCallback? $fail;

  Future<ToggleTorchFailCallback?> get fail async {
    return $fail;
  }

  ToggleTorchSuccessCallback? $success;

  Future<ToggleTorchSuccessCallback?> get success async {
    return $success;
  }

  ToggleTorchOption({this.$$context$$});

  void setValues(
      {ToggleTorchCompleteCallback? complete,
      ToggleTorchFailCallback? fail,
      ToggleTorchSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class Track {
  mpjs.JsObject? $$context$$;

  PlaneTrack $plane = PlaneTrack();

  Future<PlaneTrack> get plane async {
    return PlaneTrack($$context$$: $$context$$?.getProperty('plane'));
  }

  OCRTrack? $OCR;

  Future<OCRTrack?> get OCR async {
    return OCRTrack($$context$$: $$context$$?.getProperty('OCR'));
  }

  bool? $OSD;

  Future<bool?> get OSD async {
    return await $$context$$?.getPropertyValue('OSD') ?? $OSD;
  }

  BodyTrack? $body;

  Future<BodyTrack?> get body async {
    return BodyTrack($$context$$: $$context$$?.getProperty('body'));
  }

  FaceTrack? $face;

  Future<FaceTrack?> get face async {
    return FaceTrack($$context$$: $$context$$?.getProperty('face'));
  }

  HandTrack? $hand;

  Future<HandTrack?> get hand async {
    return HandTrack($$context$$: $$context$$?.getProperty('hand'));
  }

  bool? $marker;

  Future<bool?> get marker async {
    return await $$context$$?.getPropertyValue('marker') ?? $marker;
  }

  bool? $threeDof;

  Future<bool?> get threeDof async {
    return await $$context$$?.getPropertyValue('threeDof') ?? $threeDof;
  }

  Track({this.$$context$$});

  void setValues(
      {PlaneTrack? plane,
      OCRTrack? OCR,
      bool? OSD,
      BodyTrack? body,
      FaceTrack? face,
      HandTrack? hand,
      bool? marker,
      bool? threeDof}) {
    if (plane != null) $plane = plane;
    if (OCR != null) $OCR = OCR;
    if (OSD != null) $OSD = OSD;
    if (body != null) $body = body;
    if (face != null) $face = face;
    if (hand != null) $hand = hand;
    if (marker != null) $marker = marker;
    if (threeDof != null) $threeDof = threeDof;
  }

  Map toJson() {
    return {
      'plane': $plane,
      'OCR': $OCR,
      'OSD': $OSD,
      'body': $body,
      'face': $face,
      'hand': $hand,
      'marker': $marker,
      'threeDof': $threeDof
    }..removeWhere((key, value) => value == null);
  }
}

class TransceiveOption {
  mpjs.JsObject? $$context$$;

  ArrayBuffer $data = ArrayBuffer();

  Future<ArrayBuffer> get data async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('data'));
  }

  TransceiveCompleteCallback? $complete;

  Future<TransceiveCompleteCallback?> get complete async {
    return $complete;
  }

  TransceiveFailCallback? $fail;

  Future<TransceiveFailCallback?> get fail async {
    return $fail;
  }

  TransceiveSuccessCallback? $success;

  Future<TransceiveSuccessCallback?> get success async {
    return $success;
  }

  TransceiveOption({this.$$context$$});

  void setValues(
      {ArrayBuffer? data,
      TransceiveCompleteCallback? complete,
      TransceiveFailCallback? fail,
      TransceiveSuccessCallback? success}) {
    if (data != null) $data = data;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'data': $data,
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => Nfcrwerror($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => Nfcrwerror($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => TransceiveSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class TransceiveSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  ArrayBuffer $data = ArrayBuffer();

  Future<ArrayBuffer> get data async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('data'));
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  TransceiveSuccessCallbackResult({this.$$context$$});

  void setValues({ArrayBuffer? data, String? errMsg}) {
    if (data != null) $data = data;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'data': $data, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class TranslateMarkerOption {
  mpjs.JsObject? $$context$$;

  bool $autoRotate = false;

  Future<bool> get autoRotate async {
    return await $$context$$?.getPropertyValue('autoRotate') ?? $autoRotate;
  }

  DestinationOption $destination = DestinationOption();

  Future<DestinationOption> get destination async {
    return DestinationOption(
        $$context$$: $$context$$?.getProperty('destination'));
  }

  num $markerId = 0;

  Future<num> get markerId async {
    return await $$context$$?.getPropertyValue('markerId') ?? $markerId;
  }

  num $rotate = 0;

  Future<num> get rotate async {
    return await $$context$$?.getPropertyValue('rotate') ?? $rotate;
  }

  dynamic $animationEnd;

  Future<dynamic> get animationEnd async {
    return await $$context$$?.getPropertyValue('animationEnd') ?? $animationEnd;
  }

  TranslateMarkerCompleteCallback? $complete;

  Future<TranslateMarkerCompleteCallback?> get complete async {
    return $complete;
  }

  num? $duration;

  Future<num?> get duration async {
    return await $$context$$?.getPropertyValue('duration') ?? $duration;
  }

  TranslateMarkerFailCallback? $fail;

  Future<TranslateMarkerFailCallback?> get fail async {
    return $fail;
  }

  bool? $moveWithRotate;

  Future<bool?> get moveWithRotate async {
    return await $$context$$?.getPropertyValue('moveWithRotate') ??
        $moveWithRotate;
  }

  TranslateMarkerSuccessCallback? $success;

  Future<TranslateMarkerSuccessCallback?> get success async {
    return $success;
  }

  TranslateMarkerOption({this.$$context$$});

  void setValues(
      {bool? autoRotate,
      DestinationOption? destination,
      num? markerId,
      num? rotate,
      dynamic animationEnd,
      TranslateMarkerCompleteCallback? complete,
      num? duration,
      TranslateMarkerFailCallback? fail,
      bool? moveWithRotate,
      TranslateMarkerSuccessCallback? success}) {
    if (autoRotate != null) $autoRotate = autoRotate;
    if (destination != null) $destination = destination;
    if (markerId != null) $markerId = markerId;
    if (rotate != null) $rotate = rotate;
    if (animationEnd != null) $animationEnd = animationEnd;
    if (complete != null) $complete = complete;
    if (duration != null) $duration = duration;
    if (fail != null) $fail = fail;
    if (moveWithRotate != null) $moveWithRotate = moveWithRotate;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'autoRotate': $autoRotate,
      'destination': $destination,
      'markerId': $markerId,
      'rotate': $rotate,
      'animationEnd': $animationEnd != null
          ? mpjs.JsFunction($animationEnd!, [null])
          : null,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'duration': $duration,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'moveWithRotate': $moveWithRotate,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class TruncateFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  TruncateFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class TruncateOption {
  mpjs.JsObject? $$context$$;

  String $filePath = "";

  Future<String> get filePath async {
    return await $$context$$?.getPropertyValue('filePath') ?? $filePath;
  }

  TruncateCompleteCallback? $complete;

  Future<TruncateCompleteCallback?> get complete async {
    return $complete;
  }

  TruncateFailCallback? $fail;

  Future<TruncateFailCallback?> get fail async {
    return $fail;
  }

  num? $length;

  Future<num?> get length async {
    return await $$context$$?.getPropertyValue('length') ?? $length;
  }

  TruncateSuccessCallback? $success;

  Future<TruncateSuccessCallback?> get success async {
    return $success;
  }

  TruncateOption({this.$$context$$});

  void setValues(
      {String? filePath,
      TruncateCompleteCallback? complete,
      TruncateFailCallback? fail,
      num? length,
      TruncateSuccessCallback? success}) {
    if (filePath != null) $filePath = filePath;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (length != null) $length = length;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'filePath': $filePath,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => TruncateFailCallbackResult($$context$$: e)])
          : null,
      'length': $length,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class TruncateSyncOption {
  mpjs.JsObject? $$context$$;

  String $filePath = "";

  Future<String> get filePath async {
    return await $$context$$?.getPropertyValue('filePath') ?? $filePath;
  }

  num? $length;

  Future<num?> get length async {
    return await $$context$$?.getPropertyValue('length') ?? $length;
  }

  TruncateSyncOption({this.$$context$$});

  void setValues({String? filePath, num? length}) {
    if (filePath != null) $filePath = filePath;
    if (length != null) $length = length;
  }

  Map toJson() {
    return {'filePath': $filePath, 'length': $length}
      ..removeWhere((key, value) => value == null);
  }
}

class UDPSocketConnectOption {
  mpjs.JsObject? $$context$$;

  String $address = "";

  Future<String> get address async {
    return await $$context$$?.getPropertyValue('address') ?? $address;
  }

  num $port = 0;

  Future<num> get port async {
    return await $$context$$?.getPropertyValue('port') ?? $port;
  }

  UDPSocketConnectOption({this.$$context$$});

  void setValues({String? address, num? port}) {
    if (address != null) $address = address;
    if (port != null) $port = port;
  }

  Map toJson() {
    return {'address': $address, 'port': $port}
      ..removeWhere((key, value) => value == null);
  }
}

class UDPSocketOnMessageListenerResult {
  mpjs.JsObject? $$context$$;

  LocalInfo $localInfo = LocalInfo();

  Future<LocalInfo> get localInfo async {
    return LocalInfo($$context$$: $$context$$?.getProperty('localInfo'));
  }

  ArrayBuffer $message = ArrayBuffer();

  Future<ArrayBuffer> get message async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('message'));
  }

  RemoteInfo $remoteInfo = RemoteInfo();

  Future<RemoteInfo> get remoteInfo async {
    return RemoteInfo($$context$$: $$context$$?.getProperty('remoteInfo'));
  }

  UDPSocketOnMessageListenerResult({this.$$context$$});

  void setValues(
      {LocalInfo? localInfo, ArrayBuffer? message, RemoteInfo? remoteInfo}) {
    if (localInfo != null) $localInfo = localInfo;
    if (message != null) $message = message;
    if (remoteInfo != null) $remoteInfo = remoteInfo;
  }

  Map toJson() {
    return {
      'localInfo': $localInfo,
      'message': $message,
      'remoteInfo': $remoteInfo
    }..removeWhere((key, value) => value == null);
  }
}

class UDPSocketSendOption {
  mpjs.JsObject? $$context$$;

  String $address = "";

  Future<String> get address async {
    return await $$context$$?.getPropertyValue('address') ?? $address;
  }

  dynamic $message;

  Future<dynamic> get message async {
    return await $$context$$?.getPropertyValue('message') ?? $message;
  }

  num $port = 0;

  Future<num> get port async {
    return await $$context$$?.getPropertyValue('port') ?? $port;
  }

  num? $length;

  Future<num?> get length async {
    return await $$context$$?.getPropertyValue('length') ?? $length;
  }

  num? $offset;

  Future<num?> get offset async {
    return await $$context$$?.getPropertyValue('offset') ?? $offset;
  }

  bool? $setBroadcast;

  Future<bool?> get setBroadcast async {
    return await $$context$$?.getPropertyValue('setBroadcast') ?? $setBroadcast;
  }

  UDPSocketSendOption({this.$$context$$});

  void setValues(
      {String? address,
      dynamic message,
      num? port,
      num? length,
      num? offset,
      bool? setBroadcast}) {
    if (address != null) $address = address;
    if (message != null) $message = message;
    if (port != null) $port = port;
    if (length != null) $length = length;
    if (offset != null) $offset = offset;
    if (setBroadcast != null) $setBroadcast = setBroadcast;
  }

  Map toJson() {
    return {
      'address': $address,
      'message': $message,
      'port': $port,
      'length': $length,
      'offset': $offset,
      'setBroadcast': $setBroadcast
    }..removeWhere((key, value) => value == null);
  }
}

class UndoOption {
  mpjs.JsObject? $$context$$;

  UndoCompleteCallback? $complete;

  Future<UndoCompleteCallback?> get complete async {
    return $complete;
  }

  UndoFailCallback? $fail;

  Future<UndoFailCallback?> get fail async {
    return $fail;
  }

  UndoSuccessCallback? $success;

  Future<UndoSuccessCallback?> get success async {
    return $success;
  }

  UndoOption({this.$$context$$});

  void setValues(
      {UndoCompleteCallback? complete,
      UndoFailCallback? fail,
      UndoSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class UnlinkFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  UnlinkFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class UnlinkOption {
  mpjs.JsObject? $$context$$;

  String $filePath = "";

  Future<String> get filePath async {
    return await $$context$$?.getPropertyValue('filePath') ?? $filePath;
  }

  UnlinkCompleteCallback? $complete;

  Future<UnlinkCompleteCallback?> get complete async {
    return $complete;
  }

  UnlinkFailCallback? $fail;

  Future<UnlinkFailCallback?> get fail async {
    return $fail;
  }

  UnlinkSuccessCallback? $success;

  Future<UnlinkSuccessCallback?> get success async {
    return $success;
  }

  UnlinkOption({this.$$context$$});

  void setValues(
      {String? filePath,
      UnlinkCompleteCallback? complete,
      UnlinkFailCallback? fail,
      UnlinkSuccessCallback? success}) {
    if (filePath != null) $filePath = filePath;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'filePath': $filePath,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => UnlinkFailCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class UnzipFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  UnzipFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class UnzipOption {
  mpjs.JsObject? $$context$$;

  String $targetPath = "";

  Future<String> get targetPath async {
    return await $$context$$?.getPropertyValue('targetPath') ?? $targetPath;
  }

  String $zipFilePath = "";

  Future<String> get zipFilePath async {
    return await $$context$$?.getPropertyValue('zipFilePath') ?? $zipFilePath;
  }

  UnzipCompleteCallback? $complete;

  Future<UnzipCompleteCallback?> get complete async {
    return $complete;
  }

  UnzipFailCallback? $fail;

  Future<UnzipFailCallback?> get fail async {
    return $fail;
  }

  UnzipSuccessCallback? $success;

  Future<UnzipSuccessCallback?> get success async {
    return $success;
  }

  UnzipOption({this.$$context$$});

  void setValues(
      {String? targetPath,
      String? zipFilePath,
      UnzipCompleteCallback? complete,
      UnzipFailCallback? fail,
      UnzipSuccessCallback? success}) {
    if (targetPath != null) $targetPath = targetPath;
    if (zipFilePath != null) $zipFilePath = zipFilePath;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'targetPath': $targetPath,
      'zipFilePath': $zipFilePath,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => UnzipFailCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class UpdatableMessageFrontEndParameter {
  mpjs.JsObject? $$context$$;

  String $name = "";

  Future<String> get name async {
    return await $$context$$?.getPropertyValue('name') ?? $name;
  }

  String $value = "";

  Future<String> get value async {
    return await $$context$$?.getPropertyValue('value') ?? $value;
  }

  UpdatableMessageFrontEndParameter({this.$$context$$});

  void setValues({String? name, String? value}) {
    if (name != null) $name = name;
    if (value != null) $value = value;
  }

  Map toJson() {
    return {'name': $name, 'value': $value}
      ..removeWhere((key, value) => value == null);
  }
}

class UpdatableMessageFrontEndTemplateInfo {
  mpjs.JsObject? $$context$$;

  List<UpdatableMessageFrontEndParameter> $parameterList =
      <UpdatableMessageFrontEndParameter>[];

  Future<List<UpdatableMessageFrontEndParameter>> get parameterList async {
    return ((await $$context$$?.getPropertyValue('parameterList')) as List)
        .map((it) => UpdatableMessageFrontEndParameter($$context$$: it))
        .toList();
  }

  UpdatableMessageFrontEndTemplateInfo({this.$$context$$});

  void setValues({List<UpdatableMessageFrontEndParameter>? parameterList}) {
    if (parameterList != null) $parameterList = parameterList;
  }

  Map toJson() {
    return {'parameterList': $parameterList}
      ..removeWhere((key, value) => value == null);
  }
}

class UpdateGroundOverlayOption {
  mpjs.JsObject? $$context$$;

  MapBounds $bounds = MapBounds();

  Future<MapBounds> get bounds async {
    return MapBounds($$context$$: $$context$$?.getProperty('bounds'));
  }

  String $id = "";

  Future<String> get id async {
    return await $$context$$?.getPropertyValue('id') ?? $id;
  }

  String $src = "";

  Future<String> get src async {
    return await $$context$$?.getPropertyValue('src') ?? $src;
  }

  UpdateGroundOverlayCompleteCallback? $complete;

  Future<UpdateGroundOverlayCompleteCallback?> get complete async {
    return $complete;
  }

  UpdateGroundOverlayFailCallback? $fail;

  Future<UpdateGroundOverlayFailCallback?> get fail async {
    return $fail;
  }

  num? $opacity;

  Future<num?> get opacity async {
    return await $$context$$?.getPropertyValue('opacity') ?? $opacity;
  }

  UpdateGroundOverlaySuccessCallback? $success;

  Future<UpdateGroundOverlaySuccessCallback?> get success async {
    return $success;
  }

  bool? $visible;

  Future<bool?> get visible async {
    return await $$context$$?.getPropertyValue('visible') ?? $visible;
  }

  num? $zIndex;

  Future<num?> get zIndex async {
    return await $$context$$?.getPropertyValue('zIndex') ?? $zIndex;
  }

  UpdateGroundOverlayOption({this.$$context$$});

  void setValues(
      {MapBounds? bounds,
      String? id,
      String? src,
      UpdateGroundOverlayCompleteCallback? complete,
      UpdateGroundOverlayFailCallback? fail,
      num? opacity,
      UpdateGroundOverlaySuccessCallback? success,
      bool? visible,
      num? zIndex}) {
    if (bounds != null) $bounds = bounds;
    if (id != null) $id = id;
    if (src != null) $src = src;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (opacity != null) $opacity = opacity;
    if (success != null) $success = success;
    if (visible != null) $visible = visible;
    if (zIndex != null) $zIndex = zIndex;
  }

  Map toJson() {
    return {
      'bounds': $bounds,
      'id': $id,
      'src': $src,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'opacity': $opacity,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'visible': $visible,
      'zIndex': $zIndex
    }..removeWhere((key, value) => value == null);
  }
}

class UpdateShareMenuOption {
  mpjs.JsObject? $$context$$;

  String? $activityId;

  Future<String?> get activityId async {
    return await $$context$$?.getPropertyValue('activityId') ?? $activityId;
  }

  UpdateShareMenuCompleteCallback? $complete;

  Future<UpdateShareMenuCompleteCallback?> get complete async {
    return $complete;
  }

  UpdateShareMenuFailCallback? $fail;

  Future<UpdateShareMenuFailCallback?> get fail async {
    return $fail;
  }

  bool? $isPrivateMessage;

  Future<bool?> get isPrivateMessage async {
    return await $$context$$?.getPropertyValue('isPrivateMessage') ??
        $isPrivateMessage;
  }

  bool? $isUpdatableMessage;

  Future<bool?> get isUpdatableMessage async {
    return await $$context$$?.getPropertyValue('isUpdatableMessage') ??
        $isUpdatableMessage;
  }

  UpdateShareMenuSuccessCallback? $success;

  Future<UpdateShareMenuSuccessCallback?> get success async {
    return $success;
  }

  UpdatableMessageFrontEndTemplateInfo? $templateInfo;

  Future<UpdatableMessageFrontEndTemplateInfo?> get templateInfo async {
    return UpdatableMessageFrontEndTemplateInfo(
        $$context$$: $$context$$?.getProperty('templateInfo'));
  }

  String? $toDoActivityId;

  Future<String?> get toDoActivityId async {
    return await $$context$$?.getPropertyValue('toDoActivityId') ??
        $toDoActivityId;
  }

  bool? $withShareTicket;

  Future<bool?> get withShareTicket async {
    return await $$context$$?.getPropertyValue('withShareTicket') ??
        $withShareTicket;
  }

  UpdateShareMenuOption({this.$$context$$});

  void setValues(
      {String? activityId,
      UpdateShareMenuCompleteCallback? complete,
      UpdateShareMenuFailCallback? fail,
      bool? isPrivateMessage,
      bool? isUpdatableMessage,
      UpdateShareMenuSuccessCallback? success,
      UpdatableMessageFrontEndTemplateInfo? templateInfo,
      String? toDoActivityId,
      bool? withShareTicket}) {
    if (activityId != null) $activityId = activityId;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (isPrivateMessage != null) $isPrivateMessage = isPrivateMessage;
    if (isUpdatableMessage != null) $isUpdatableMessage = isUpdatableMessage;
    if (success != null) $success = success;
    if (templateInfo != null) $templateInfo = templateInfo;
    if (toDoActivityId != null) $toDoActivityId = toDoActivityId;
    if (withShareTicket != null) $withShareTicket = withShareTicket;
  }

  Map toJson() {
    return {
      'activityId': $activityId,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'isPrivateMessage': $isPrivateMessage,
      'isUpdatableMessage': $isUpdatableMessage,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'templateInfo': $templateInfo,
      'toDoActivityId': $toDoActivityId,
      'withShareTicket': $withShareTicket
    }..removeWhere((key, value) => value == null);
  }
}

class UpdateVoIPChatMuteConfigOption {
  mpjs.JsObject? $$context$$;

  MuteConfig $muteConfig = MuteConfig();

  Future<MuteConfig> get muteConfig async {
    return MuteConfig($$context$$: $$context$$?.getProperty('muteConfig'));
  }

  UpdateVoIPChatMuteConfigCompleteCallback? $complete;

  Future<UpdateVoIPChatMuteConfigCompleteCallback?> get complete async {
    return $complete;
  }

  UpdateVoIPChatMuteConfigFailCallback? $fail;

  Future<UpdateVoIPChatMuteConfigFailCallback?> get fail async {
    return $fail;
  }

  UpdateVoIPChatMuteConfigSuccessCallback? $success;

  Future<UpdateVoIPChatMuteConfigSuccessCallback?> get success async {
    return $success;
  }

  UpdateVoIPChatMuteConfigOption({this.$$context$$});

  void setValues(
      {MuteConfig? muteConfig,
      UpdateVoIPChatMuteConfigCompleteCallback? complete,
      UpdateVoIPChatMuteConfigFailCallback? fail,
      UpdateVoIPChatMuteConfigSuccessCallback? success}) {
    if (muteConfig != null) $muteConfig = muteConfig;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'muteConfig': $muteConfig,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class UpdateWeChatAppOption {
  mpjs.JsObject? $$context$$;

  UpdateWeChatAppCompleteCallback? $complete;

  Future<UpdateWeChatAppCompleteCallback?> get complete async {
    return $complete;
  }

  UpdateWeChatAppFailCallback? $fail;

  Future<UpdateWeChatAppFailCallback?> get fail async {
    return $fail;
  }

  UpdateWeChatAppSuccessCallback? $success;

  Future<UpdateWeChatAppSuccessCallback?> get success async {
    return $success;
  }

  UpdateWeChatAppOption({this.$$context$$});

  void setValues(
      {UpdateWeChatAppCompleteCallback? complete,
      UpdateWeChatAppFailCallback? fail,
      UpdateWeChatAppSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class UploadFileOption {
  mpjs.JsObject? $$context$$;

  String $filePath = "";

  Future<String> get filePath async {
    return await $$context$$?.getPropertyValue('filePath') ?? $filePath;
  }

  String $name = "";

  Future<String> get name async {
    return await $$context$$?.getPropertyValue('name') ?? $name;
  }

  String $url = "";

  Future<String> get url async {
    return await $$context$$?.getPropertyValue('url') ?? $url;
  }

  UploadFileCompleteCallback? $complete;

  Future<UploadFileCompleteCallback?> get complete async {
    return $complete;
  }

  UploadFileFailCallback? $fail;

  Future<UploadFileFailCallback?> get fail async {
    return $fail;
  }

  IAnyObject? $formData;

  Future<IAnyObject?> get formData async {
    return IAnyObject($$context$$: $$context$$?.getProperty('formData'));
  }

  IAnyObject? $header;

  Future<IAnyObject?> get header async {
    return IAnyObject($$context$$: $$context$$?.getProperty('header'));
  }

  UploadFileSuccessCallback? $success;

  Future<UploadFileSuccessCallback?> get success async {
    return $success;
  }

  num? $timeout;

  Future<num?> get timeout async {
    return await $$context$$?.getPropertyValue('timeout') ?? $timeout;
  }

  UploadFileOption({this.$$context$$});

  void setValues(
      {String? filePath,
      String? name,
      String? url,
      UploadFileCompleteCallback? complete,
      UploadFileFailCallback? fail,
      IAnyObject? formData,
      IAnyObject? header,
      UploadFileSuccessCallback? success,
      num? timeout}) {
    if (filePath != null) $filePath = filePath;
    if (name != null) $name = name;
    if (url != null) $url = url;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (formData != null) $formData = formData;
    if (header != null) $header = header;
    if (success != null) $success = success;
    if (timeout != null) $timeout = timeout;
  }

  Map toJson() {
    return {
      'filePath': $filePath,
      'name': $name,
      'url': $url,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'formData': $formData,
      'header': $header,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => UploadFileSuccessCallbackResult($$context$$: e)])
          : null,
      'timeout': $timeout
    }..removeWhere((key, value) => value == null);
  }
}

class UploadFileSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  String $data = "";

  Future<String> get data async {
    return await $$context$$?.getPropertyValue('data') ?? $data;
  }

  num $statusCode = 0;

  Future<num> get statusCode async {
    return await $$context$$?.getPropertyValue('statusCode') ?? $statusCode;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  UploadFileSuccessCallbackResult({this.$$context$$});

  void setValues({String? data, num? statusCode, String? errMsg}) {
    if (data != null) $data = data;
    if (statusCode != null) $statusCode = statusCode;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'data': $data, 'statusCode': $statusCode, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class UploadTaskOnProgressUpdateListenerResult {
  mpjs.JsObject? $$context$$;

  num $progress = 0;

  Future<num> get progress async {
    return await $$context$$?.getPropertyValue('progress') ?? $progress;
  }

  num $totalBytesExpectedToSend = 0;

  Future<num> get totalBytesExpectedToSend async {
    return await $$context$$?.getPropertyValue('totalBytesExpectedToSend') ??
        $totalBytesExpectedToSend;
  }

  num $totalBytesSent = 0;

  Future<num> get totalBytesSent async {
    return await $$context$$?.getPropertyValue('totalBytesSent') ??
        $totalBytesSent;
  }

  UploadTaskOnProgressUpdateListenerResult({this.$$context$$});

  void setValues(
      {num? progress, num? totalBytesExpectedToSend, num? totalBytesSent}) {
    if (progress != null) $progress = progress;
    if (totalBytesExpectedToSend != null)
      $totalBytesExpectedToSend = totalBytesExpectedToSend;
    if (totalBytesSent != null) $totalBytesSent = totalBytesSent;
  }

  Map toJson() {
    return {
      'progress': $progress,
      'totalBytesExpectedToSend': $totalBytesExpectedToSend,
      'totalBytesSent': $totalBytesSent
    }..removeWhere((key, value) => value == null);
  }
}

class UserInfo {
  mpjs.JsObject? $$context$$;

  String $avatarUrl = "";

  Future<String> get avatarUrl async {
    return await $$context$$?.getPropertyValue('avatarUrl') ?? $avatarUrl;
  }

  String $city = "";

  Future<String> get city async {
    return await $$context$$?.getPropertyValue('city') ?? $city;
  }

  String $country = "";

  Future<String> get country async {
    return await $$context$$?.getPropertyValue('country') ?? $country;
  }

  dynamic $gender;

  Future<dynamic> get gender async {
    return await $$context$$?.getPropertyValue('gender') ?? $gender;
  }

  dynamic $language;

  Future<dynamic> get language async {
    return await $$context$$?.getPropertyValue('language') ?? $language;
  }

  String $nickName = "";

  Future<String> get nickName async {
    return await $$context$$?.getPropertyValue('nickName') ?? $nickName;
  }

  String $province = "";

  Future<String> get province async {
    return await $$context$$?.getPropertyValue('province') ?? $province;
  }

  UserInfo({this.$$context$$});

  void setValues(
      {String? avatarUrl,
      String? city,
      String? country,
      dynamic gender,
      dynamic language,
      String? nickName,
      String? province}) {
    if (avatarUrl != null) $avatarUrl = avatarUrl;
    if (city != null) $city = city;
    if (country != null) $country = country;
    if (gender != null) $gender = gender;
    if (language != null) $language = language;
    if (nickName != null) $nickName = nickName;
    if (province != null) $province = province;
  }

  Map toJson() {
    return {
      'avatarUrl': $avatarUrl,
      'city': $city,
      'country': $country,
      'gender': $gender,
      'language': $language,
      'nickName': $nickName,
      'province': $province
    }..removeWhere((key, value) => value == null);
  }
}

class VKBodyAnchor {
  mpjs.JsObject? $$context$$;

  List<num> $confidence = <num>[];

  Future<List<num>> get confidence async {
    return await $$context$$?.getPropertyValue('confidence') ?? $confidence;
  }

  num $detectId = 0;

  Future<num> get detectId async {
    return await $$context$$?.getPropertyValue('detectId') ?? $detectId;
  }

  num $id = 0;

  Future<num> get id async {
    return await $$context$$?.getPropertyValue('id') ?? $id;
  }

  VKOrigin $origin = VKOrigin();

  Future<VKOrigin> get origin async {
    return VKOrigin($$context$$: $$context$$?.getProperty('origin'));
  }

  List<VKOrigin> $points = <VKOrigin>[];

  Future<List<VKOrigin>> get points async {
    return ((await $$context$$?.getPropertyValue('points')) as List)
        .map((it) => VKOrigin($$context$$: it))
        .toList();
  }

  num $score = 0;

  Future<num> get score async {
    return await $$context$$?.getPropertyValue('score') ?? $score;
  }

  VKSize $size = VKSize();

  Future<VKSize> get size async {
    return VKSize($$context$$: $$context$$?.getProperty('size'));
  }

  dynamic $type;

  Future<dynamic> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  VKBodyAnchor({this.$$context$$});

  void setValues(
      {List<num>? confidence,
      num? detectId,
      num? id,
      VKOrigin? origin,
      List<VKOrigin>? points,
      num? score,
      VKSize? size,
      dynamic type}) {
    if (confidence != null) $confidence = confidence;
    if (detectId != null) $detectId = detectId;
    if (id != null) $id = id;
    if (origin != null) $origin = origin;
    if (points != null) $points = points;
    if (score != null) $score = score;
    if (size != null) $size = size;
    if (type != null) $type = type;
  }

  Map toJson() {
    return {
      'confidence': $confidence,
      'detectId': $detectId,
      'id': $id,
      'origin': $origin,
      'points': $points,
      'score': $score,
      'size': $size,
      'type': $type
    }..removeWhere((key, value) => value == null);
  }
}

class VKCamera {
  mpjs.JsObject? $$context$$;

  Float32Array $intrinsics = Float32Array();

  Future<Float32Array> get intrinsics async {
    return Float32Array($$context$$: $$context$$?.getProperty('intrinsics'));
  }

  Float32Array $viewMatrix = Float32Array();

  Future<Float32Array> get viewMatrix async {
    return Float32Array($$context$$: $$context$$?.getProperty('viewMatrix'));
  }

  VKCamera({this.$$context$$});

  void setValues({Float32Array? intrinsics, Float32Array? viewMatrix}) {
    if (intrinsics != null) $intrinsics = intrinsics;
    if (viewMatrix != null) $viewMatrix = viewMatrix;
  }

  Map toJson() {
    return {'intrinsics': $intrinsics, 'viewMatrix': $viewMatrix}
      ..removeWhere((key, value) => value == null);
  }

  Future<Float32Array> getProjectionMatrix(num near, num far) async {
    final result =
        await $$context$$?.callMethod('getProjectionMatrix', [near, far]);

    return Float32Array($$context$$: result);
  }
}

class VKConfig {
  mpjs.JsObject? $$context$$;

  Track $track = Track();

  Future<Track> get track async {
    return Track($$context$$: $$context$$?.getProperty('track'));
  }

  dynamic $version;

  Future<dynamic> get version async {
    return await $$context$$?.getPropertyValue('version') ?? $version;
  }

  VKConfig({this.$$context$$});

  void setValues({Track? track, dynamic version}) {
    if (track != null) $track = track;
    if (version != null) $version = version;
  }

  Map toJson() {
    return {'track': $track, 'version': $version}
      ..removeWhere((key, value) => value == null);
  }
}

class VKFaceAnchor {
  mpjs.JsObject? $$context$$;

  List<num> $angle = <num>[];

  Future<List<num>> get angle async {
    return await $$context$$?.getPropertyValue('angle') ?? $angle;
  }

  List<num> $confidence = <num>[];

  Future<List<num>> get confidence async {
    return await $$context$$?.getPropertyValue('confidence') ?? $confidence;
  }

  num $detectId = 0;

  Future<num> get detectId async {
    return await $$context$$?.getPropertyValue('detectId') ?? $detectId;
  }

  num $id = 0;

  Future<num> get id async {
    return await $$context$$?.getPropertyValue('id') ?? $id;
  }

  VKOrigin $origin = VKOrigin();

  Future<VKOrigin> get origin async {
    return VKOrigin($$context$$: $$context$$?.getProperty('origin'));
  }

  List<VKPoint> $points = <VKPoint>[];

  Future<List<VKPoint>> get points async {
    return ((await $$context$$?.getPropertyValue('points')) as List)
        .map((it) => VKPoint($$context$$: it))
        .toList();
  }

  VKSize $size = VKSize();

  Future<VKSize> get size async {
    return VKSize($$context$$: $$context$$?.getProperty('size'));
  }

  dynamic $type;

  Future<dynamic> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  VKFaceAnchor({this.$$context$$});

  void setValues(
      {List<num>? angle,
      List<num>? confidence,
      num? detectId,
      num? id,
      VKOrigin? origin,
      List<VKPoint>? points,
      VKSize? size,
      dynamic type}) {
    if (angle != null) $angle = angle;
    if (confidence != null) $confidence = confidence;
    if (detectId != null) $detectId = detectId;
    if (id != null) $id = id;
    if (origin != null) $origin = origin;
    if (points != null) $points = points;
    if (size != null) $size = size;
    if (type != null) $type = type;
  }

  Map toJson() {
    return {
      'angle': $angle,
      'confidence': $confidence,
      'detectId': $detectId,
      'id': $id,
      'origin': $origin,
      'points': $points,
      'size': $size,
      'type': $type
    }..removeWhere((key, value) => value == null);
  }
}

class VKFrame {
  mpjs.JsObject? $$context$$;

  VKCamera $camera = VKCamera();

  Future<VKCamera> get camera async {
    return VKCamera($$context$$: $$context$$?.getProperty('camera'));
  }

  num $timestamp = 0;

  Future<num> get timestamp async {
    return await $$context$$?.getPropertyValue('timestamp') ?? $timestamp;
  }

  VKFrame({this.$$context$$});

  void setValues({VKCamera? camera, num? timestamp}) {
    if (camera != null) $camera = camera;
    if (timestamp != null) $timestamp = timestamp;
  }

  Map toJson() {
    return {'camera': $camera, 'timestamp': $timestamp}
      ..removeWhere((key, value) => value == null);
  }

  Future<ArrayBuffer> getCameraBuffer(num width, num height) async {
    final result =
        await $$context$$?.callMethod('getCameraBuffer', [width, height]);

    return ArrayBuffer($$context$$: result);
  }

  Future<Float32Array> getDisplayTransform() async {
    final result = await $$context$$?.callMethod('getDisplayTransform', []);

    return Float32Array($$context$$: result);
  }

  // Future<YUVTextureRes> getCameraTexture(WebGLRenderingContext gl) async {
  //   final result = await $$context$$?.callMethod('getCameraTexture', [gl]);

  //   return YUVTextureRes($$context$$: result);
  // }
}

class VKHandAnchor {
  mpjs.JsObject? $$context$$;

  List<num> $confidence = <num>[];

  Future<List<num>> get confidence async {
    return await $$context$$?.getPropertyValue('confidence') ?? $confidence;
  }

  num $detectId = 0;

  Future<num> get detectId async {
    return await $$context$$?.getPropertyValue('detectId') ?? $detectId;
  }

  dynamic $gesture;

  Future<dynamic> get gesture async {
    return await $$context$$?.getPropertyValue('gesture') ?? $gesture;
  }

  num $id = 0;

  Future<num> get id async {
    return await $$context$$?.getPropertyValue('id') ?? $id;
  }

  VKOrigin $origin = VKOrigin();

  Future<VKOrigin> get origin async {
    return VKOrigin($$context$$: $$context$$?.getProperty('origin'));
  }

  List<VKOrigin> $points = <VKOrigin>[];

  Future<List<VKOrigin>> get points async {
    return ((await $$context$$?.getPropertyValue('points')) as List)
        .map((it) => VKOrigin($$context$$: it))
        .toList();
  }

  num $score = 0;

  Future<num> get score async {
    return await $$context$$?.getPropertyValue('score') ?? $score;
  }

  VKSize $size = VKSize();

  Future<VKSize> get size async {
    return VKSize($$context$$: $$context$$?.getProperty('size'));
  }

  dynamic $type;

  Future<dynamic> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  VKHandAnchor({this.$$context$$});

  void setValues(
      {List<num>? confidence,
      num? detectId,
      dynamic gesture,
      num? id,
      VKOrigin? origin,
      List<VKOrigin>? points,
      num? score,
      VKSize? size,
      dynamic type}) {
    if (confidence != null) $confidence = confidence;
    if (detectId != null) $detectId = detectId;
    if (gesture != null) $gesture = gesture;
    if (id != null) $id = id;
    if (origin != null) $origin = origin;
    if (points != null) $points = points;
    if (score != null) $score = score;
    if (size != null) $size = size;
    if (type != null) $type = type;
  }

  Map toJson() {
    return {
      'confidence': $confidence,
      'detectId': $detectId,
      'gesture': $gesture,
      'id': $id,
      'origin': $origin,
      'points': $points,
      'score': $score,
      'size': $size,
      'type': $type
    }..removeWhere((key, value) => value == null);
  }
}

class VKMarker {
  mpjs.JsObject? $$context$$;

  num $markerId = 0;

  Future<num> get markerId async {
    return await $$context$$?.getPropertyValue('markerId') ?? $markerId;
  }

  String $path = "";

  Future<String> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  VKMarker({this.$$context$$});

  void setValues({num? markerId, String? path}) {
    if (markerId != null) $markerId = markerId;
    if (path != null) $path = path;
  }

  Map toJson() {
    return {'markerId': $markerId, 'path': $path}
      ..removeWhere((key, value) => value == null);
  }
}

class VKMarkerAnchor {
  mpjs.JsObject? $$context$$;

  num $id = 0;

  Future<num> get id async {
    return await $$context$$?.getPropertyValue('id') ?? $id;
  }

  num $markerId = 0;

  Future<num> get markerId async {
    return await $$context$$?.getPropertyValue('markerId') ?? $markerId;
  }

  String $path = "";

  Future<String> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  Float32Array $transform = Float32Array();

  Future<Float32Array> get transform async {
    return Float32Array($$context$$: $$context$$?.getProperty('transform'));
  }

  dynamic $type;

  Future<dynamic> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  VKMarkerAnchor({this.$$context$$});

  void setValues(
      {num? id,
      num? markerId,
      String? path,
      Float32Array? transform,
      dynamic type}) {
    if (id != null) $id = id;
    if (markerId != null) $markerId = markerId;
    if (path != null) $path = path;
    if (transform != null) $transform = transform;
    if (type != null) $type = type;
  }

  Map toJson() {
    return {
      'id': $id,
      'markerId': $markerId,
      'path': $path,
      'transform': $transform,
      'type': $type
    }..removeWhere((key, value) => value == null);
  }
}

class VKOCRAnchor {
  mpjs.JsObject? $$context$$;

  num $id = 0;

  Future<num> get id async {
    return await $$context$$?.getPropertyValue('id') ?? $id;
  }

  String $text = "";

  Future<String> get text async {
    return await $$context$$?.getPropertyValue('text') ?? $text;
  }

  dynamic $type;

  Future<dynamic> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  VKOCRAnchor({this.$$context$$});

  void setValues({num? id, String? text, dynamic type}) {
    if (id != null) $id = id;
    if (text != null) $text = text;
    if (type != null) $type = type;
  }

  Map toJson() {
    return {'id': $id, 'text': $text, 'type': $type}
      ..removeWhere((key, value) => value == null);
  }
}

class VKOSDAnchor {
  mpjs.JsObject? $$context$$;

  num $id = 0;

  Future<num> get id async {
    return await $$context$$?.getPropertyValue('id') ?? $id;
  }

  num $markerId = 0;

  Future<num> get markerId async {
    return await $$context$$?.getPropertyValue('markerId') ?? $markerId;
  }

  VKOrigin $origin = VKOrigin();

  Future<VKOrigin> get origin async {
    return VKOrigin($$context$$: $$context$$?.getProperty('origin'));
  }

  String $path = "";

  Future<String> get path async {
    return await $$context$$?.getPropertyValue('path') ?? $path;
  }

  VKSize $size = VKSize();

  Future<VKSize> get size async {
    return VKSize($$context$$: $$context$$?.getProperty('size'));
  }

  dynamic $type;

  Future<dynamic> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  VKOSDAnchor({this.$$context$$});

  void setValues(
      {num? id,
      num? markerId,
      VKOrigin? origin,
      String? path,
      VKSize? size,
      dynamic type}) {
    if (id != null) $id = id;
    if (markerId != null) $markerId = markerId;
    if (origin != null) $origin = origin;
    if (path != null) $path = path;
    if (size != null) $size = size;
    if (type != null) $type = type;
  }

  Map toJson() {
    return {
      'id': $id,
      'markerId': $markerId,
      'origin': $origin,
      'path': $path,
      'size': $size,
      'type': $type
    }..removeWhere((key, value) => value == null);
  }
}

class VKOrigin {
  mpjs.JsObject? $$context$$;

  num $x = 0;

  Future<num> get x async {
    return await $$context$$?.getPropertyValue('x') ?? $x;
  }

  num $y = 0;

  Future<num> get y async {
    return await $$context$$?.getPropertyValue('y') ?? $y;
  }

  VKOrigin({this.$$context$$});

  void setValues({num? x, num? y}) {
    if (x != null) $x = x;
    if (y != null) $y = y;
  }

  Map toJson() {
    return {'x': $x, 'y': $y}..removeWhere((key, value) => value == null);
  }
}

class VKPlaneAnchor {
  mpjs.JsObject? $$context$$;

  num $alignment = 0;

  Future<num> get alignment async {
    return await $$context$$?.getPropertyValue('alignment') ?? $alignment;
  }

  num $id = 0;

  Future<num> get id async {
    return await $$context$$?.getPropertyValue('id') ?? $id;
  }

  VKSize $size = VKSize();

  Future<VKSize> get size async {
    return VKSize($$context$$: $$context$$?.getProperty('size'));
  }

  Float32Array $transform = Float32Array();

  Future<Float32Array> get transform async {
    return Float32Array($$context$$: $$context$$?.getProperty('transform'));
  }

  dynamic $type;

  Future<dynamic> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  VKPlaneAnchor({this.$$context$$});

  void setValues(
      {num? alignment,
      num? id,
      VKSize? size,
      Float32Array? transform,
      dynamic type}) {
    if (alignment != null) $alignment = alignment;
    if (id != null) $id = id;
    if (size != null) $size = size;
    if (transform != null) $transform = transform;
    if (type != null) $type = type;
  }

  Map toJson() {
    return {
      'alignment': $alignment,
      'id': $id,
      'size': $size,
      'transform': $transform,
      'type': $type
    }..removeWhere((key, value) => value == null);
  }
}

class VKPoint {
  mpjs.JsObject? $$context$$;

  num $x = 0;

  Future<num> get x async {
    return await $$context$$?.getPropertyValue('x') ?? $x;
  }

  num $y = 0;

  Future<num> get y async {
    return await $$context$$?.getPropertyValue('y') ?? $y;
  }

  VKPoint({this.$$context$$});

  void setValues({num? x, num? y}) {
    if (x != null) $x = x;
    if (y != null) $y = y;
  }

  Map toJson() {
    return {'x': $x, 'y': $y}..removeWhere((key, value) => value == null);
  }
}

class VKSession {
  mpjs.JsObject? $$context$$;

  VKSize $cameraSize = VKSize();

  Future<VKSize> get cameraSize async {
    return VKSize($$context$$: $$context$$?.getProperty('cameraSize'));
  }

  VKConfig $config = VKConfig();

  Future<VKConfig> get config async {
    return VKConfig($$context$$: $$context$$?.getProperty('config'));
  }

  dynamic $state;

  Future<dynamic> get state async {
    return await $$context$$?.getPropertyValue('state') ?? $state;
  }

  VKSession({this.$$context$$});

  void setValues({VKSize? cameraSize, VKConfig? config, dynamic state}) {
    if (cameraSize != null) $cameraSize = cameraSize;
    if (config != null) $config = config;
    if (state != null) $state = state;
  }

  Map toJson() {
    return {'cameraSize': $cameraSize, 'config': $config, 'state': $state}
      ..removeWhere((key, value) => value == null);
  }

  Future<List<VKMarker>> getAllMarker() async {
    final result = await $$context$$?.callMethod('getAllMarker', []);
    return result;
  }

  Future<List<VKMarker>> getAllOSDMarker() async {
    final result = await $$context$$?.callMethod('getAllOSDMarker', []);
    return result;
  }

  Future<List<HitTestRes>> hitTest(num x, num y, IAnyObject reset) async {
    final result =
        await $$context$$?.callMethod('hitTest', [x, y, reset.toJson()]);
    return result;
  }

  Future<void> cancelAnimationFrame(num requestID) async {
    final result =
        await $$context$$?.callMethod('cancelAnimationFrame', [requestID]);
    return result;
  }

  Future<void> destroy() async {
    final result = await $$context$$?.callMethod('destroy', []);
    return result;
  }

  Future<void> detectBody(DetectBodyOption option) async {
    final result =
        await $$context$$?.callMethod('detectBody', [option.toJson()]);
    return result;
  }

  Future<void> detectFace(DetectFaceOption option) async {
    final result =
        await $$context$$?.callMethod('detectFace', [option.toJson()]);
    return result;
  }

  Future<void> detectHand(DetectHandOption option) async {
    final result =
        await $$context$$?.callMethod('detectHand', [option.toJson()]);
    return result;
  }

  Future<void> off(String eventName, dynamic fn) async {
    final result = await $$context$$?.callMethod('off', [eventName, fn]);
    return result;
  }

  Future<void> on(dynamic eventName, dynamic fn) async {
    final result = await $$context$$?.callMethod('on', [eventName, fn]);
    return result;
  }

  Future<void> removeMarker(num markerId) async {
    final result = await $$context$$?.callMethod('removeMarker', [markerId]);
    return result;
  }

  Future<void> removeOSDMarker(num markerId) async {
    final result = await $$context$$?.callMethod('removeOSDMarker', [markerId]);
    return result;
  }

  Future<void> runOCR(RunOCROption option) async {
    final result = await $$context$$?.callMethod('runOCR', [option.toJson()]);
    return result;
  }

  Future<void> start(VKSessionStartCallback callback) async {
    final result = await $$context$$?.callMethod('start', [callback]);
    return result;
  }

  Future<void> stop() async {
    final result = await $$context$$?.callMethod('stop', []);
    return result;
  }

  Future<void> updateOSDThreshold(num threshold) async {
    final result =
        await $$context$$?.callMethod('updateOSDThreshold', [threshold]);
    return result;
  }

  Future<VKFrame> getVKFrame(num width, num height) async {
    final result = await $$context$$?.callMethod('getVKFrame', [width, height]);

    return VKFrame($$context$$: result);
  }

  Future<num> addMarker(String path) async {
    final result = await $$context$$?.callMethod('addMarker', [path]);
    return result;
  }

  Future<num> addOSDMarker(String path) async {
    final result = await $$context$$?.callMethod('addOSDMarker', [path]);
    return result;
  }

  Future<num> requestAnimationFrame(dynamic callback) async {
    final result =
        await $$context$$?.callMethod('requestAnimationFrame', [callback]);
    return result;
  }
}

class VKSize {
  mpjs.JsObject? $$context$$;

  num $height = 0;

  Future<num> get height async {
    return await $$context$$?.getPropertyValue('height') ?? $height;
  }

  num $width = 0;

  Future<num> get width async {
    return await $$context$$?.getPropertyValue('width') ?? $width;
  }

  VKSize({this.$$context$$});

  void setValues({num? height, num? width}) {
    if (height != null) $height = height;
    if (width != null) $width = width;
  }

  Map toJson() {
    return {'height': $height, 'width': $width}
      ..removeWhere((key, value) => value == null);
  }
}

class VibrateLongOption {
  mpjs.JsObject? $$context$$;

  VibrateLongCompleteCallback? $complete;

  Future<VibrateLongCompleteCallback?> get complete async {
    return $complete;
  }

  VibrateLongFailCallback? $fail;

  Future<VibrateLongFailCallback?> get fail async {
    return $fail;
  }

  VibrateLongSuccessCallback? $success;

  Future<VibrateLongSuccessCallback?> get success async {
    return $success;
  }

  VibrateLongOption({this.$$context$$});

  void setValues(
      {VibrateLongCompleteCallback? complete,
      VibrateLongFailCallback? fail,
      VibrateLongSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class VibrateShortFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  VibrateShortFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class VibrateShortOption {
  mpjs.JsObject? $$context$$;

  String $type = "";

  Future<String> get type async {
    return await $$context$$?.getPropertyValue('type') ?? $type;
  }

  VibrateShortCompleteCallback? $complete;

  Future<VibrateShortCompleteCallback?> get complete async {
    return $complete;
  }

  VibrateShortFailCallback? $fail;

  Future<VibrateShortFailCallback?> get fail async {
    return $fail;
  }

  VibrateShortSuccessCallback? $success;

  Future<VibrateShortSuccessCallback?> get success async {
    return $success;
  }

  VibrateShortOption({this.$$context$$});

  void setValues(
      {String? type,
      VibrateShortCompleteCallback? complete,
      VibrateShortFailCallback? fail,
      VibrateShortSuccessCallback? success}) {
    if (type != null) $type = type;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'type': $type,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => VibrateShortFailCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class VideoContextRequestFullScreenOption {
  mpjs.JsObject? $$context$$;

  dynamic $direction;

  Future<dynamic> get direction async {
    return await $$context$$?.getPropertyValue('direction') ?? $direction;
  }

  VideoContextRequestFullScreenOption({this.$$context$$});

  void setValues({dynamic direction}) {
    if (direction != null) $direction = direction;
  }

  Map toJson() {
    return {'direction': $direction}
      ..removeWhere((key, value) => value == null);
  }
}

class VideoDecoderStartOption {
  mpjs.JsObject? $$context$$;

  String $source = "";

  Future<String> get source async {
    return await $$context$$?.getPropertyValue('source') ?? $source;
  }

  bool? $abortAudio;

  Future<bool?> get abortAudio async {
    return await $$context$$?.getPropertyValue('abortAudio') ?? $abortAudio;
  }

  bool? $abortVideo;

  Future<bool?> get abortVideo async {
    return await $$context$$?.getPropertyValue('abortVideo') ?? $abortVideo;
  }

  num? $mode;

  Future<num?> get mode async {
    return await $$context$$?.getPropertyValue('mode') ?? $mode;
  }

  VideoDecoderStartOption({this.$$context$$});

  void setValues(
      {String? source, bool? abortAudio, bool? abortVideo, num? mode}) {
    if (source != null) $source = source;
    if (abortAudio != null) $abortAudio = abortAudio;
    if (abortVideo != null) $abortVideo = abortVideo;
    if (mode != null) $mode = mode;
  }

  Map toJson() {
    return {
      'source': $source,
      'abortAudio': $abortAudio,
      'abortVideo': $abortVideo,
      'mode': $mode
    }..removeWhere((key, value) => value == null);
  }
}

class VoIP1v1ChatUser {
  mpjs.JsObject? $$context$$;

  String $nickname = "";

  Future<String> get nickname async {
    return await $$context$$?.getPropertyValue('nickname') ?? $nickname;
  }

  String $openid = "";

  Future<String> get openid async {
    return await $$context$$?.getPropertyValue('openid') ?? $openid;
  }

  String? $headImage;

  Future<String?> get headImage async {
    return await $$context$$?.getPropertyValue('headImage') ?? $headImage;
  }

  VoIP1v1ChatUser({this.$$context$$});

  void setValues({String? nickname, String? openid, String? headImage}) {
    if (nickname != null) $nickname = nickname;
    if (openid != null) $openid = openid;
    if (headImage != null) $headImage = headImage;
  }

  Map toJson() {
    return {'nickname': $nickname, 'openid': $openid, 'headImage': $headImage}
      ..removeWhere((key, value) => value == null);
  }
}

class WebAudioContext {
  // mpjs.JsObject? $$context$$;

  // num $currentTime = 0;

  // Future<num> get currentTime async {
  //   return await $$context$$?.getPropertyValue('currentTime') ?? $currentTime;
  // }

  // WebAudioContextNode $destination = WebAudioContextNode();

  // Future<WebAudioContextNode> get destination async {
  //   return WebAudioContextNode(
  //       $$context$$: $$context$$?.getProperty('destination'));
  // }

  // // AudioListener $listener = AudioListener();

  // // Future<AudioListener> get listener async {
  // //   return $listener;
  // // }

  // dynamic $onstatechange;

  // Future<dynamic> get onstatechange async {
  //   return await $$context$$?.getPropertyValue('onstatechange') ??
  //       $onstatechange;
  // }

  // num $sampleRate = 0;

  // Future<num> get sampleRate async {
  //   return await $$context$$?.getPropertyValue('sampleRate') ?? $sampleRate;
  // }

  // String $state = "";

  // Future<String> get state async {
  //   return await $$context$$?.getPropertyValue('state') ?? $state;
  // }

  // WebAudioContext({this.$$context$$});

  // void setValues(
  //     {num? currentTime,
  //     WebAudioContextNode? destination,
  //     dynamic onstatechange,
  //     num? sampleRate,
  //     String? state}) {
  //   if (currentTime != null) $currentTime = currentTime;
  //   if (destination != null) $destination = destination;
  //   if (onstatechange != null) $onstatechange = onstatechange;
  //   if (sampleRate != null) $sampleRate = sampleRate;
  //   if (state != null) $state = state;
  // }

  // Map toJson() {
  //   return {
  //     'currentTime': $currentTime,
  //     'destination': $destination,
  //     'onstatechange': $onstatechange != null
  //         ? mpjs.JsFunction($onstatechange!, [null])
  //         : null,
  //     'sampleRate': $sampleRate,
  //     'state': $state
  //   }..removeWhere((key, value) => value == null);
  // }

  // Future<AnalyserNode> createAnalyser() async {
  //   final result = await $$context$$?.callMethod('createAnalyser', []);
  //   return result;
  // }

  // Future<BiquadFilterNode> createBiquadFilter() async {
  //   final result = await $$context$$?.callMethod('createBiquadFilter', []);
  //   return result;
  // }

  // Future<BufferSourceNode> createBufferSource() async {
  //   final result = await $$context$$?.callMethod('createBufferSource', []);
  //   return result;
  // }

  // Future<ChannelMergerNode> createChannelMerger(num numberOfInputs) async {
  //   final result =
  //       await $$context$$?.callMethod('createChannelMerger', [numberOfInputs]);
  //   return result;
  // }

  // Future<ChannelSplitterNode> createChannelSplitter(num numberOfOutputs) async {
  //   final result = await $$context$$
  //       ?.callMethod('createChannelSplitter', [numberOfOutputs]);
  //   return result;
  // }

  // Future<ConstantSourceNode> createConstantSource() async {
  //   final result = await $$context$$?.callMethod('createConstantSource', []);
  //   return result;
  // }

  // Future<DelayNode> createDelay(num maxDelayTime) async {
  //   final result = await $$context$$?.callMethod('createDelay', [maxDelayTime]);
  //   return result;
  // }

  // Future<DynamicsCompressorNode> createDynamicsCompressor() async {
  //   final result =
  //       await $$context$$?.callMethod('createDynamicsCompressor', []);
  //   return result;
  // }

  // Future<GainNode> createGain() async {
  //   final result = await $$context$$?.callMethod('createGain', []);
  //   return result;
  // }

  // Future<IIRFilterNode> createIIRFilter(
  //     List<num> feedforward, List<num> feedback) async {
  //   final result = await $$context$$
  //       ?.callMethod('createIIRFilter', [feedforward, feedback]);
  //   return result;
  // }

  // Future<OscillatorNode> createOscillator() async {
  //   final result = await $$context$$?.callMethod('createOscillator', []);
  //   return result;
  // }

  // Future<PannerNode> createPanner() async {
  //   final result = await $$context$$?.callMethod('createPanner', []);
  //   return result;
  // }

  // Future<PeriodicWaveNode> createPeriodicWave(
  //     Float32Array real, Float32Array imag, Constraints constraints) async {
  //   final result = await $$context$$?.callMethod('createPeriodicWave',
  //       [real.toJson(), imag.toJson(), constraints.toJson()]);
  //   return result;
  // }

  // Future<dynamic> close() async {
  //   final result = await $$context$$?.callMethod('close', []);
  //   return result;
  // }

  // Future<dynamic> resume() async {
  //   final result = await $$context$$?.callMethod('resume', []);
  //   return result;
  // }

  // Future<dynamic> suspend() async {
  //   final result = await $$context$$?.callMethod('suspend', []);
  //   return result;
  // }

  // Future<ScriptProcessorNode> createScriptProcessor(num bufferSize,
  //     num numberOfInputChannels, num numberOfOutputChannels) async {
  //   final result = await $$context$$?.callMethod('createScriptProcessor',
  //       [bufferSize, numberOfInputChannels, numberOfOutputChannels]);
  //   return result;
  // }

  // Future<WaveShaperNode> createWaveShaper() async {
  //   final result = await $$context$$?.callMethod('createWaveShaper', []);
  //   return result;
  // }

  // Future<AudioBuffer> createBuffer(
  //     num numOfChannels, num length, num sampleRate) async {
  //   final result = await $$context$$
  //       ?.callMethod('createBuffer', [numOfChannels, length, sampleRate]);

  //   return AudioBuffer($$context$$: result);
  // }

  // Future<AudioBuffer> decodeAudioData() async {
  //   final result = await $$context$$?.callMethod('decodeAudioData', []);

  //   return AudioBuffer($$context$$: result);
  // }
}

class WebAudioContextNode {
  mpjs.JsObject? $$context$$;

  num $forwardX = 0;

  Future<num> get forwardX async {
    return await $$context$$?.getPropertyValue('forwardX') ?? $forwardX;
  }

  num $forwardY = 0;

  Future<num> get forwardY async {
    return await $$context$$?.getPropertyValue('forwardY') ?? $forwardY;
  }

  num $forwardZ = 0;

  Future<num> get forwardZ async {
    return await $$context$$?.getPropertyValue('forwardZ') ?? $forwardZ;
  }

  num $positionX = 0;

  Future<num> get positionX async {
    return await $$context$$?.getPropertyValue('positionX') ?? $positionX;
  }

  num $positionY = 0;

  Future<num> get positionY async {
    return await $$context$$?.getPropertyValue('positionY') ?? $positionY;
  }

  num $positionZ = 0;

  Future<num> get positionZ async {
    return await $$context$$?.getPropertyValue('positionZ') ?? $positionZ;
  }

  dynamic $setOrientation;

  Future<dynamic> get setOrientation async {
    return await $$context$$?.getPropertyValue('setOrientation') ??
        $setOrientation;
  }

  dynamic $setPosition;

  Future<dynamic> get setPosition async {
    return await $$context$$?.getPropertyValue('setPosition') ?? $setPosition;
  }

  num $upX = 0;

  Future<num> get upX async {
    return await $$context$$?.getPropertyValue('upX') ?? $upX;
  }

  num $upY = 0;

  Future<num> get upY async {
    return await $$context$$?.getPropertyValue('upY') ?? $upY;
  }

  num $upZ = 0;

  Future<num> get upZ async {
    return await $$context$$?.getPropertyValue('upZ') ?? $upZ;
  }

  WebAudioContextNode({this.$$context$$});

  void setValues(
      {num? forwardX,
      num? forwardY,
      num? forwardZ,
      num? positionX,
      num? positionY,
      num? positionZ,
      dynamic setOrientation,
      dynamic setPosition,
      num? upX,
      num? upY,
      num? upZ}) {
    if (forwardX != null) $forwardX = forwardX;
    if (forwardY != null) $forwardY = forwardY;
    if (forwardZ != null) $forwardZ = forwardZ;
    if (positionX != null) $positionX = positionX;
    if (positionY != null) $positionY = positionY;
    if (positionZ != null) $positionZ = positionZ;
    if (setOrientation != null) $setOrientation = setOrientation;
    if (setPosition != null) $setPosition = setPosition;
    if (upX != null) $upX = upX;
    if (upY != null) $upY = upY;
    if (upZ != null) $upZ = upZ;
  }

  Map toJson() {
    return {
      'forwardX': $forwardX,
      'forwardY': $forwardY,
      'forwardZ': $forwardZ,
      'positionX': $positionX,
      'positionY': $positionY,
      'positionZ': $positionZ,
      'setOrientation': $setOrientation != null
          ? mpjs.JsFunction($setOrientation!, [null])
          : null,
      'setPosition':
          $setPosition != null ? mpjs.JsFunction($setPosition!, [null]) : null,
      'upX': $upX,
      'upY': $upY,
      'upZ': $upZ
    }..removeWhere((key, value) => value == null);
  }
}

class WifiData {
  mpjs.JsObject? $$context$$;

  String? $BSSID;

  Future<String?> get BSSID async {
    return await $$context$$?.getPropertyValue('BSSID') ?? $BSSID;
  }

  String? $SSID;

  Future<String?> get SSID async {
    return await $$context$$?.getPropertyValue('SSID') ?? $SSID;
  }

  String? $password;

  Future<String?> get password async {
    return await $$context$$?.getPropertyValue('password') ?? $password;
  }

  WifiData({this.$$context$$});

  void setValues({String? BSSID, String? SSID, String? password}) {
    if (BSSID != null) $BSSID = BSSID;
    if (SSID != null) $SSID = SSID;
    if (password != null) $password = password;
  }

  Map toJson() {
    return {'BSSID': $BSSID, 'SSID': $SSID, 'password': $password}
      ..removeWhere((key, value) => value == null);
  }
}

class WifiInfo {
  mpjs.JsObject? $$context$$;

  String $BSSID = "";

  Future<String> get BSSID async {
    return await $$context$$?.getPropertyValue('BSSID') ?? $BSSID;
  }

  String $SSID = "";

  Future<String> get SSID async {
    return await $$context$$?.getPropertyValue('SSID') ?? $SSID;
  }

  num $frequency = 0;

  Future<num> get frequency async {
    return await $$context$$?.getPropertyValue('frequency') ?? $frequency;
  }

  bool $secure = false;

  Future<bool> get secure async {
    return await $$context$$?.getPropertyValue('secure') ?? $secure;
  }

  num $signalStrength = 0;

  Future<num> get signalStrength async {
    return await $$context$$?.getPropertyValue('signalStrength') ??
        $signalStrength;
  }

  WifiInfo({this.$$context$$});

  void setValues(
      {String? BSSID,
      String? SSID,
      num? frequency,
      bool? secure,
      num? signalStrength}) {
    if (BSSID != null) $BSSID = BSSID;
    if (SSID != null) $SSID = SSID;
    if (frequency != null) $frequency = frequency;
    if (secure != null) $secure = secure;
    if (signalStrength != null) $signalStrength = signalStrength;
  }

  Map toJson() {
    return {
      'BSSID': $BSSID,
      'SSID': $SSID,
      'frequency': $frequency,
      'secure': $secure,
      'signalStrength': $signalStrength
    }..removeWhere((key, value) => value == null);
  }
}

class WindowInfo {
  mpjs.JsObject? $$context$$;

  num $pixelRatio = 0;

  Future<num> get pixelRatio async {
    return await $$context$$?.getPropertyValue('pixelRatio') ?? $pixelRatio;
  }

  SafeArea $safeArea = SafeArea();

  Future<SafeArea> get safeArea async {
    return SafeArea($$context$$: $$context$$?.getProperty('safeArea'));
  }

  num $screenHeight = 0;

  Future<num> get screenHeight async {
    return await $$context$$?.getPropertyValue('screenHeight') ?? $screenHeight;
  }

  num $screenTop = 0;

  Future<num> get screenTop async {
    return await $$context$$?.getPropertyValue('screenTop') ?? $screenTop;
  }

  num $screenWidth = 0;

  Future<num> get screenWidth async {
    return await $$context$$?.getPropertyValue('screenWidth') ?? $screenWidth;
  }

  num $statusBarHeight = 0;

  Future<num> get statusBarHeight async {
    return await $$context$$?.getPropertyValue('statusBarHeight') ??
        $statusBarHeight;
  }

  num $windowHeight = 0;

  Future<num> get windowHeight async {
    return await $$context$$?.getPropertyValue('windowHeight') ?? $windowHeight;
  }

  num $windowWidth = 0;

  Future<num> get windowWidth async {
    return await $$context$$?.getPropertyValue('windowWidth') ?? $windowWidth;
  }

  WindowInfo({this.$$context$$});

  void setValues(
      {num? pixelRatio,
      SafeArea? safeArea,
      num? screenHeight,
      num? screenTop,
      num? screenWidth,
      num? statusBarHeight,
      num? windowHeight,
      num? windowWidth}) {
    if (pixelRatio != null) $pixelRatio = pixelRatio;
    if (safeArea != null) $safeArea = safeArea;
    if (screenHeight != null) $screenHeight = screenHeight;
    if (screenTop != null) $screenTop = screenTop;
    if (screenWidth != null) $screenWidth = screenWidth;
    if (statusBarHeight != null) $statusBarHeight = statusBarHeight;
    if (windowHeight != null) $windowHeight = windowHeight;
    if (windowWidth != null) $windowWidth = windowWidth;
  }

  Map toJson() {
    return {
      'pixelRatio': $pixelRatio,
      'safeArea': $safeArea,
      'screenHeight': $screenHeight,
      'screenTop': $screenTop,
      'screenWidth': $screenWidth,
      'statusBarHeight': $statusBarHeight,
      'windowHeight': $windowHeight,
      'windowWidth': $windowWidth
    }..removeWhere((key, value) => value == null);
  }
}

class Worker {
  mpjs.JsObject? $$context$$;

  WorkerEnv $env = WorkerEnv();

  Future<WorkerEnv> get env async {
    return WorkerEnv($$context$$: $$context$$?.getProperty('env'));
  }

  Worker({this.$$context$$});

  void setValues({WorkerEnv? env}) {
    if (env != null) $env = env;
  }

  Map toJson() {
    return {'env': $env}..removeWhere((key, value) => value == null);
  }

  Future<ArrayBuffer> getCameraFrameData() async {
    final result = await $$context$$?.callMethod('getCameraFrameData', []);

    return ArrayBuffer($$context$$: result);
  }

  Future<void> onMessage(WorkerOnMessageCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(WorkerOnMessageListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onMessage', [listener]);
    return result;
  }

  Future<void> onProcessKilled(OnProcessKilledCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onProcessKilled', [listener]);
    return result;
  }

  Future<void> postMessage(IAnyObject message) async {
    final result =
        await $$context$$?.callMethod('postMessage', [message.toJson()]);
    return result;
  }

  Future<void> terminate() async {
    final result = await $$context$$?.callMethod('terminate', []);
    return result;
  }

  Future<void> testOnProcessKilled() async {
    final result = await $$context$$?.callMethod('testOnProcessKilled', []);
    return result;
  }
}

class WorkerEnv {
  mpjs.JsObject? $$context$$;

  String $USER_DATA_PATH = "";

  Future<String> get USER_DATA_PATH async {
    return await $$context$$?.getPropertyValue('USER_DATA_PATH') ??
        $USER_DATA_PATH;
  }

  WorkerEnv({this.$$context$$});

  void setValues({String? USER_DATA_PATH}) {
    if (USER_DATA_PATH != null) $USER_DATA_PATH = USER_DATA_PATH;
  }

  Map toJson() {
    return {'USER_DATA_PATH': $USER_DATA_PATH}
      ..removeWhere((key, value) => value == null);
  }
}

class WorkerOnMessageListenerResult {
  mpjs.JsObject? $$context$$;

  IAnyObject $message = IAnyObject();

  Future<IAnyObject> get message async {
    return IAnyObject($$context$$: $$context$$?.getProperty('message'));
  }

  WorkerOnMessageListenerResult({this.$$context$$});

  void setValues({IAnyObject? message}) {
    if (message != null) $message = message;
  }

  Map toJson() {
    return {'message': $message}..removeWhere((key, value) => value == null);
  }
}

class WriteBLECharacteristicValueOption {
  mpjs.JsObject? $$context$$;

  String $characteristicId = "";

  Future<String> get characteristicId async {
    return await $$context$$?.getPropertyValue('characteristicId') ??
        $characteristicId;
  }

  String $deviceId = "";

  Future<String> get deviceId async {
    return await $$context$$?.getPropertyValue('deviceId') ?? $deviceId;
  }

  String $serviceId = "";

  Future<String> get serviceId async {
    return await $$context$$?.getPropertyValue('serviceId') ?? $serviceId;
  }

  ArrayBuffer $value = ArrayBuffer();

  Future<ArrayBuffer> get value async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('value'));
  }

  WriteBLECharacteristicValueCompleteCallback? $complete;

  Future<WriteBLECharacteristicValueCompleteCallback?> get complete async {
    return $complete;
  }

  WriteBLECharacteristicValueFailCallback? $fail;

  Future<WriteBLECharacteristicValueFailCallback?> get fail async {
    return $fail;
  }

  WriteBLECharacteristicValueSuccessCallback? $success;

  Future<WriteBLECharacteristicValueSuccessCallback?> get success async {
    return $success;
  }

  dynamic $writeType;

  Future<dynamic> get writeType async {
    return await $$context$$?.getPropertyValue('writeType') ?? $writeType;
  }

  WriteBLECharacteristicValueOption({this.$$context$$});

  void setValues(
      {String? characteristicId,
      String? deviceId,
      String? serviceId,
      ArrayBuffer? value,
      WriteBLECharacteristicValueCompleteCallback? complete,
      WriteBLECharacteristicValueFailCallback? fail,
      WriteBLECharacteristicValueSuccessCallback? success,
      dynamic writeType}) {
    if (characteristicId != null) $characteristicId = characteristicId;
    if (deviceId != null) $deviceId = deviceId;
    if (serviceId != null) $serviceId = serviceId;
    if (value != null) $value = value;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
    if (writeType != null) $writeType = writeType;
  }

  Map toJson() {
    return {
      'characteristicId': $characteristicId,
      'deviceId': $deviceId,
      'serviceId': $serviceId,
      'value': $value,
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => BluetoothError($$context$$: e)])
          : null,
      'writeType': $writeType
    }..removeWhere((key, value) => value == null);
  }
}

class WriteCharacteristicValueObject {
  mpjs.JsObject? $$context$$;

  String $characteristicId = "";

  Future<String> get characteristicId async {
    return await $$context$$?.getPropertyValue('characteristicId') ??
        $characteristicId;
  }

  bool $needNotify = false;

  Future<bool> get needNotify async {
    return await $$context$$?.getPropertyValue('needNotify') ?? $needNotify;
  }

  String $serviceId = "";

  Future<String> get serviceId async {
    return await $$context$$?.getPropertyValue('serviceId') ?? $serviceId;
  }

  ArrayBuffer $value = ArrayBuffer();

  Future<ArrayBuffer> get value async {
    return ArrayBuffer($$context$$: $$context$$?.getProperty('value'));
  }

  num? $callbackId;

  Future<num?> get callbackId async {
    return await $$context$$?.getPropertyValue('callbackId') ?? $callbackId;
  }

  WriteCharacteristicValueCompleteCallback? $complete;

  Future<WriteCharacteristicValueCompleteCallback?> get complete async {
    return $complete;
  }

  WriteCharacteristicValueFailCallback? $fail;

  Future<WriteCharacteristicValueFailCallback?> get fail async {
    return $fail;
  }

  WriteCharacteristicValueSuccessCallback? $success;

  Future<WriteCharacteristicValueSuccessCallback?> get success async {
    return $success;
  }

  WriteCharacteristicValueObject({this.$$context$$});

  void setValues(
      {String? characteristicId,
      bool? needNotify,
      String? serviceId,
      ArrayBuffer? value,
      num? callbackId,
      WriteCharacteristicValueCompleteCallback? complete,
      WriteCharacteristicValueFailCallback? fail,
      WriteCharacteristicValueSuccessCallback? success}) {
    if (characteristicId != null) $characteristicId = characteristicId;
    if (needNotify != null) $needNotify = needNotify;
    if (serviceId != null) $serviceId = serviceId;
    if (value != null) $value = value;
    if (callbackId != null) $callbackId = callbackId;
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'characteristicId': $characteristicId,
      'needNotify': $needNotify,
      'serviceId': $serviceId,
      'value': $value,
      'callbackId': $callbackId,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class WriteFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  WriteFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class WriteFileFailCallbackResult {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  WriteFileFailCallbackResult({this.$$context$$});

  void setValues({String? errMsg}) {
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'errMsg': $errMsg}..removeWhere((key, value) => value == null);
  }
}

class WriteFileOption {
  mpjs.JsObject? $$context$$;

  dynamic $data;

  Future<dynamic> get data async {
    return await $$context$$?.getPropertyValue('data') ?? $data;
  }

  String $filePath = "";

  Future<String> get filePath async {
    return await $$context$$?.getPropertyValue('filePath') ?? $filePath;
  }

  WriteFileCompleteCallback? $complete;

  Future<WriteFileCompleteCallback?> get complete async {
    return $complete;
  }

  dynamic $encoding;

  Future<dynamic> get encoding async {
    return await $$context$$?.getPropertyValue('encoding') ?? $encoding;
  }

  WriteFileFailCallback? $fail;

  Future<WriteFileFailCallback?> get fail async {
    return $fail;
  }

  WriteFileSuccessCallback? $success;

  Future<WriteFileSuccessCallback?> get success async {
    return $success;
  }

  WriteFileOption({this.$$context$$});

  void setValues(
      {dynamic data,
      String? filePath,
      WriteFileCompleteCallback? complete,
      dynamic encoding,
      WriteFileFailCallback? fail,
      WriteFileSuccessCallback? success}) {
    if (data != null) $data = data;
    if (filePath != null) $filePath = filePath;
    if (complete != null) $complete = complete;
    if (encoding != null) $encoding = encoding;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'data': $data,
      'filePath': $filePath,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'encoding': $encoding,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => WriteFileFailCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class WriteNdefMessageOption {
  mpjs.JsObject? $$context$$;

  WriteNdefMessageCompleteCallback? $complete;

  Future<WriteNdefMessageCompleteCallback?> get complete async {
    return $complete;
  }

  WriteNdefMessageFailCallback? $fail;

  Future<WriteNdefMessageFailCallback?> get fail async {
    return $fail;
  }

  List<dynamic>? $records;

  Future<List<dynamic>?> get records async {
    return await $$context$$?.getPropertyValue('records') ?? $records;
  }

  WriteNdefMessageSuccessCallback? $success;

  Future<WriteNdefMessageSuccessCallback?> get success async {
    return $success;
  }

  List<dynamic>? $texts;

  Future<List<dynamic>?> get texts async {
    return await $$context$$?.getPropertyValue('texts') ?? $texts;
  }

  List<dynamic>? $uris;

  Future<List<dynamic>?> get uris async {
    return await $$context$$?.getPropertyValue('uris') ?? $uris;
  }

  WriteNdefMessageOption({this.$$context$$});

  void setValues(
      {WriteNdefMessageCompleteCallback? complete,
      WriteNdefMessageFailCallback? fail,
      List<dynamic>? records,
      WriteNdefMessageSuccessCallback? success,
      List<dynamic>? texts,
      List<dynamic>? uris}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (records != null) $records = records;
    if (success != null) $success = success;
    if (texts != null) $texts = texts;
    if (uris != null) $uris = uris;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction($complete!, [(e) => Nfcrwerror($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction($fail!, [(e) => Nfcrwerror($$context$$: e)])
          : null,
      'records': $records,
      'success': $success != null
          ? mpjs.JsFunction($success!, [(e) => Nfcrwerror($$context$$: e)])
          : null,
      'texts': $texts,
      'uris': $uris
    }..removeWhere((key, value) => value == null);
  }
}

class WriteOption {
  mpjs.JsObject? $$context$$;

  dynamic $data;

  Future<dynamic> get data async {
    return await $$context$$?.getPropertyValue('data') ?? $data;
  }

  String $fd = "";

  Future<String> get fd async {
    return await $$context$$?.getPropertyValue('fd') ?? $fd;
  }

  WriteCompleteCallback? $complete;

  Future<WriteCompleteCallback?> get complete async {
    return $complete;
  }

  dynamic $encoding;

  Future<dynamic> get encoding async {
    return await $$context$$?.getPropertyValue('encoding') ?? $encoding;
  }

  WriteFailCallback? $fail;

  Future<WriteFailCallback?> get fail async {
    return $fail;
  }

  num? $length;

  Future<num?> get length async {
    return await $$context$$?.getPropertyValue('length') ?? $length;
  }

  num? $offset;

  Future<num?> get offset async {
    return await $$context$$?.getPropertyValue('offset') ?? $offset;
  }

  num? $position;

  Future<num?> get position async {
    return await $$context$$?.getPropertyValue('position') ?? $position;
  }

  WriteSuccessCallback? $success;

  Future<WriteSuccessCallback?> get success async {
    return $success;
  }

  WriteOption({this.$$context$$});

  void setValues(
      {dynamic data,
      String? fd,
      WriteCompleteCallback? complete,
      dynamic encoding,
      WriteFailCallback? fail,
      num? length,
      num? offset,
      num? position,
      WriteSuccessCallback? success}) {
    if (data != null) $data = data;
    if (fd != null) $fd = fd;
    if (complete != null) $complete = complete;
    if (encoding != null) $encoding = encoding;
    if (fail != null) $fail = fail;
    if (length != null) $length = length;
    if (offset != null) $offset = offset;
    if (position != null) $position = position;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'data': $data,
      'fd': $fd,
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'encoding': $encoding,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => WriteFailCallbackResult($$context$$: e)])
          : null,
      'length': $length,
      'offset': $offset,
      'position': $position,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => WriteSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class WriteResult {
  mpjs.JsObject? $$context$$;

  num $bytesWritten = 0;

  Future<num> get bytesWritten async {
    return await $$context$$?.getPropertyValue('bytesWritten') ?? $bytesWritten;
  }

  WriteResult({this.$$context$$});

  void setValues({num? bytesWritten}) {
    if (bytesWritten != null) $bytesWritten = bytesWritten;
  }

  Map toJson() {
    return {'bytesWritten': $bytesWritten}
      ..removeWhere((key, value) => value == null);
  }
}

class WriteSuccessCallbackResult {
  mpjs.JsObject? $$context$$;

  num $bytesWritten = 0;

  Future<num> get bytesWritten async {
    return await $$context$$?.getPropertyValue('bytesWritten') ?? $bytesWritten;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  WriteSuccessCallbackResult({this.$$context$$});

  void setValues({num? bytesWritten, String? errMsg}) {
    if (bytesWritten != null) $bytesWritten = bytesWritten;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'bytesWritten': $bytesWritten, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class WriteSyncOption {
  mpjs.JsObject? $$context$$;

  dynamic $data;

  Future<dynamic> get data async {
    return await $$context$$?.getPropertyValue('data') ?? $data;
  }

  String $fd = "";

  Future<String> get fd async {
    return await $$context$$?.getPropertyValue('fd') ?? $fd;
  }

  dynamic $encoding;

  Future<dynamic> get encoding async {
    return await $$context$$?.getPropertyValue('encoding') ?? $encoding;
  }

  num? $length;

  Future<num?> get length async {
    return await $$context$$?.getPropertyValue('length') ?? $length;
  }

  num? $offset;

  Future<num?> get offset async {
    return await $$context$$?.getPropertyValue('offset') ?? $offset;
  }

  num? $position;

  Future<num?> get position async {
    return await $$context$$?.getPropertyValue('position') ?? $position;
  }

  WriteSyncOption({this.$$context$$});

  void setValues(
      {dynamic data,
      String? fd,
      dynamic encoding,
      num? length,
      num? offset,
      num? position}) {
    if (data != null) $data = data;
    if (fd != null) $fd = fd;
    if (encoding != null) $encoding = encoding;
    if (length != null) $length = length;
    if (offset != null) $offset = offset;
    if (position != null) $position = position;
  }

  Map toJson() {
    return {
      'data': $data,
      'fd': $fd,
      'encoding': $encoding,
      'length': $length,
      'offset': $offset,
      'position': $position
    }..removeWhere((key, value) => value == null);
  }
}

class WxStartRecordOption {
  mpjs.JsObject? $$context$$;

  StartRecordCompleteCallback? $complete;

  Future<StartRecordCompleteCallback?> get complete async {
    return $complete;
  }

  StartRecordFailCallback? $fail;

  Future<StartRecordFailCallback?> get fail async {
    return $fail;
  }

  WxStartRecordSuccessCallback? $success;

  Future<WxStartRecordSuccessCallback?> get success async {
    return $success;
  }

  WxStartRecordOption({this.$$context$$});

  void setValues(
      {StartRecordCompleteCallback? complete,
      StartRecordFailCallback? fail,
      WxStartRecordSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction($success!,
              [(e) => StartRecordSuccessCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class WxStopRecordOption {
  mpjs.JsObject? $$context$$;

  StopRecordCompleteCallback? $complete;

  Future<StopRecordCompleteCallback?> get complete async {
    return $complete;
  }

  StopRecordFailCallback? $fail;

  Future<StopRecordFailCallback?> get fail async {
    return $fail;
  }

  WxStopRecordSuccessCallback? $success;

  Future<WxStopRecordSuccessCallback?> get success async {
    return $success;
  }

  WxStopRecordOption({this.$$context$$});

  void setValues(
      {StopRecordCompleteCallback? complete,
      StopRecordFailCallback? fail,
      WxStopRecordSuccessCallback? success}) {
    if (complete != null) $complete = complete;
    if (fail != null) $fail = fail;
    if (success != null) $success = success;
  }

  Map toJson() {
    return {
      'complete': $complete != null
          ? mpjs.JsFunction(
              $complete!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'fail': $fail != null
          ? mpjs.JsFunction(
              $fail!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null,
      'success': $success != null
          ? mpjs.JsFunction(
              $success!, [(e) => GeneralCallbackResult($$context$$: e)])
          : null
    }..removeWhere((key, value) => value == null);
  }
}

class WxaSportRecord {
  mpjs.JsObject? $$context$$;

  num $calorie = 0;

  Future<num> get calorie async {
    return await $$context$$?.getPropertyValue('calorie') ?? $calorie;
  }

  num $distance = 0;

  Future<num> get distance async {
    return await $$context$$?.getPropertyValue('distance') ?? $distance;
  }

  num $time = 0;

  Future<num> get time async {
    return await $$context$$?.getPropertyValue('time') ?? $time;
  }

  num $typeId = 0;

  Future<num> get typeId async {
    return await $$context$$?.getPropertyValue('typeId') ?? $typeId;
  }

  WxaSportRecord({this.$$context$$});

  void setValues({num? calorie, num? distance, num? time, num? typeId}) {
    if (calorie != null) $calorie = calorie;
    if (distance != null) $distance = distance;
    if (time != null) $time = time;
    if (typeId != null) $typeId = typeId;
  }

  Map toJson() {
    return {
      'calorie': $calorie,
      'distance': $distance,
      'time': $time,
      'typeId': $typeId
    }..removeWhere((key, value) => value == null);
  }
}

class YUVTextureRes {
  // mpjs.JsObject? $$context$$;

  // WebGLTexture $uvTexture = WebGLTexture();

  // Future<WebGLTexture> get uvTexture async {
  //   return $uvTexture;
  // }

  // WebGLTexture $yTexture = WebGLTexture();

  // Future<WebGLTexture> get yTexture async {
  //   return $yTexture;
  // }

  // YUVTextureRes({this.$$context$$});

  // void setValues({WebGLTexture? uvTexture, WebGLTexture? yTexture}) {
  //   if (uvTexture != null) $uvTexture = uvTexture;
  //   if (yTexture != null) $yTexture = yTexture;
  // }

  // Map toJson() {
  //   return {'uvTexture': $uvTexture, 'yTexture': $yTexture}
  //     ..removeWhere((key, value) => value == null);
  // }
}

class ZipFileItem {
  mpjs.JsObject? $$context$$;

  dynamic $data;

  Future<dynamic> get data async {
    return await $$context$$?.getPropertyValue('data') ?? $data;
  }

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  ZipFileItem({this.$$context$$});

  void setValues({dynamic data, String? errMsg}) {
    if (data != null) $data = data;
    if (errMsg != null) $errMsg = errMsg;
  }

  Map toJson() {
    return {'data': $data, 'errMsg': $errMsg}
      ..removeWhere((key, value) => value == null);
  }
}

class Animation {
  mpjs.JsObject? $$context$$;

  Animation({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<AnimationExportResult> export() async {
    final result = await $$context$$?.callMethod('export', []);

    return AnimationExportResult($$context$$: result);
  }

  Future<Animation> backgroundColor(String value) async {
    final result = await $$context$$?.callMethod('backgroundColor', [value]);

    return Animation($$context$$: result);
  }

  Future<Animation> bottom(dynamic value) async {
    final result = await $$context$$?.callMethod('bottom', [value]);

    return Animation($$context$$: result);
  }

  Future<Animation> height(dynamic value) async {
    final result = await $$context$$?.callMethod('height', [value]);

    return Animation($$context$$: result);
  }

  Future<Animation> left(dynamic value) async {
    final result = await $$context$$?.callMethod('left', [value]);

    return Animation($$context$$: result);
  }

  Future<Animation> matrix() async {
    final result = await $$context$$?.callMethod('matrix', []);

    return Animation($$context$$: result);
  }

  Future<Animation> matrix3d() async {
    final result = await $$context$$?.callMethod('matrix3d', []);

    return Animation($$context$$: result);
  }

  Future<Animation> opacity(num value) async {
    final result = await $$context$$?.callMethod('opacity', [value]);

    return Animation($$context$$: result);
  }

  Future<Animation> right(dynamic value) async {
    final result = await $$context$$?.callMethod('right', [value]);

    return Animation($$context$$: result);
  }

  Future<Animation> rotate(num angle) async {
    final result = await $$context$$?.callMethod('rotate', [angle]);

    return Animation($$context$$: result);
  }

  Future<Animation> rotate3d(num x, num y, num z, num angle) async {
    final result = await $$context$$?.callMethod('rotate3d', [x, y, z, angle]);

    return Animation($$context$$: result);
  }

  Future<Animation> rotateX(num angle) async {
    final result = await $$context$$?.callMethod('rotateX', [angle]);

    return Animation($$context$$: result);
  }

  Future<Animation> rotateY(num angle) async {
    final result = await $$context$$?.callMethod('rotateY', [angle]);

    return Animation($$context$$: result);
  }

  Future<Animation> rotateZ(num angle) async {
    final result = await $$context$$?.callMethod('rotateZ', [angle]);

    return Animation($$context$$: result);
  }

  Future<Animation> scale(num sx, [num? sy]) async {
    final result = await $$context$$?.callMethod('scale', [sx, sy]);

    return Animation($$context$$: result);
  }

  Future<Animation> scale3d(num sx, num sy, num sz) async {
    final result = await $$context$$?.callMethod('scale3d', [sx, sy, sz]);

    return Animation($$context$$: result);
  }

  Future<Animation> scaleX(num scale) async {
    final result = await $$context$$?.callMethod('scaleX', [scale]);

    return Animation($$context$$: result);
  }

  Future<Animation> scaleY(num scale) async {
    final result = await $$context$$?.callMethod('scaleY', [scale]);

    return Animation($$context$$: result);
  }

  Future<Animation> scaleZ(num scale) async {
    final result = await $$context$$?.callMethod('scaleZ', [scale]);

    return Animation($$context$$: result);
  }

  Future<Animation> skew(num ax, num ay) async {
    final result = await $$context$$?.callMethod('skew', [ax, ay]);

    return Animation($$context$$: result);
  }

  Future<Animation> skewX(num angle) async {
    final result = await $$context$$?.callMethod('skewX', [angle]);

    return Animation($$context$$: result);
  }

  Future<Animation> skewY(num angle) async {
    final result = await $$context$$?.callMethod('skewY', [angle]);

    return Animation($$context$$: result);
  }

  Future<Animation> step([StepOption? option]) async {
    final result = await $$context$$?.callMethod('step', [option?.toJson()]);

    return Animation($$context$$: result);
  }

  Future<Animation> top(dynamic value) async {
    final result = await $$context$$?.callMethod('top', [value]);

    return Animation($$context$$: result);
  }

  Future<Animation> translate([num? tx, num? ty]) async {
    final result = await $$context$$?.callMethod('translate', [tx, ty]);

    return Animation($$context$$: result);
  }

  Future<Animation> translate3d([num? tx, num? ty, num? tz]) async {
    final result = await $$context$$?.callMethod('translate3d', [tx, ty, tz]);

    return Animation($$context$$: result);
  }

  Future<Animation> translateX(num translation) async {
    final result = await $$context$$?.callMethod('translateX', [translation]);

    return Animation($$context$$: result);
  }

  Future<Animation> translateY(num translation) async {
    final result = await $$context$$?.callMethod('translateY', [translation]);

    return Animation($$context$$: result);
  }

  Future<Animation> translateZ(num translation) async {
    final result = await $$context$$?.callMethod('translateZ', [translation]);

    return Animation($$context$$: result);
  }

  Future<Animation> width(dynamic value) async {
    final result = await $$context$$?.callMethod('width', [value]);

    return Animation($$context$$: result);
  }
}

class AudioContext {
  mpjs.JsObject? $$context$$;

  AudioContext({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> pause() async {
    final result = await $$context$$?.callMethod('pause', []);
    return result;
  }

  Future<void> play() async {
    final result = await $$context$$?.callMethod('play', []);
    return result;
  }

  Future<void> seek(num position) async {
    final result = await $$context$$?.callMethod('seek', [position]);
    return result;
  }

  Future<void> setSrc(String src) async {
    final result = await $$context$$?.callMethod('setSrc', [src]);
    return result;
  }
}

class BLEPeripheralServer {
  mpjs.JsObject? $$context$$;

  BLEPeripheralServer({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> addService(AddServiceOption option) async {
    final result =
        await $$context$$?.callMethod('addService', [option.toJson()]);
    return result;
  }

  Future<void> close([BLEPeripheralServerCloseOption? option]) async {
    final result = await $$context$$?.callMethod('close', [option?.toJson()]);
    return result;
  }

  Future<void> offCharacteristicReadRequest(
      [OffCharacteristicReadRequestCallback? listener]) async {
    final result = await $$context$$
        ?.callMethod('offCharacteristicReadRequest', [listener]);
    return result;
  }

  Future<void> offCharacteristicSubscribed(
      [OffCharacteristicSubscribedCallback? listener]) async {
    final result = await $$context$$
        ?.callMethod('offCharacteristicSubscribed', [listener]);
    return result;
  }

  Future<void> offCharacteristicUnsubscribed(
      [OffCharacteristicUnsubscribedCallback? listener]) async {
    final result = await $$context$$
        ?.callMethod('offCharacteristicUnsubscribed', [listener]);
    return result;
  }

  Future<void> offCharacteristicWriteRequest(
      [OffCharacteristicWriteRequestCallback? listener]) async {
    final result = await $$context$$
        ?.callMethod('offCharacteristicWriteRequest', [listener]);
    return result;
  }

  Future<void> onCharacteristicReadRequest(
      OnCharacteristicReadRequestCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnCharacteristicReadRequestListenerResult($$context$$: obj));
    });
    final result = await $$context$$
        ?.callMethod('onCharacteristicReadRequest', [listener]);
    return result;
  }

  Future<void> onCharacteristicSubscribed(
      OnCharacteristicSubscribedCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnCharacteristicSubscribedListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onCharacteristicSubscribed', [listener]);
    return result;
  }

  Future<void> onCharacteristicUnsubscribed(
      OnCharacteristicUnsubscribedCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnCharacteristicSubscribedListenerResult($$context$$: obj));
    });
    final result = await $$context$$
        ?.callMethod('onCharacteristicUnsubscribed', [listener]);
    return result;
  }

  Future<void> onCharacteristicWriteRequest(
      OnCharacteristicWriteRequestCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnCharacteristicWriteRequestListenerResult($$context$$: obj));
    });
    final result = await $$context$$
        ?.callMethod('onCharacteristicWriteRequest', [listener]);
    return result;
  }

  Future<void> removeService(RemoveServiceOption option) async {
    final result =
        await $$context$$?.callMethod('removeService', [option.toJson()]);
    return result;
  }

  Future<void> startAdvertising(StartAdvertisingObject Object) async {
    final result =
        await $$context$$?.callMethod('startAdvertising', [Object.toJson()]);
    return result;
  }

  Future<void> stopAdvertising([StopAdvertisingOption? option]) async {
    final result =
        await $$context$$?.callMethod('stopAdvertising', [option?.toJson()]);
    return result;
  }

  Future<void> writeCharacteristicValue(
      WriteCharacteristicValueObject Object) async {
    final result = await $$context$$
        ?.callMethod('writeCharacteristicValue', [Object.toJson()]);
    return result;
  }
}

class BackgroundAudioError {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  num $errCode = 0;

  Future<num> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  BackgroundAudioError({this.$$context$$});

  void setValues({String? errMsg, num? errCode}) {
    if (errMsg != null) $errMsg = errMsg;
    if (errCode != null) $errCode = errCode;
  }

  Map toJson() {
    return {'errMsg': $errMsg, 'errCode': $errCode}
      ..removeWhere((key, value) => value == null);
  }
}

class BeaconError {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  num $errCode = 0;

  Future<num> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  BeaconError({this.$$context$$});

  void setValues({String? errMsg, num? errCode}) {
    if (errMsg != null) $errMsg = errMsg;
    if (errCode != null) $errCode = errCode;
  }

  Map toJson() {
    return {'errMsg': $errMsg, 'errCode': $errCode}
      ..removeWhere((key, value) => value == null);
  }
}

class BluetoothError {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  num $errCode = 0;

  Future<num> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  BluetoothError({this.$$context$$});

  void setValues({String? errMsg, num? errCode}) {
    if (errMsg != null) $errMsg = errMsg;
    if (errCode != null) $errCode = errCode;
  }

  Map toJson() {
    return {'errMsg': $errMsg, 'errCode': $errCode}
      ..removeWhere((key, value) => value == null);
  }
}

class CameraContext {
  mpjs.JsObject? $$context$$;

  CameraContext({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> setZoom(SetZoomOption option) async {
    final result = await $$context$$?.callMethod('setZoom', [option.toJson()]);
    return result;
  }

  Future<void> startRecord(CameraContextStartRecordOption option) async {
    final result =
        await $$context$$?.callMethod('startRecord', [option.toJson()]);
    return result;
  }

  Future<void> stopRecord(CameraContextStopRecordOption option) async {
    final result =
        await $$context$$?.callMethod('stopRecord', [option.toJson()]);
    return result;
  }

  Future<void> takePhoto(TakePhotoOption option) async {
    final result =
        await $$context$$?.callMethod('takePhoto', [option.toJson()]);
    return result;
  }

  Future<CameraFrameListener> onCameraFrame(
      OnCameraFrameCallback callback) async {
    final result = await $$context$$?.callMethod('onCameraFrame', [callback]);

    return CameraFrameListener($$context$$: result);
  }
}

class CameraFrameListener {
  mpjs.JsObject? $$context$$;

  CameraFrameListener({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> start([CameraFrameListenerStartOption? option]) async {
    final result = await $$context$$?.callMethod('start', [option?.toJson()]);
    return result;
  }

  Future<void> stop([StopOption? option]) async {
    final result = await $$context$$?.callMethod('stop', [option?.toJson()]);
    return result;
  }
}

class CanvasGradient {
  mpjs.JsObject? $$context$$;

  CanvasGradient({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> addColorStop(num stop, String color) async {
    final result = await $$context$$?.callMethod('addColorStop', [stop, color]);
    return result;
  }
}

class CloseSyncError {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  num $errCode = 0;

  Future<num> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  CloseSyncError({this.$$context$$});

  void setValues({String? errMsg, num? errCode}) {
    if (errMsg != null) $errMsg = errMsg;
    if (errCode != null) $errCode = errCode;
  }

  Map toJson() {
    return {'errMsg': $errMsg, 'errCode': $errCode}
      ..removeWhere((key, value) => value == null);
  }
}

class Console {
  mpjs.JsObject? $$context$$;

  Console({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> debug(List<dynamic> args) async {
    final result = await $$context$$?.callMethod('debug', [args]);
    return result;
  }

  Future<void> error(List<dynamic> args) async {
    final result = await $$context$$?.callMethod('error', [args]);
    return result;
  }

  Future<void> group([String? label]) async {
    final result = await $$context$$?.callMethod('group', [label]);
    return result;
  }

  Future<void> groupEnd() async {
    final result = await $$context$$?.callMethod('groupEnd', []);
    return result;
  }

  Future<void> info(List<dynamic> args) async {
    final result = await $$context$$?.callMethod('info', [args]);
    return result;
  }

  Future<void> log(List<dynamic> args) async {
    final result = await $$context$$?.callMethod('log', [args]);
    return result;
  }

  Future<void> warn(List<dynamic> args) async {
    final result = await $$context$$?.callMethod('warn', [args]);
    return result;
  }
}

class DownloadTask {
  mpjs.JsObject? $$context$$;

  DownloadTask({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> abort() async {
    final result = await $$context$$?.callMethod('abort', []);
    return result;
  }

  Future<void> offHeadersReceived(
      [OffHeadersReceivedCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offHeadersReceived', [listener]);
    return result;
  }

  Future<void> offProgressUpdate(
      [DownloadTaskOffProgressUpdateCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offProgressUpdate', [listener]);
    return result;
  }

  Future<void> onHeadersReceived(OnHeadersReceivedCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnHeadersReceivedListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onHeadersReceived', [listener]);
    return result;
  }

  Future<void> onProgressUpdate(
      DownloadTaskOnProgressUpdateCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(DownloadTaskOnProgressUpdateListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onProgressUpdate', [listener]);
    return result;
  }
}

class EditorContext {
  mpjs.JsObject? $$context$$;

  EditorContext({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> blur([BlurOption? option]) async {
    final result = await $$context$$?.callMethod('blur', [option?.toJson()]);
    return result;
  }

  Future<void> clear([ClearOption? option]) async {
    final result = await $$context$$?.callMethod('clear', [option?.toJson()]);
    return result;
  }

  Future<void> format(String name, [String? value]) async {
    final result = await $$context$$?.callMethod('format', [name, value]);
    return result;
  }

  Future<void> getContents([GetContentsOption? option]) async {
    final result =
        await $$context$$?.callMethod('getContents', [option?.toJson()]);
    return result;
  }

  Future<void> getSelectionText([GetSelectionTextOption? option]) async {
    final result =
        await $$context$$?.callMethod('getSelectionText', [option?.toJson()]);
    return result;
  }

  Future<void> insertDivider([InsertDividerOption? option]) async {
    final result =
        await $$context$$?.callMethod('insertDivider', [option?.toJson()]);
    return result;
  }

  Future<void> insertImage(InsertImageOption option) async {
    final result =
        await $$context$$?.callMethod('insertImage', [option.toJson()]);
    return result;
  }

  Future<void> insertText(InsertTextOption option) async {
    final result =
        await $$context$$?.callMethod('insertText', [option.toJson()]);
    return result;
  }

  Future<void> redo([RedoOption? option]) async {
    final result = await $$context$$?.callMethod('redo', [option?.toJson()]);
    return result;
  }

  Future<void> removeFormat([RemoveFormatOption? option]) async {
    final result =
        await $$context$$?.callMethod('removeFormat', [option?.toJson()]);
    return result;
  }

  Future<void> scrollIntoView() async {
    final result = await $$context$$?.callMethod('scrollIntoView', []);
    return result;
  }

  Future<void> setContents(SetContentsOption option) async {
    final result =
        await $$context$$?.callMethod('setContents', [option.toJson()]);
    return result;
  }

  Future<void> undo([UndoOption? option]) async {
    final result = await $$context$$?.callMethod('undo', [option?.toJson()]);
    return result;
  }
}

class EntryList {
  mpjs.JsObject? $$context$$;

  EntryList({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<List<PerformanceEntry>> getEntries() async {
    final result = await $$context$$?.callMethod('getEntries', []);
    return result;
  }

  Future<List<PerformanceEntry>> getEntriesByName(String name,
      [String? entryType]) async {
    final result =
        await $$context$$?.callMethod('getEntriesByName', [name, entryType]);
    return result;
  }

  Future<List<PerformanceEntry>> getEntriesByType(String entryType) async {
    final result =
        await $$context$$?.callMethod('getEntriesByType', [entryType]);
    return result;
  }
}

class EventChannel {
  mpjs.JsObject? $$context$$;

  EventChannel({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> emit(String eventName, dynamic args) async {
    final result = await $$context$$?.callMethod('emit', [eventName, args]);
    return result;
  }

  Future<void> off(String eventName, EventCallback fn) async {
    final result = await $$context$$?.callMethod('off', [eventName, fn]);
    return result;
  }

  Future<void> on(String eventName, EventCallback fn) async {
    final result = await $$context$$?.callMethod('on', [eventName, fn]);
    return result;
  }

  Future<void> once(String eventName, EventCallback fn) async {
    final result = await $$context$$?.callMethod('once', [eventName, fn]);
    return result;
  }
}

class FileSystemManager {
  mpjs.JsObject? $$context$$;

  FileSystemManager({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<List<String>> readdirSync(String dirPath) async {
    final result = await $$context$$?.callMethod('readdirSync', [dirPath]);
    return result;
  }

  Future<ArrayBuffer> readCompressedFileSync(
      ReadCompressedFileSyncOption option) async {
    final result = await $$context$$
        ?.callMethod('readCompressedFileSync', [option.toJson()]);

    return ArrayBuffer($$context$$: result);
  }

  Future<void> access(AccessOption option) async {
    final result = await $$context$$?.callMethod('access', [option.toJson()]);
    return result;
  }

  Future<void> accessSync(String path) async {
    final result = await $$context$$?.callMethod('accessSync', [path]);
    return result;
  }

  Future<void> appendFile(AppendFileOption option) async {
    final result =
        await $$context$$?.callMethod('appendFile', [option.toJson()]);
    return result;
  }

  Future<void> appendFileSync(String filePath, dynamic data,
      [dynamic encoding]) async {
    final result = await $$context$$
        ?.callMethod('appendFileSync', [filePath, data, encoding]);
    return result;
  }

  Future<void> close(FileSystemManagerCloseOption option) async {
    final result = await $$context$$?.callMethod('close', [option.toJson()]);
    return result;
  }

  Future<void> copyFile(CopyFileOption option) async {
    final result = await $$context$$?.callMethod('copyFile', [option.toJson()]);
    return result;
  }

  Future<void> copyFileSync(String srcPath, String destPath) async {
    final result =
        await $$context$$?.callMethod('copyFileSync', [srcPath, destPath]);
    return result;
  }

  Future<void> fstat(FstatOption option) async {
    final result = await $$context$$?.callMethod('fstat', [option.toJson()]);
    return result;
  }

  Future<void> ftruncate(FtruncateOption option) async {
    final result =
        await $$context$$?.callMethod('ftruncate', [option.toJson()]);
    return result;
  }

  Future<void> getFileInfo(GetFileInfoOption option) async {
    final result =
        await $$context$$?.callMethod('getFileInfo', [option.toJson()]);
    return result;
  }

  Future<void> getSavedFileList([GetSavedFileListOption? option]) async {
    final result =
        await $$context$$?.callMethod('getSavedFileList', [option?.toJson()]);
    return result;
  }

  Future<void> mkdir(MkdirOption option) async {
    final result = await $$context$$?.callMethod('mkdir', [option.toJson()]);
    return result;
  }

  Future<void> mkdirSync(String dirPath, [bool? recursive]) async {
    final result =
        await $$context$$?.callMethod('mkdirSync', [dirPath, recursive]);
    return result;
  }

  Future<void> open(OpenOption option) async {
    final result = await $$context$$?.callMethod('open', [option.toJson()]);
    return result;
  }

  Future<void> read(ReadOption option) async {
    final result = await $$context$$?.callMethod('read', [option.toJson()]);
    return result;
  }

  Future<void> readCompressedFile(ReadCompressedFileOption option) async {
    final result =
        await $$context$$?.callMethod('readCompressedFile', [option.toJson()]);
    return result;
  }

  Future<void> readFile(ReadFileOption option) async {
    final result = await $$context$$?.callMethod('readFile', [option.toJson()]);
    return result;
  }

  Future<void> readZipEntry(ReadZipEntryOption option) async {
    final result =
        await $$context$$?.callMethod('readZipEntry', [option.toJson()]);
    return result;
  }

  Future<void> readdir(ReaddirOption option) async {
    final result = await $$context$$?.callMethod('readdir', [option.toJson()]);
    return result;
  }

  Future<void> removeSavedFile(RemoveSavedFileOption option) async {
    final result =
        await $$context$$?.callMethod('removeSavedFile', [option.toJson()]);
    return result;
  }

  Future<void> rename(RenameOption option) async {
    final result = await $$context$$?.callMethod('rename', [option.toJson()]);
    return result;
  }

  Future<void> renameSync(String oldPath, String newPath) async {
    final result =
        await $$context$$?.callMethod('renameSync', [oldPath, newPath]);
    return result;
  }

  Future<void> rmdir(RmdirOption option) async {
    final result = await $$context$$?.callMethod('rmdir', [option.toJson()]);
    return result;
  }

  Future<void> rmdirSync(String dirPath, [bool? recursive]) async {
    final result =
        await $$context$$?.callMethod('rmdirSync', [dirPath, recursive]);
    return result;
  }

  Future<void> saveFile(SaveFileOption option) async {
    final result = await $$context$$?.callMethod('saveFile', [option.toJson()]);
    return result;
  }

  Future<void> stat(StatOption option) async {
    final result = await $$context$$?.callMethod('stat', [option.toJson()]);
    return result;
  }

  Future<void> truncate(TruncateOption option) async {
    final result = await $$context$$?.callMethod('truncate', [option.toJson()]);
    return result;
  }

  Future<void> unlink(UnlinkOption option) async {
    final result = await $$context$$?.callMethod('unlink', [option.toJson()]);
    return result;
  }

  Future<void> unlinkSync(String filePath) async {
    final result = await $$context$$?.callMethod('unlinkSync', [filePath]);
    return result;
  }

  Future<void> unzip(UnzipOption option) async {
    final result = await $$context$$?.callMethod('unzip', [option.toJson()]);
    return result;
  }

  Future<void> write(WriteOption option) async {
    final result = await $$context$$?.callMethod('write', [option.toJson()]);
    return result;
  }

  Future<void> writeFile(WriteFileOption option) async {
    final result =
        await $$context$$?.callMethod('writeFile', [option.toJson()]);
    return result;
  }

  Future<void> writeFileSync(String filePath, dynamic data,
      [dynamic encoding]) async {
    final result = await $$context$$
        ?.callMethod('writeFileSync', [filePath, data, encoding]);
    return result;
  }

  Future<ReadResult> readSync(ReadSyncOption option) async {
    final result = await $$context$$?.callMethod('readSync', [option.toJson()]);

    return ReadResult($$context$$: result);
  }

  Future<Stats> fstatSync(FstatSyncOption option) async {
    final result =
        await $$context$$?.callMethod('fstatSync', [option.toJson()]);

    return Stats($$context$$: result);
  }

  Future<dynamic> statSync(String path, [bool? recursive]) async {
    final result = await $$context$$?.callMethod('statSync', [path, recursive]);
    return result;
  }

  Future<WriteResult> writeSync(WriteSyncOption option) async {
    final result =
        await $$context$$?.callMethod('writeSync', [option.toJson()]);

    return WriteResult($$context$$: result);
  }

  Future<String> openSync(OpenSyncOption option) async {
    final result = await $$context$$?.callMethod('openSync', [option.toJson()]);
    return result;
  }

  Future<String> saveFileSync(String tempFilePath, [String? filePath]) async {
    final result =
        await $$context$$?.callMethod('saveFileSync', [tempFilePath, filePath]);
    return result;
  }

  Future<dynamic> readFileSync(String filePath,
      [dynamic encoding, num? position, num? length]) async {
    final result = await $$context$$
        ?.callMethod('readFileSync', [filePath, encoding, position, length]);
    return result;
  }

  Future<dynamic> closeSync(CloseSyncOption option) async {
    final result =
        await $$context$$?.callMethod('closeSync', [option.toJson()]);
    return result;
  }

  Future<dynamic> ftruncateSync(FtruncateSyncOption option) async {
    final result =
        await $$context$$?.callMethod('ftruncateSync', [option.toJson()]);
    return result;
  }

  Future<dynamic> truncateSync(TruncateSyncOption option) async {
    final result =
        await $$context$$?.callMethod('truncateSync', [option.toJson()]);
    return result;
  }
}

class FstatSyncError {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  num $errCode = 0;

  Future<num> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  FstatSyncError({this.$$context$$});

  void setValues({String? errMsg, num? errCode}) {
    if (errMsg != null) $errMsg = errMsg;
    if (errCode != null) $errCode = errCode;
  }

  Map toJson() {
    return {'errMsg': $errMsg, 'errCode': $errCode}
      ..removeWhere((key, value) => value == null);
  }
}

class FtruncateSyncError {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  num $errCode = 0;

  Future<num> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  FtruncateSyncError({this.$$context$$});

  void setValues({String? errMsg, num? errCode}) {
    if (errMsg != null) $errMsg = errMsg;
    if (errCode != null) $errCode = errCode;
  }

  Map toJson() {
    return {'errMsg': $errMsg, 'errCode': $errCode}
      ..removeWhere((key, value) => value == null);
  }
}

class IntersectionObserver {
  mpjs.JsObject? $$context$$;

  IntersectionObserver({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> disconnect() async {
    final result = await $$context$$?.callMethod('disconnect', []);
    return result;
  }

  Future<void> observe(String targetSelector,
      IntersectionObserverObserveCallback callback) async {
    final result =
        await $$context$$?.callMethod('observe', [targetSelector, callback]);
    return result;
  }

  Future<IntersectionObserver> relativeTo(String selector,
      [Margins? margins]) async {
    final result = await $$context$$
        ?.callMethod('relativeTo', [selector, margins?.toJson()]);

    return IntersectionObserver($$context$$: result);
  }

  Future<IntersectionObserver> relativeToViewport([Margins? margins]) async {
    final result = await $$context$$
        ?.callMethod('relativeToViewport', [margins?.toJson()]);

    return IntersectionObserver($$context$$: result);
  }
}

class InterstitialAd {
  mpjs.JsObject? $$context$$;

  InterstitialAd({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> destroy() async {
    final result = await $$context$$?.callMethod('destroy', []);
    return result;
  }

  Future<void> offClose([UDPSocketOffCloseCallback? listener]) async {
    final result = await $$context$$?.callMethod('offClose', [listener]);
    return result;
  }

  Future<void> offError([InterstitialAdOffErrorCallback? listener]) async {
    final result = await $$context$$?.callMethod('offError', [listener]);
    return result;
  }

  Future<void> offLoad([OffLoadCallback? listener]) async {
    final result = await $$context$$?.callMethod('offLoad', [listener]);
    return result;
  }

  Future<void> onClose(UDPSocketOnCloseCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onClose', [listener]);
    return result;
  }

  Future<void> onError(InterstitialAdOnErrorCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(InterstitialAdOnErrorListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onError', [listener]);
    return result;
  }

  Future<void> onLoad(OnLoadCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onLoad', [listener]);
    return result;
  }

  Future<dynamic> load() async {
    final result = await $$context$$?.callMethod('load', []);
    return result;
  }

  Future<dynamic> show() async {
    final result = await $$context$$?.callMethod('show', []);
    return result;
  }
}

class IsoDep {
  mpjs.JsObject? $$context$$;

  IsoDep({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> close([NdefCloseOption? option]) async {
    final result = await $$context$$?.callMethod('close', [option?.toJson()]);
    return result;
  }

  Future<void> connect([NdefConnectOption? option]) async {
    final result = await $$context$$?.callMethod('connect', [option?.toJson()]);
    return result;
  }

  Future<void> getHistoricalBytes([GetHistoricalBytesOption? option]) async {
    final result =
        await $$context$$?.callMethod('getHistoricalBytes', [option?.toJson()]);
    return result;
  }

  Future<void> getMaxTransceiveLength(
      [GetMaxTransceiveLengthOption? option]) async {
    final result = await $$context$$
        ?.callMethod('getMaxTransceiveLength', [option?.toJson()]);
    return result;
  }

  Future<void> isConnected([IsConnectedOption? option]) async {
    final result =
        await $$context$$?.callMethod('isConnected', [option?.toJson()]);
    return result;
  }

  Future<void> setTimeout(SetTimeoutOption option) async {
    final result =
        await $$context$$?.callMethod('setTimeout', [option.toJson()]);
    return result;
  }

  Future<void> transceive(TransceiveOption option) async {
    final result =
        await $$context$$?.callMethod('transceive', [option.toJson()]);
    return result;
  }
}

class Join1v1ChatError {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  num $errCode = 0;

  Future<num> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  Join1v1ChatError({this.$$context$$});

  void setValues({String? errMsg, num? errCode}) {
    if (errMsg != null) $errMsg = errMsg;
    if (errCode != null) $errCode = errCode;
  }

  Map toJson() {
    return {'errMsg': $errMsg, 'errCode': $errCode}
      ..removeWhere((key, value) => value == null);
  }
}

class JoinVoIPChatError {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  num $errCode = 0;

  Future<num> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  JoinVoIPChatError({this.$$context$$});

  void setValues({String? errMsg, num? errCode}) {
    if (errMsg != null) $errMsg = errMsg;
    if (errCode != null) $errCode = errCode;
  }

  Map toJson() {
    return {'errMsg': $errMsg, 'errCode': $errCode}
      ..removeWhere((key, value) => value == null);
  }
}

class LivePlayerContext {
  mpjs.JsObject? $$context$$;

  LivePlayerContext({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> exitFullScreen([ExitFullScreenOption? option]) async {
    final result =
        await $$context$$?.callMethod('exitFullScreen', [option?.toJson()]);
    return result;
  }

  Future<void> exitPictureInPicture(
      [ExitPictureInPictureOption? option]) async {
    final result = await $$context$$
        ?.callMethod('exitPictureInPicture', [option?.toJson()]);
    return result;
  }

  Future<void> mute([MuteOption? option]) async {
    final result = await $$context$$?.callMethod('mute', [option?.toJson()]);
    return result;
  }

  Future<void> pause([PauseOption? option]) async {
    final result = await $$context$$?.callMethod('pause', [option?.toJson()]);
    return result;
  }

  Future<void> play([PlayOption? option]) async {
    final result = await $$context$$?.callMethod('play', [option?.toJson()]);
    return result;
  }

  Future<void> requestFullScreen(
      LivePlayerContextRequestFullScreenOption option) async {
    final result =
        await $$context$$?.callMethod('requestFullScreen', [option.toJson()]);
    return result;
  }

  Future<void> requestPictureInPicture(
      [RequestPictureInPictureOption? option]) async {
    final result = await $$context$$
        ?.callMethod('requestPictureInPicture', [option?.toJson()]);
    return result;
  }

  Future<void> resume([ResumeOption? option]) async {
    final result = await $$context$$?.callMethod('resume', [option?.toJson()]);
    return result;
  }

  Future<void> snapshot(LivePlayerContextSnapshotOption option) async {
    final result = await $$context$$?.callMethod('snapshot', [option.toJson()]);
    return result;
  }

  Future<void> stop([StopOption? option]) async {
    final result = await $$context$$?.callMethod('stop', [option?.toJson()]);
    return result;
  }
}

class LivePusherContext {
  mpjs.JsObject? $$context$$;

  LivePusherContext({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> applyBlusherStickMakeup(
      ApplyBlusherStickMakeupOption option) async {
    final result = await $$context$$
        ?.callMethod('applyBlusherStickMakeup', [option.toJson()]);
    return result;
  }

  Future<void> applyEyeBrowMakeup(ApplyEyeBrowMakeupOption option) async {
    final result =
        await $$context$$?.callMethod('applyEyeBrowMakeup', [option.toJson()]);
    return result;
  }

  Future<void> applyEyeShadowMakeup(ApplyEyeShadowMakeupOption option) async {
    final result = await $$context$$
        ?.callMethod('applyEyeShadowMakeup', [option.toJson()]);
    return result;
  }

  Future<void> applyFaceContourMakeup(
      ApplyFaceContourMakeupOption option) async {
    final result = await $$context$$
        ?.callMethod('applyFaceContourMakeup', [option.toJson()]);
    return result;
  }

  Future<void> applyFilter(ApplyFilterOption option) async {
    final result =
        await $$context$$?.callMethod('applyFilter', [option.toJson()]);
    return result;
  }

  Future<void> applyLipStickMakeup(ApplyLipStickMakeupOption option) async {
    final result =
        await $$context$$?.callMethod('applyLipStickMakeup', [option.toJson()]);
    return result;
  }

  Future<void> applySticker(ApplyStickerOption option) async {
    final result =
        await $$context$$?.callMethod('applySticker', [option.toJson()]);
    return result;
  }

  Future<void> clearFilters([ClearFiltersOption? option]) async {
    final result =
        await $$context$$?.callMethod('clearFilters', [option?.toJson()]);
    return result;
  }

  Future<void> clearMakeups([ClearMakeupsOption? option]) async {
    final result =
        await $$context$$?.callMethod('clearMakeups', [option?.toJson()]);
    return result;
  }

  Future<void> clearStickers([ClearStickersOption? option]) async {
    final result =
        await $$context$$?.callMethod('clearStickers', [option?.toJson()]);
    return result;
  }

  Future<void> createOffscreenCanvas(IAnyObject options) async {
    final result = await $$context$$
        ?.callMethod('createOffscreenCanvas', [options.toJson()]);
    return result;
  }

  Future<void> exitPictureInPicture(
      [ExitPictureInPictureOption? option]) async {
    final result = await $$context$$
        ?.callMethod('exitPictureInPicture', [option?.toJson()]);
    return result;
  }

  Future<void> onCustomRendererEvent(
      dynamic event, CustomRendererFrameEventCallback callback) async {
    final result = await $$context$$
        ?.callMethod('onCustomRendererEvent', [event, callback]);
    return result;
  }

  Future<void> pause([PauseOption? option]) async {
    final result = await $$context$$?.callMethod('pause', [option?.toJson()]);
    return result;
  }

  Future<void> pauseBGM([PauseBGMOption? option]) async {
    final result =
        await $$context$$?.callMethod('pauseBGM', [option?.toJson()]);
    return result;
  }

  Future<void> playBGM(PlayBGMOption option) async {
    final result = await $$context$$?.callMethod('playBGM', [option.toJson()]);
    return result;
  }

  Future<void> resume([ResumeOption? option]) async {
    final result = await $$context$$?.callMethod('resume', [option?.toJson()]);
    return result;
  }

  Future<void> resumeBGM([ResumeBGMOption? option]) async {
    final result =
        await $$context$$?.callMethod('resumeBGM', [option?.toJson()]);
    return result;
  }

  Future<void> sendMessage(SendMessageOption option) async {
    final result =
        await $$context$$?.callMethod('sendMessage', [option.toJson()]);
    return result;
  }

  Future<void> setBGMVolume(SetBGMVolumeOption option) async {
    final result =
        await $$context$$?.callMethod('setBGMVolume', [option.toJson()]);
    return result;
  }

  Future<void> setMICVolume(SetMICVolumeOption option) async {
    final result =
        await $$context$$?.callMethod('setMICVolume', [option.toJson()]);
    return result;
  }

  Future<void> snapshot(LivePusherContextSnapshotOption option) async {
    final result = await $$context$$?.callMethod('snapshot', [option.toJson()]);
    return result;
  }

  Future<void> start([LivePusherContextStartOption? option]) async {
    final result = await $$context$$?.callMethod('start', [option?.toJson()]);
    return result;
  }

  Future<void> startPreview([StartPreviewOption? option]) async {
    final result =
        await $$context$$?.callMethod('startPreview', [option?.toJson()]);
    return result;
  }

  Future<void> stop([StopOption? option]) async {
    final result = await $$context$$?.callMethod('stop', [option?.toJson()]);
    return result;
  }

  Future<void> stopBGM([StopBGMOption? option]) async {
    final result = await $$context$$?.callMethod('stopBGM', [option?.toJson()]);
    return result;
  }

  Future<void> stopPreview([StopPreviewOption? option]) async {
    final result =
        await $$context$$?.callMethod('stopPreview', [option?.toJson()]);
    return result;
  }

  Future<void> switchCamera([SwitchCameraOption? option]) async {
    final result =
        await $$context$$?.callMethod('switchCamera', [option?.toJson()]);
    return result;
  }

  Future<void> toggleTorch([ToggleTorchOption? option]) async {
    final result =
        await $$context$$?.callMethod('toggleTorch', [option?.toJson()]);
    return result;
  }
}

class LogManager {
  mpjs.JsObject? $$context$$;

  LogManager({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> debug(List<dynamic> args) async {
    final result = await $$context$$?.callMethod('debug', [args]);
    return result;
  }

  Future<void> info(List<dynamic> args) async {
    final result = await $$context$$?.callMethod('info', [args]);
    return result;
  }

  Future<void> log(List<dynamic> args) async {
    final result = await $$context$$?.callMethod('log', [args]);
    return result;
  }

  Future<void> warn(List<dynamic> args) async {
    final result = await $$context$$?.callMethod('warn', [args]);
    return result;
  }
}

class MapContext {
  mpjs.JsObject? $$context$$;

  MapContext({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> addArc(AddArcOption option) async {
    final result = await $$context$$?.callMethod('addArc', [option.toJson()]);
    return result;
  }

  Future<void> addCustomLayer(AddCustomLayerOption option) async {
    final result =
        await $$context$$?.callMethod('addCustomLayer', [option.toJson()]);
    return result;
  }

  Future<void> addGroundOverlay(AddGroundOverlayOption option) async {
    final result =
        await $$context$$?.callMethod('addGroundOverlay', [option.toJson()]);
    return result;
  }

  Future<void> addMarkers(AddMarkersOption option) async {
    final result =
        await $$context$$?.callMethod('addMarkers', [option.toJson()]);
    return result;
  }

  Future<void> addVisualLayer(AddVisualLayerOption option) async {
    final result =
        await $$context$$?.callMethod('addVisualLayer', [option.toJson()]);
    return result;
  }

  Future<void> executeVisualLayerCommand(
      ExecuteVisualLayerCommandOption option) async {
    final result = await $$context$$
        ?.callMethod('executeVisualLayerCommand', [option.toJson()]);
    return result;
  }

  Future<void> fromScreenLocation(FromScreenLocationOption option) async {
    final result =
        await $$context$$?.callMethod('fromScreenLocation', [option.toJson()]);
    return result;
  }

  Future<void> getCenterLocation(GetCenterLocationOption option) async {
    final result =
        await $$context$$?.callMethod('getCenterLocation', [option.toJson()]);
    return result;
  }

  Future<void> getRegion([GetRegionOption? option]) async {
    final result =
        await $$context$$?.callMethod('getRegion', [option?.toJson()]);
    return result;
  }

  Future<void> getRotate([GetRotateOption? option]) async {
    final result =
        await $$context$$?.callMethod('getRotate', [option?.toJson()]);
    return result;
  }

  Future<void> getScale([GetScaleOption? option]) async {
    final result =
        await $$context$$?.callMethod('getScale', [option?.toJson()]);
    return result;
  }

  Future<void> getSkew([GetSkewOption? option]) async {
    final result = await $$context$$?.callMethod('getSkew', [option?.toJson()]);
    return result;
  }

  Future<void> includePoints(IncludePointsOption option) async {
    final result =
        await $$context$$?.callMethod('includePoints', [option.toJson()]);
    return result;
  }

  Future<void> initMarkerCluster(InitMarkerClusterOption option) async {
    final result =
        await $$context$$?.callMethod('initMarkerCluster', [option.toJson()]);
    return result;
  }

  Future<void> moveAlong(MoveAlongOption option) async {
    final result =
        await $$context$$?.callMethod('moveAlong', [option.toJson()]);
    return result;
  }

  Future<void> moveToLocation([MoveToLocationOption? option]) async {
    final result =
        await $$context$$?.callMethod('moveToLocation', [option?.toJson()]);
    return result;
  }

  Future<void> on(dynamic event, dynamic callback) async {
    final result = await $$context$$?.callMethod('on', [event, callback]);
    return result;
  }

  Future<void> openMapApp(OpenMapAppOption option) async {
    final result =
        await $$context$$?.callMethod('openMapApp', [option.toJson()]);
    return result;
  }

  Future<void> removeArc(RemoveArcOption option) async {
    final result =
        await $$context$$?.callMethod('removeArc', [option.toJson()]);
    return result;
  }

  Future<void> removeCustomLayer(RemoveCustomLayerOption option) async {
    final result =
        await $$context$$?.callMethod('removeCustomLayer', [option.toJson()]);
    return result;
  }

  Future<void> removeGroundOverlay(RemoveGroundOverlayOption option) async {
    final result =
        await $$context$$?.callMethod('removeGroundOverlay', [option.toJson()]);
    return result;
  }

  Future<void> removeMarkers(RemoveMarkersOption option) async {
    final result =
        await $$context$$?.callMethod('removeMarkers', [option.toJson()]);
    return result;
  }

  Future<void> removeVisualLayer(RemoveVisualLayerOption option) async {
    final result =
        await $$context$$?.callMethod('removeVisualLayer', [option.toJson()]);
    return result;
  }

  Future<void> setBoundary(SetBoundaryOption option) async {
    final result =
        await $$context$$?.callMethod('setBoundary', [option.toJson()]);
    return result;
  }

  Future<void> setCenterOffset(SetCenterOffsetOption option) async {
    final result =
        await $$context$$?.callMethod('setCenterOffset', [option.toJson()]);
    return result;
  }

  Future<void> setLocMarkerIcon(SetLocMarkerIconOption option) async {
    final result =
        await $$context$$?.callMethod('setLocMarkerIcon', [option.toJson()]);
    return result;
  }

  Future<void> toScreenLocation(ToScreenLocationOption option) async {
    final result =
        await $$context$$?.callMethod('toScreenLocation', [option.toJson()]);
    return result;
  }

  Future<void> translateMarker(TranslateMarkerOption option) async {
    final result =
        await $$context$$?.callMethod('translateMarker', [option.toJson()]);
    return result;
  }

  Future<void> updateGroundOverlay(UpdateGroundOverlayOption option) async {
    final result =
        await $$context$$?.callMethod('updateGroundOverlay', [option.toJson()]);
    return result;
  }
}

class MediaContainer {
  mpjs.JsObject? $$context$$;

  MediaContainer({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> addTrack(MediaTrack track) async {
    final result = await $$context$$?.callMethod('addTrack', [track.toJson()]);
    return result;
  }

  Future<void> destroy() async {
    final result = await $$context$$?.callMethod('destroy', []);
    return result;
  }

  Future<void> export() async {
    final result = await $$context$$?.callMethod('export', []);
    return result;
  }

  Future<void> extractDataSource(ExtractDataSourceOption option) async {
    final result =
        await $$context$$?.callMethod('extractDataSource', [option.toJson()]);
    return result;
  }

  Future<void> removeTrack(MediaTrack track) async {
    final result =
        await $$context$$?.callMethod('removeTrack', [track.toJson()]);
    return result;
  }
}

class MediaQueryObserver {
  mpjs.JsObject? $$context$$;

  MediaQueryObserver({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> disconnect() async {
    final result = await $$context$$?.callMethod('disconnect', []);
    return result;
  }

  Future<void> observe(ObserveDescriptor descriptor,
      MediaQueryObserverObserveCallback callback) async {
    final result = await $$context$$
        ?.callMethod('observe', [descriptor.toJson(), callback]);
    return result;
  }
}

class MediaRecorder {
  mpjs.JsObject? $$context$$;

  MediaRecorder({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> off(String eventName, dynamic callback) async {
    final result = await $$context$$?.callMethod('off', [eventName, callback]);
    return result;
  }

  Future<void> on(dynamic eventName, dynamic callback) async {
    final result = await $$context$$?.callMethod('on', [eventName, callback]);
    return result;
  }

  Future<dynamic> destroy() async {
    final result = await $$context$$?.callMethod('destroy', []);
    return result;
  }

  Future<dynamic> pause() async {
    final result = await $$context$$?.callMethod('pause', []);
    return result;
  }

  Future<dynamic> requestFrame(dynamic callback) async {
    final result = await $$context$$?.callMethod('requestFrame', [callback]);
    return result;
  }

  Future<dynamic> resume() async {
    final result = await $$context$$?.callMethod('resume', []);
    return result;
  }

  Future<dynamic> start() async {
    final result = await $$context$$?.callMethod('start', []);
    return result;
  }

  Future<dynamic> stop() async {
    final result = await $$context$$?.callMethod('stop', []);
    return result;
  }
}

class MifareClassic {
  mpjs.JsObject? $$context$$;

  MifareClassic({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> close([NdefCloseOption? option]) async {
    final result = await $$context$$?.callMethod('close', [option?.toJson()]);
    return result;
  }

  Future<void> connect([NdefConnectOption? option]) async {
    final result = await $$context$$?.callMethod('connect', [option?.toJson()]);
    return result;
  }

  Future<void> getMaxTransceiveLength(
      [GetMaxTransceiveLengthOption? option]) async {
    final result = await $$context$$
        ?.callMethod('getMaxTransceiveLength', [option?.toJson()]);
    return result;
  }

  Future<void> isConnected([IsConnectedOption? option]) async {
    final result =
        await $$context$$?.callMethod('isConnected', [option?.toJson()]);
    return result;
  }

  Future<void> setTimeout(SetTimeoutOption option) async {
    final result =
        await $$context$$?.callMethod('setTimeout', [option.toJson()]);
    return result;
  }

  Future<void> transceive(TransceiveOption option) async {
    final result =
        await $$context$$?.callMethod('transceive', [option.toJson()]);
    return result;
  }
}

class MifareUltralight {
  mpjs.JsObject? $$context$$;

  MifareUltralight({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> close([NdefCloseOption? option]) async {
    final result = await $$context$$?.callMethod('close', [option?.toJson()]);
    return result;
  }

  Future<void> connect([NdefConnectOption? option]) async {
    final result = await $$context$$?.callMethod('connect', [option?.toJson()]);
    return result;
  }

  Future<void> getMaxTransceiveLength(
      [GetMaxTransceiveLengthOption? option]) async {
    final result = await $$context$$
        ?.callMethod('getMaxTransceiveLength', [option?.toJson()]);
    return result;
  }

  Future<void> isConnected([IsConnectedOption? option]) async {
    final result =
        await $$context$$?.callMethod('isConnected', [option?.toJson()]);
    return result;
  }

  Future<void> setTimeout(SetTimeoutOption option) async {
    final result =
        await $$context$$?.callMethod('setTimeout', [option.toJson()]);
    return result;
  }

  Future<void> transceive(TransceiveOption option) async {
    final result =
        await $$context$$?.callMethod('transceive', [option.toJson()]);
    return result;
  }
}

class NFCError {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  num $errCode = 0;

  Future<num> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  NFCError({this.$$context$$});

  void setValues({String? errMsg, num? errCode}) {
    if (errMsg != null) $errMsg = errMsg;
    if (errCode != null) $errCode = errCode;
  }

  Map toJson() {
    return {'errMsg': $errMsg, 'errCode': $errCode}
      ..removeWhere((key, value) => value == null);
  }
}

class Ndef {
  mpjs.JsObject? $$context$$;

  Ndef({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> close([NdefCloseOption? option]) async {
    final result = await $$context$$?.callMethod('close', [option?.toJson()]);
    return result;
  }

  Future<void> connect([NdefConnectOption? option]) async {
    final result = await $$context$$?.callMethod('connect', [option?.toJson()]);
    return result;
  }

  Future<void> isConnected([IsConnectedOption? option]) async {
    final result =
        await $$context$$?.callMethod('isConnected', [option?.toJson()]);
    return result;
  }

  Future<void> offNdefMessage(dynamic callback) async {
    final result = await $$context$$?.callMethod('offNdefMessage', [callback]);
    return result;
  }

  Future<void> onNdefMessage(dynamic callback) async {
    final result = await $$context$$?.callMethod('onNdefMessage', [callback]);
    return result;
  }

  Future<void> setTimeout(SetTimeoutOption option) async {
    final result =
        await $$context$$?.callMethod('setTimeout', [option.toJson()]);
    return result;
  }

  Future<void> writeNdefMessage(WriteNdefMessageOption option) async {
    final result =
        await $$context$$?.callMethod('writeNdefMessage', [option.toJson()]);
    return result;
  }
}

class NfcA {
  mpjs.JsObject? $$context$$;

  NfcA({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> close([NdefCloseOption? option]) async {
    final result = await $$context$$?.callMethod('close', [option?.toJson()]);
    return result;
  }

  Future<void> connect([NdefConnectOption? option]) async {
    final result = await $$context$$?.callMethod('connect', [option?.toJson()]);
    return result;
  }

  Future<void> getAtqa([GetAtqaOption? option]) async {
    final result = await $$context$$?.callMethod('getAtqa', [option?.toJson()]);
    return result;
  }

  Future<void> getMaxTransceiveLength(
      [GetMaxTransceiveLengthOption? option]) async {
    final result = await $$context$$
        ?.callMethod('getMaxTransceiveLength', [option?.toJson()]);
    return result;
  }

  Future<void> getSak([GetSakOption? option]) async {
    final result = await $$context$$?.callMethod('getSak', [option?.toJson()]);
    return result;
  }

  Future<void> isConnected([IsConnectedOption? option]) async {
    final result =
        await $$context$$?.callMethod('isConnected', [option?.toJson()]);
    return result;
  }

  Future<void> setTimeout(SetTimeoutOption option) async {
    final result =
        await $$context$$?.callMethod('setTimeout', [option.toJson()]);
    return result;
  }

  Future<void> transceive(TransceiveOption option) async {
    final result =
        await $$context$$?.callMethod('transceive', [option.toJson()]);
    return result;
  }
}

class NfcB {
  mpjs.JsObject? $$context$$;

  NfcB({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> close([NdefCloseOption? option]) async {
    final result = await $$context$$?.callMethod('close', [option?.toJson()]);
    return result;
  }

  Future<void> connect([NdefConnectOption? option]) async {
    final result = await $$context$$?.callMethod('connect', [option?.toJson()]);
    return result;
  }

  Future<void> getMaxTransceiveLength(
      [GetMaxTransceiveLengthOption? option]) async {
    final result = await $$context$$
        ?.callMethod('getMaxTransceiveLength', [option?.toJson()]);
    return result;
  }

  Future<void> isConnected([IsConnectedOption? option]) async {
    final result =
        await $$context$$?.callMethod('isConnected', [option?.toJson()]);
    return result;
  }

  Future<void> setTimeout(SetTimeoutOption option) async {
    final result =
        await $$context$$?.callMethod('setTimeout', [option.toJson()]);
    return result;
  }

  Future<void> transceive(TransceiveOption option) async {
    final result =
        await $$context$$?.callMethod('transceive', [option.toJson()]);
    return result;
  }
}

class NfcF {
  mpjs.JsObject? $$context$$;

  NfcF({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> close([NdefCloseOption? option]) async {
    final result = await $$context$$?.callMethod('close', [option?.toJson()]);
    return result;
  }

  Future<void> connect([NdefConnectOption? option]) async {
    final result = await $$context$$?.callMethod('connect', [option?.toJson()]);
    return result;
  }

  Future<void> getMaxTransceiveLength(
      [GetMaxTransceiveLengthOption? option]) async {
    final result = await $$context$$
        ?.callMethod('getMaxTransceiveLength', [option?.toJson()]);
    return result;
  }

  Future<void> isConnected([IsConnectedOption? option]) async {
    final result =
        await $$context$$?.callMethod('isConnected', [option?.toJson()]);
    return result;
  }

  Future<void> setTimeout(SetTimeoutOption option) async {
    final result =
        await $$context$$?.callMethod('setTimeout', [option.toJson()]);
    return result;
  }

  Future<void> transceive(TransceiveOption option) async {
    final result =
        await $$context$$?.callMethod('transceive', [option.toJson()]);
    return result;
  }
}

class NfcV {
  mpjs.JsObject? $$context$$;

  NfcV({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> close([NdefCloseOption? option]) async {
    final result = await $$context$$?.callMethod('close', [option?.toJson()]);
    return result;
  }

  Future<void> connect([NdefConnectOption? option]) async {
    final result = await $$context$$?.callMethod('connect', [option?.toJson()]);
    return result;
  }

  Future<void> getMaxTransceiveLength(
      [GetMaxTransceiveLengthOption? option]) async {
    final result = await $$context$$
        ?.callMethod('getMaxTransceiveLength', [option?.toJson()]);
    return result;
  }

  Future<void> isConnected([IsConnectedOption? option]) async {
    final result =
        await $$context$$?.callMethod('isConnected', [option?.toJson()]);
    return result;
  }

  Future<void> setTimeout(SetTimeoutOption option) async {
    final result =
        await $$context$$?.callMethod('setTimeout', [option.toJson()]);
    return result;
  }

  Future<void> transceive(TransceiveOption option) async {
    final result =
        await $$context$$?.callMethod('transceive', [option.toJson()]);
    return result;
  }
}

class Nfcrwerror {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  num $errCode = 0;

  Future<num> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  Nfcrwerror({this.$$context$$});

  void setValues({String? errMsg, num? errCode}) {
    if (errMsg != null) $errMsg = errMsg;
    if (errCode != null) $errCode = errCode;
  }

  Map toJson() {
    return {'errMsg': $errMsg, 'errCode': $errCode}
      ..removeWhere((key, value) => value == null);
  }
}

class NodesRef {
  mpjs.JsObject? $$context$$;

  NodesRef({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<SelectorQuery> boundingClientRect(
      [BoundingClientRectCallback? callback]) async {
    final result =
        await $$context$$?.callMethod('boundingClientRect', [callback]);

    return SelectorQuery($$context$$: result);
  }

  Future<SelectorQuery> context([ContextCallback? callback]) async {
    final result = await $$context$$?.callMethod('context', [callback]);

    return SelectorQuery($$context$$: result);
  }

  Future<SelectorQuery> fields(Fields fields,
      [FieldsCallback? callback]) async {
    final result =
        await $$context$$?.callMethod('fields', [fields.toJson(), callback]);

    return SelectorQuery($$context$$: result);
  }

  Future<SelectorQuery> node([NodeCallback? callback]) async {
    final result = await $$context$$?.callMethod('node', [callback]);

    return SelectorQuery($$context$$: result);
  }

  Future<SelectorQuery> scrollOffset([ScrollOffsetCallback? callback]) async {
    final result = await $$context$$?.callMethod('scrollOffset', [callback]);

    return SelectorQuery($$context$$: result);
  }
}

class OpenSyncError {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  num $errCode = 0;

  Future<num> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  OpenSyncError({this.$$context$$});

  void setValues({String? errMsg, num? errCode}) {
    if (errMsg != null) $errMsg = errMsg;
    if (errCode != null) $errCode = errCode;
  }

  Map toJson() {
    return {'errMsg': $errMsg, 'errCode': $errCode}
      ..removeWhere((key, value) => value == null);
  }
}

class Performance {
  mpjs.JsObject? $$context$$;

  Performance({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<List<PerformanceEntry>> getEntries() async {
    final result = await $$context$$?.callMethod('getEntries', []);
    return result;
  }

  Future<List<PerformanceEntry>> getEntriesByName(String name,
      [String? entryType]) async {
    final result =
        await $$context$$?.callMethod('getEntriesByName', [name, entryType]);
    return result;
  }

  Future<List<PerformanceEntry>> getEntriesByType(String entryType) async {
    final result =
        await $$context$$?.callMethod('getEntriesByType', [entryType]);
    return result;
  }

  Future<void> setBufferSize(num size) async {
    final result = await $$context$$?.callMethod('setBufferSize', [size]);
    return result;
  }

  Future<PerformanceObserver> createObserver(dynamic callback) async {
    final result = await $$context$$?.callMethod('createObserver', [callback]);

    return PerformanceObserver($$context$$: result);
  }
}

class PreDownloadSubpackageTask {
  mpjs.JsObject? $$context$$;

  PreDownloadSubpackageTask({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> onProgressUpdate(
      PreDownloadSubpackageTaskOnProgressUpdateCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(PreDownloadSubpackageTaskOnProgressUpdateListenerResult(
          $$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onProgressUpdate', [listener]);
    return result;
  }
}

class ReadCompressedFileSyncError {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  num $errCode = 0;

  Future<num> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  ReadCompressedFileSyncError({this.$$context$$});

  void setValues({String? errMsg, num? errCode}) {
    if (errMsg != null) $errMsg = errMsg;
    if (errCode != null) $errCode = errCode;
  }

  Map toJson() {
    return {'errMsg': $errMsg, 'errCode': $errCode}
      ..removeWhere((key, value) => value == null);
  }
}

class ReadSyncError {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  num $errCode = 0;

  Future<num> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  ReadSyncError({this.$$context$$});

  void setValues({String? errMsg, num? errCode}) {
    if (errMsg != null) $errMsg = errMsg;
    if (errCode != null) $errCode = errCode;
  }

  Map toJson() {
    return {'errMsg': $errMsg, 'errCode': $errCode}
      ..removeWhere((key, value) => value == null);
  }
}

class RealtimeLogManager {
  mpjs.JsObject? $$context$$;

  RealtimeLogManager({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<CurrentState> getCurrentState() async {
    final result = await $$context$$?.callMethod('getCurrentState', []);

    return CurrentState($$context$$: result);
  }

  Future<void> addFilterMsg(String msg) async {
    final result = await $$context$$?.callMethod('addFilterMsg', [msg]);
    return result;
  }

  Future<void> error(List<dynamic> args) async {
    final result = await $$context$$?.callMethod('error', [args]);
    return result;
  }

  Future<void> $in(pageInstance) async {
    final result = await $$context$$?.callMethod('in', [pageInstance]);
    return result;
  }

  Future<void> info(List<dynamic> args) async {
    final result = await $$context$$?.callMethod('info', [args]);
    return result;
  }

  Future<void> setFilterMsg(String msg) async {
    final result = await $$context$$?.callMethod('setFilterMsg', [msg]);
    return result;
  }

  Future<void> warn(List<dynamic> args) async {
    final result = await $$context$$?.callMethod('warn', [args]);
    return result;
  }

  Future<RealtimeTagLogManager> tag(String tagName) async {
    final result = await $$context$$?.callMethod('tag', [tagName]);

    return RealtimeTagLogManager($$context$$: result);
  }
}

class RealtimeTagLogManager {
  mpjs.JsObject? $$context$$;

  RealtimeTagLogManager({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> addFilterMsg(String msg) async {
    final result = await $$context$$?.callMethod('addFilterMsg', [msg]);
    return result;
  }

  Future<void> error(String key, dynamic value) async {
    final result = await $$context$$?.callMethod('error', [key, value]);
    return result;
  }

  Future<void> info(String key, dynamic value) async {
    final result = await $$context$$?.callMethod('info', [key, value]);
    return result;
  }

  Future<void> setFilterMsg(String msg) async {
    final result = await $$context$$?.callMethod('setFilterMsg', [msg]);
    return result;
  }

  Future<void> warn(String key, dynamic value) async {
    final result = await $$context$$?.callMethod('warn', [key, value]);
    return result;
  }
}

class RecorderManager {
  mpjs.JsObject? $$context$$;

  RecorderManager({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> onError(UDPSocketOnErrorCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onError', [listener]);
    return result;
  }

  Future<void> onFrameRecorded(OnFrameRecordedCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnFrameRecordedListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onFrameRecorded', [listener]);
    return result;
  }

  Future<void> onInterruptionBegin(OnInterruptionBeginCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onInterruptionBegin', [listener]);
    return result;
  }

  Future<void> onInterruptionEnd(OnInterruptionEndCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onInterruptionEnd', [listener]);
    return result;
  }

  Future<void> onPause(OnPauseCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onPause', [listener]);
    return result;
  }

  Future<void> onResume(OnResumeCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onResume', [listener]);
    return result;
  }

  Future<void> onStart(OnStartCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onStart', [listener]);
    return result;
  }

  Future<void> onStop(RecorderManagerOnStopCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnStopListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onStop', [listener]);
    return result;
  }

  Future<void> pause() async {
    final result = await $$context$$?.callMethod('pause', []);
    return result;
  }

  Future<void> resume() async {
    final result = await $$context$$?.callMethod('resume', []);
    return result;
  }

  Future<void> start(RecorderManagerStartOption option) async {
    final result = await $$context$$?.callMethod('start', [option.toJson()]);
    return result;
  }

  Future<void> stop() async {
    final result = await $$context$$?.callMethod('stop', []);
    return result;
  }
}

class RequestTask {
  mpjs.JsObject? $$context$$;

  RequestTask({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> abort() async {
    final result = await $$context$$?.callMethod('abort', []);
    return result;
  }

  Future<void> offChunkReceived([OffChunkReceivedCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offChunkReceived', [listener]);
    return result;
  }

  Future<void> offHeadersReceived(
      [OffHeadersReceivedCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offHeadersReceived', [listener]);
    return result;
  }

  Future<void> onChunkReceived(OnChunkReceivedCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnChunkReceivedListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onChunkReceived', [listener]);
    return result;
  }

  Future<void> onHeadersReceived(OnHeadersReceivedCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnHeadersReceivedListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onHeadersReceived', [listener]);
    return result;
  }
}

class RewardedVideoAd {
  mpjs.JsObject? $$context$$;

  RewardedVideoAd({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<dynamic> load() async {
    final result = await $$context$$?.callMethod('load', []);
    return result;
  }

  Future<dynamic> show() async {
    final result = await $$context$$?.callMethod('show', []);
    return result;
  }

  Future<void> destroy() async {
    final result = await $$context$$?.callMethod('destroy', []);
    return result;
  }

  Future<void> offClose([RewardedVideoAdOffCloseCallback? listener]) async {
    final result = await $$context$$?.callMethod('offClose', [listener]);
    return result;
  }

  Future<void> offError([RewardedVideoAdOffErrorCallback? listener]) async {
    final result = await $$context$$?.callMethod('offError', [listener]);
    return result;
  }

  Future<void> offLoad([OffLoadCallback? listener]) async {
    final result = await $$context$$?.callMethod('offLoad', [listener]);
    return result;
  }

  Future<void> onClose(RewardedVideoAdOnCloseCallback listener) async {
    final result = await $$context$$?.callMethod('onClose', [listener]);
    return result;
  }

  Future<void> onError(RewardedVideoAdOnErrorCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(RewardedVideoAdOnErrorListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onError', [listener]);
    return result;
  }

  Future<void> onLoad(OnLoadCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onLoad', [listener]);
    return result;
  }
}

class SelectorQuery {
  mpjs.JsObject? $$context$$;

  SelectorQuery({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<NodesRef> exec([dynamic callback]) async {
    final result = await $$context$$?.callMethod('exec', [callback]);

    return NodesRef($$context$$: result);
  }

  Future<NodesRef> select(String selector) async {
    final result = await $$context$$?.callMethod('select', [selector]);

    return NodesRef($$context$$: result);
  }

  Future<NodesRef> selectAll(String selector) async {
    final result = await $$context$$?.callMethod('selectAll', [selector]);

    return NodesRef($$context$$: result);
  }

  Future<NodesRef> selectViewport() async {
    final result = await $$context$$?.callMethod('selectViewport', []);

    return NodesRef($$context$$: result);
  }

  Future<SelectorQuery> $in(dynamic component) async {
    final result = await $$context$$?.callMethod('in', [component]);

    return SelectorQuery($$context$$: result);
  }
}

class SocketTask {
  mpjs.JsObject? $$context$$;

  SocketTask({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> close(SocketTaskCloseOption option) async {
    final result = await $$context$$?.callMethod('close', [option.toJson()]);
    return result;
  }

  Future<void> onClose(SocketTaskOnCloseCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(SocketTaskOnCloseListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onClose', [listener]);
    return result;
  }

  Future<void> onError(UDPSocketOnErrorCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onError', [listener]);
    return result;
  }

  Future<void> onMessage(SocketTaskOnMessageCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(SocketTaskOnMessageListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onMessage', [listener]);
    return result;
  }

  Future<void> onOpen(OnOpenCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnOpenListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onOpen', [listener]);
    return result;
  }

  Future<void> send(SocketTaskSendOption option) async {
    final result = await $$context$$?.callMethod('send', [option.toJson()]);
    return result;
  }
}

class TCPSocket {
  mpjs.JsObject? $$context$$;

  TCPSocket({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> bindWifi(BindWifiOption options) async {
    final result =
        await $$context$$?.callMethod('bindWifi', [options.toJson()]);
    return result;
  }

  Future<void> close() async {
    final result = await $$context$$?.callMethod('close', []);
    return result;
  }

  Future<void> connect(TCPSocketConnectOption options) async {
    final result = await $$context$$?.callMethod('connect', [options.toJson()]);
    return result;
  }

  Future<void> offBindWifi([OffBindWifiCallback? listener]) async {
    final result = await $$context$$?.callMethod('offBindWifi', [listener]);
    return result;
  }

  Future<void> offClose([UDPSocketOffCloseCallback? listener]) async {
    final result = await $$context$$?.callMethod('offClose', [listener]);
    return result;
  }

  Future<void> offConnect([OffConnectCallback? listener]) async {
    final result = await $$context$$?.callMethod('offConnect', [listener]);
    return result;
  }

  Future<void> offError([UDPSocketOffErrorCallback? listener]) async {
    final result = await $$context$$?.callMethod('offError', [listener]);
    return result;
  }

  Future<void> offMessage([TCPSocketOffMessageCallback? listener]) async {
    final result = await $$context$$?.callMethod('offMessage', [listener]);
    return result;
  }

  Future<void> onBindWifi(OnBindWifiCallback listener) async {
    final result = await $$context$$?.callMethod('onBindWifi', [listener]);
    return result;
  }

  Future<void> onClose(UDPSocketOnCloseCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onClose', [listener]);
    return result;
  }

  Future<void> onConnect(OnConnectCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onConnect', [listener]);
    return result;
  }

  Future<void> onError(UDPSocketOnErrorCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onError', [listener]);
    return result;
  }

  Future<void> onMessage(TCPSocketOnMessageCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(TCPSocketOnMessageListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onMessage', [listener]);
    return result;
  }

  Future<void> write(dynamic data) async {
    final result = await $$context$$?.callMethod('write', [data]);
    return result;
  }
}

class TruncateSyncError {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  num $errCode = 0;

  Future<num> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  TruncateSyncError({this.$$context$$});

  void setValues({String? errMsg, num? errCode}) {
    if (errMsg != null) $errMsg = errMsg;
    if (errCode != null) $errCode = errCode;
  }

  Map toJson() {
    return {'errMsg': $errMsg, 'errCode': $errCode}
      ..removeWhere((key, value) => value == null);
  }
}

class UDPSocket {
  mpjs.JsObject? $$context$$;

  UDPSocket({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> close() async {
    final result = await $$context$$?.callMethod('close', []);
    return result;
  }

  Future<void> connect(UDPSocketConnectOption option) async {
    final result = await $$context$$?.callMethod('connect', [option.toJson()]);
    return result;
  }

  Future<void> offClose([UDPSocketOffCloseCallback? listener]) async {
    final result = await $$context$$?.callMethod('offClose', [listener]);
    return result;
  }

  Future<void> offError([UDPSocketOffErrorCallback? listener]) async {
    final result = await $$context$$?.callMethod('offError', [listener]);
    return result;
  }

  Future<void> offListening([OffListeningCallback? listener]) async {
    final result = await $$context$$?.callMethod('offListening', [listener]);
    return result;
  }

  Future<void> offMessage([UDPSocketOffMessageCallback? listener]) async {
    final result = await $$context$$?.callMethod('offMessage', [listener]);
    return result;
  }

  Future<void> onClose(UDPSocketOnCloseCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onClose', [listener]);
    return result;
  }

  Future<void> onError(UDPSocketOnErrorCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onError', [listener]);
    return result;
  }

  Future<void> onListening(OnListeningCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onListening', [listener]);
    return result;
  }

  Future<void> onMessage(UDPSocketOnMessageCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(UDPSocketOnMessageListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onMessage', [listener]);
    return result;
  }

  Future<void> send(UDPSocketSendOption option) async {
    final result = await $$context$$?.callMethod('send', [option.toJson()]);
    return result;
  }

  Future<void> setTTL(num ttl) async {
    final result = await $$context$$?.callMethod('setTTL', [ttl]);
    return result;
  }

  Future<void> write() async {
    final result = await $$context$$?.callMethod('write', []);
    return result;
  }

  Future<num> bind([num? port]) async {
    final result = await $$context$$?.callMethod('bind', [port]);
    return result;
  }
}

class UpdateManager {
  mpjs.JsObject? $$context$$;

  UpdateManager({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> applyUpdate() async {
    final result = await $$context$$?.callMethod('applyUpdate', []);
    return result;
  }

  Future<void> onCheckForUpdate(OnCheckForUpdateCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnCheckForUpdateListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onCheckForUpdate', [listener]);
    return result;
  }

  Future<void> onUpdateFailed(OnUpdateFailedCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onUpdateFailed', [listener]);
    return result;
  }

  Future<void> onUpdateReady(OnUpdateReadyCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onUpdateReady', [listener]);
    return result;
  }
}

class UploadTask {
  mpjs.JsObject? $$context$$;

  UploadTask({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> abort() async {
    final result = await $$context$$?.callMethod('abort', []);
    return result;
  }

  Future<void> offHeadersReceived(
      [OffHeadersReceivedCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offHeadersReceived', [listener]);
    return result;
  }

  Future<void> offProgressUpdate(
      [UploadTaskOffProgressUpdateCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offProgressUpdate', [listener]);
    return result;
  }

  Future<void> onHeadersReceived(OnHeadersReceivedCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnHeadersReceivedListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onHeadersReceived', [listener]);
    return result;
  }

  Future<void> onProgressUpdate(
      UploadTaskOnProgressUpdateCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(UploadTaskOnProgressUpdateListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onProgressUpdate', [listener]);
    return result;
  }
}

class UserCryptoManager {
  mpjs.JsObject? $$context$$;

  UserCryptoManager({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> getLatestUserKey([GetLatestUserKeyOption? option]) async {
    final result =
        await $$context$$?.callMethod('getLatestUserKey', [option?.toJson()]);
    return result;
  }

  Future<void> getRandomValues(GetRandomValuesOption option) async {
    final result =
        await $$context$$?.callMethod('getRandomValues', [option.toJson()]);
    return result;
  }
}

class VideoContext {
  mpjs.JsObject? $$context$$;

  VideoContext({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<void> exitBackgroundPlayback() async {
    final result = await $$context$$?.callMethod('exitBackgroundPlayback', []);
    return result;
  }

  Future<void> exitFullScreen() async {
    final result = await $$context$$?.callMethod('exitFullScreen', []);
    return result;
  }

  Future<void> exitPictureInPicture(
      [ExitPictureInPictureOption? option]) async {
    final result = await $$context$$
        ?.callMethod('exitPictureInPicture', [option?.toJson()]);
    return result;
  }

  Future<void> hideStatusBar() async {
    final result = await $$context$$?.callMethod('hideStatusBar', []);
    return result;
  }

  Future<void> pause() async {
    final result = await $$context$$?.callMethod('pause', []);
    return result;
  }

  Future<void> play() async {
    final result = await $$context$$?.callMethod('play', []);
    return result;
  }

  Future<void> playbackRate(num rate) async {
    final result = await $$context$$?.callMethod('playbackRate', [rate]);
    return result;
  }

  Future<void> requestBackgroundPlayback() async {
    final result =
        await $$context$$?.callMethod('requestBackgroundPlayback', []);
    return result;
  }

  Future<void> requestFullScreen(
      VideoContextRequestFullScreenOption option) async {
    final result =
        await $$context$$?.callMethod('requestFullScreen', [option.toJson()]);
    return result;
  }

  Future<void> seek(num position) async {
    final result = await $$context$$?.callMethod('seek', [position]);
    return result;
  }

  Future<void> sendDanmu(Danmu data) async {
    final result = await $$context$$?.callMethod('sendDanmu', [data.toJson()]);
    return result;
  }

  Future<void> showStatusBar() async {
    final result = await $$context$$?.callMethod('showStatusBar', []);
    return result;
  }

  Future<void> stop() async {
    final result = await $$context$$?.callMethod('stop', []);
    return result;
  }
}

class VideoDecoder {
  mpjs.JsObject? $$context$$;

  VideoDecoder({this.$$context$$});

  Map toJson() {
    return {}..removeWhere((key, value) => value == null);
  }

  Future<FrameDataOptions> getFrameData() async {
    final result = await $$context$$?.callMethod('getFrameData', []);

    return FrameDataOptions($$context$$: result);
  }

  Future<dynamic> remove() async {
    final result = await $$context$$?.callMethod('remove', []);
    return result;
  }

  Future<dynamic> seek(num position) async {
    final result = await $$context$$?.callMethod('seek', [position]);
    return result;
  }

  Future<dynamic> start(VideoDecoderStartOption option) async {
    final result = await $$context$$?.callMethod('start', [option.toJson()]);
    return result;
  }

  Future<dynamic> stop() async {
    final result = await $$context$$?.callMethod('stop', []);
    return result;
  }

  Future<void> off(String eventName, dynamic callback) async {
    final result = await $$context$$?.callMethod('off', [eventName, callback]);
    return result;
  }

  Future<void> on(dynamic eventName, dynamic callback) async {
    final result = await $$context$$?.callMethod('on', [eventName, callback]);
    return result;
  }
}

class WifiError {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  num $errCode = 0;

  Future<num> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  WifiError({this.$$context$$});

  void setValues({String? errMsg, num? errCode}) {
    if (errMsg != null) $errMsg = errMsg;
    if (errCode != null) $errCode = errCode;
  }

  Map toJson() {
    return {'errMsg': $errMsg, 'errCode': $errCode}
      ..removeWhere((key, value) => value == null);
  }
}

class Worklet {
  // mpjs.JsObject? $$context$$;

  // Worklet({this.$$context$$});

  // Map toJson() {
  //   return {}..removeWhere((key, value) => value == null);
  // }

  // Future<AnimationObject> decay(DecayOption options, List<dynamic> clamp,
  //     num velocityFactor, dynamic callback) async {
  //   final result = await $$context$$?.callMethod(
  //       'decay', [options.toJson(), clamp, velocityFactor, callback]);
  //   return result;
  // }

  // Future<AnimationObject> delay(
  //     num delayMS, AnimationObject delayedAnimation) async {
  //   final result =
  //       await $$context$$?.callMethod('delay', [delayMS, delayedAnimation]);
  //   return result;
  // }

  // Future<AnimationObject> repeat(AnimationObject animation,
  //     [num? numberOfReps, bool? reverse, dynamic callback]) async {
  //   final result = await $$context$$
  //       ?.callMethod('repeat', [animation, numberOfReps, reverse, callback]);
  //   return result;
  // }

  // Future<AnimationObject> sequence(AnimationObject animationN) async {
  //   final result = await $$context$$?.callMethod('sequence', [animationN]);
  //   return result;
  // }

  // Future<AnimationObject> spring(
  //     dynamic toValue, SpringOption options, dynamic callback) async {
  //   final result = await $$context$$
  //       ?.callMethod('spring', [toValue, options.toJson(), callback]);
  //   return result;
  // }

  // Future<AnimationObject> timing(
  //     dynamic toValue, TimingOption options, dynamic callback) async {
  //   final result = await $$context$$
  //       ?.callMethod('timing', [toValue, options.toJson(), callback]);
  //   return result;
  // }

  // Future<DerivedValue> derived(WorkletFunction updaterWorklet) async {
  //   final result = await $$context$$?.callMethod('derived', [updaterWorklet]);
  //   return result;
  // }

  // Future<SharedValue> shared(dynamic initialValue) async {
  //   final result = await $$context$$?.callMethod('shared', [initialValue]);
  //   return result;
  // }

  // Future<dynamic> runOnJS(dynamic fn) async {
  //   final result = await $$context$$?.callMethod('runOnJS', [fn]);
  //   return result;
  // }

  // Future<dynamic> runOnUI(dynamic fn) async {
  //   final result = await $$context$$?.callMethod('runOnUI', [fn]);
  //   return result;
  // }

  // Future<void> cancelAnimation(SharedValue sharedValue) async {
  //   final result =
  //       await $$context$$?.callMethod('cancelAnimation', [sharedValue]);
  //   return result;
  // }
}

class WriteSyncError {
  mpjs.JsObject? $$context$$;

  String $errMsg = "";

  Future<String> get errMsg async {
    return await $$context$$?.getPropertyValue('errMsg') ?? $errMsg;
  }

  num $errCode = 0;

  Future<num> get errCode async {
    return await $$context$$?.getPropertyValue('errCode') ?? $errCode;
  }

  WriteSyncError({this.$$context$$});

  void setValues({String? errMsg, num? errCode}) {
    if (errMsg != null) $errMsg = errMsg;
    if (errCode != null) $errCode = errCode;
  }

  Map toJson() {
    return {'errMsg': $errMsg, 'errCode': $errCode}
      ..removeWhere((key, value) => value == null);
  }
}

class Wx {
  mpjs.JsObject? $$context$$;

  // WxCloud $cloud = WxCloud();

  // Future<WxCloud> get cloud async {
  //   return $cloud;
  // }

  dynamic $env;

  Future<dynamic> get env async {
    return await $$context$$?.getPropertyValue('env') ?? $env;
  }

  Worklet $worklet = Worklet();

  // Future<Worklet> get worklet async {
  //   return Worklet($$context$$: $$context$$?.getProperty('worklet'));
  // }

  Wx({this.$$context$$});

  void setValues({dynamic env, Worklet? worklet}) {
    if (env != null) $env = env;
    if (worklet != null) $worklet = worklet;
  }

  Map toJson() {
    return {'env': $env, 'worklet': $worklet}
      ..removeWhere((key, value) => value == null);
  }

  Future<List<dynamic>> batchGetStorageSync(List<String> keyList) async {
    final result =
        await $$context$$?.callMethod('batchGetStorageSync', [keyList]);
    return result;
  }

  Future<ArrayBuffer> base64ToArrayBuffer(String base64) async {
    final result =
        await $$context$$?.callMethod('base64ToArrayBuffer', [base64]);

    return ArrayBuffer($$context$$: result);
  }

  Future<AccountInfo> getAccountInfoSync() async {
    final result = await $$context$$?.callMethod('getAccountInfoSync', []);

    return AccountInfo($$context$$: result);
  }

  Future<AppAuthorizeSetting> getAppAuthorizeSetting() async {
    final result = await $$context$$?.callMethod('getAppAuthorizeSetting', []);

    return AppAuthorizeSetting($$context$$: result);
  }

  Future<AppBaseInfo> getAppBaseInfo() async {
    final result = await $$context$$?.callMethod('getAppBaseInfo', []);

    return AppBaseInfo($$context$$: result);
  }

  Future<GetBatteryInfoSyncResult> getBatteryInfoSync() async {
    final result = await $$context$$?.callMethod('getBatteryInfoSync', []);

    return GetBatteryInfoSyncResult($$context$$: result);
  }

  Future<DeviceInfo> getDeviceInfo() async {
    final result = await $$context$$?.callMethod('getDeviceInfo', []);

    return DeviceInfo($$context$$: result);
  }

  Future<LaunchOptionsApp> getEnterOptionsSync() async {
    final result = await $$context$$?.callMethod('getEnterOptionsSync', []);

    return LaunchOptionsApp($$context$$: result);
  }

  Future<IAnyObject> getExptInfoSync([List<String>? keys]) async {
    final result = await $$context$$?.callMethod('getExptInfoSync', [keys]);

    return IAnyObject($$context$$: result);
  }

  Future<IAnyObject> getExtConfigSync() async {
    final result = await $$context$$?.callMethod('getExtConfigSync', []);

    return IAnyObject($$context$$: result);
  }

  Future<LaunchOptionsApp> getLaunchOptionsSync() async {
    final result = await $$context$$?.callMethod('getLaunchOptionsSync', []);

    return LaunchOptionsApp($$context$$: result);
  }

  Future<ClientRect> getMenuButtonBoundingClientRect() async {
    final result =
        await $$context$$?.callMethod('getMenuButtonBoundingClientRect', []);

    return ClientRect($$context$$: result);
  }

  Future<SkylineInfo> getSkylineInfoSync() async {
    final result = await $$context$$?.callMethod('getSkylineInfoSync', []);

    return SkylineInfo($$context$$: result);
  }

  Future<GetStorageInfoSyncOption> getStorageInfoSync() async {
    final result = await $$context$$?.callMethod('getStorageInfoSync', []);

    return GetStorageInfoSyncOption($$context$$: result);
  }

  Future<SystemInfo> getSystemInfoSync() async {
    final result = await $$context$$?.callMethod('getSystemInfoSync', []);

    return SystemInfo($$context$$: result);
  }

  Future<SystemSetting> getSystemSetting() async {
    final result = await $$context$$?.callMethod('getSystemSetting', []);

    return SystemSetting($$context$$: result);
  }

  Future<WindowInfo> getWindowInfo() async {
    final result = await $$context$$?.callMethod('getWindowInfo', []);

    return WindowInfo($$context$$: result);
  }

  Future<String> getRendererUserAgent() async {
    final result = await $$context$$?.callMethod('getRendererUserAgent', []);
    return result;
  }

  Future<Animation> createAnimation(StepOption option) async {
    final result =
        await $$context$$?.callMethod('createAnimation', [option.toJson()]);

    return Animation($$context$$: result);
  }

  Future<AudioContext> createAudioContext(String id,
      [dynamic component]) async {
    final result =
        await $$context$$?.callMethod('createAudioContext', [id, component]);

    return AudioContext($$context$$: result);
  }

  Future<BackgroundAudioManager> getBackgroundAudioManager() async {
    final result =
        await $$context$$?.callMethod('getBackgroundAudioManager', []);

    return BackgroundAudioManager($$context$$: result);
  }

  Future<CacheManager> createCacheManager(
      CreateCacheManagerOption option) async {
    final result =
        await $$context$$?.callMethod('createCacheManager', [option.toJson()]);

    return CacheManager($$context$$: result);
  }

  Future<CameraContext> createCameraContext() async {
    final result = await $$context$$?.callMethod('createCameraContext', []);

    return CameraContext($$context$$: result);
  }

  Future<CanvasContext> createCanvasContext(String canvasId,
      [dynamic component]) async {
    final result = await $$context$$
        ?.callMethod('createCanvasContext', [canvasId, component]);

    return CanvasContext($$context$$: result);
  }

  Future<DownloadTask> downloadFile(DownloadFileOption option) async {
    final result =
        await $$context$$?.callMethod('downloadFile', [option.toJson()]);

    return DownloadTask($$context$$: result);
  }

  Future<FileSystemManager> getFileSystemManager() async {
    final result = await $$context$$?.callMethod('getFileSystemManager', []);

    return FileSystemManager($$context$$: result);
  }

  Future<InnerAudioContext> createInnerAudioContext(
      [CreateInnerAudioContextOption? option]) async {
    final result = await $$context$$
        ?.callMethod('createInnerAudioContext', [option?.toJson()]);

    return InnerAudioContext($$context$$: result);
  }

  Future<IntersectionObserver> createIntersectionObserver(IAnyObject component,
      [CreateIntersectionObserverOption? options]) async {
    final result = await $$context$$?.callMethod(
        'createIntersectionObserver', [component.toJson(), options?.toJson()]);

    return IntersectionObserver($$context$$: result);
  }

  Future<InterstitialAd> createInterstitialAd(
      CreateInterstitialAdOption option) async {
    final result = await $$context$$
        ?.callMethod('createInterstitialAd', [option.toJson()]);

    return InterstitialAd($$context$$: result);
  }

  Future<LivePlayerContext> createLivePlayerContext(String id,
      [dynamic component]) async {
    final result = await $$context$$
        ?.callMethod('createLivePlayerContext', [id, component]);

    return LivePlayerContext($$context$$: result);
  }

  Future<LivePusherContext> createLivePusherContext() async {
    final result = await $$context$$?.callMethod('createLivePusherContext', []);

    return LivePusherContext($$context$$: result);
  }

  Future<LogManager> getLogManager(GetLogManagerOption option) async {
    final result =
        await $$context$$?.callMethod('getLogManager', [option.toJson()]);

    return LogManager($$context$$: result);
  }

  Future<MapContext> createMapContext(String mapId, [dynamic component]) async {
    final result =
        await $$context$$?.callMethod('createMapContext', [mapId, component]);

    return MapContext($$context$$: result);
  }

  Future<MediaAudioPlayer> createMediaAudioPlayer() async {
    final result = await $$context$$?.callMethod('createMediaAudioPlayer', []);

    return MediaAudioPlayer($$context$$: result);
  }

  Future<MediaContainer> createMediaContainer() async {
    final result = await $$context$$?.callMethod('createMediaContainer', []);

    return MediaContainer($$context$$: result);
  }

  Future<MediaRecorder> createMediaRecorder(
      IAnyObject canvas, CreateMediaRecorderOption options) async {
    final result = await $$context$$?.callMethod(
        'createMediaRecorder', [canvas.toJson(), options.toJson()]);

    return MediaRecorder($$context$$: result);
  }

  Future<NFCAdapter> getNFCAdapter() async {
    final result = await $$context$$?.callMethod('getNFCAdapter', []);

    return NFCAdapter($$context$$: result);
  }

  Future<OffscreenCanvas> createOffscreenCanvas(num width, num height,
      [dynamic component]) async {
    final result = await $$context$$
        ?.callMethod('createOffscreenCanvas', [width, height, component]);

    return OffscreenCanvas($$context$$: result);
  }

  Future<OffscreenCanvas> createOffscreenCanvas2(
      CreateOffscreenCanvasOption option) async {
    final result = await $$context$$
        ?.callMethod('createOffscreenCanvas', [option.toJson()]);

    return OffscreenCanvas($$context$$: result);
  }

  Future<Performance> getPerformance() async {
    final result = await $$context$$?.callMethod('getPerformance', []);

    return Performance($$context$$: result);
  }

  Future<PreDownloadSubpackageTask> preDownloadSubpackage(
      PreDownloadSubpackageOption option) async {
    final result = await $$context$$
        ?.callMethod('preDownloadSubpackage', [option.toJson()]);

    return PreDownloadSubpackageTask($$context$$: result);
  }

  Future<RealtimeLogManager> getRealtimeLogManager() async {
    final result = await $$context$$?.callMethod('getRealtimeLogManager', []);

    return RealtimeLogManager($$context$$: result);
  }

  Future<RecorderManager> getRecorderManager() async {
    final result = await $$context$$?.callMethod('getRecorderManager', []);

    return RecorderManager($$context$$: result);
  }

  Future<RequestTask> request<T extends dynamic>(
      RequestOption<T> option) async {
    final result = await $$context$$?.callMethod('request', [option]);

    return RequestTask($$context$$: result);
  }

  Future<RewardedVideoAd> createRewardedVideoAd(
      CreateRewardedVideoAdOption option) async {
    final result = await $$context$$
        ?.callMethod('createRewardedVideoAd', [option.toJson()]);

    return RewardedVideoAd($$context$$: result);
  }

  Future<SelectorQuery> createSelectorQuery() async {
    final result = await $$context$$?.callMethod('createSelectorQuery', []);

    return SelectorQuery($$context$$: result);
  }

  Future<SocketTask> connectSocket(ConnectSocketOption option) async {
    final result =
        await $$context$$?.callMethod('connectSocket', [option.toJson()]);

    return SocketTask($$context$$: result);
  }

  Future<TCPSocket> createTCPSocket() async {
    final result = await $$context$$?.callMethod('createTCPSocket', []);

    return TCPSocket($$context$$: result);
  }

  Future<UDPSocket> createUDPSocket() async {
    final result = await $$context$$?.callMethod('createUDPSocket', []);

    return UDPSocket($$context$$: result);
  }

  Future<UpdateManager> getUpdateManager() async {
    final result = await $$context$$?.callMethod('getUpdateManager', []);

    return UpdateManager($$context$$: result);
  }

  Future<UploadTask> uploadFile(UploadFileOption option) async {
    final result =
        await $$context$$?.callMethod('uploadFile', [option.toJson()]);

    return UploadTask($$context$$: result);
  }

  Future<UserCryptoManager> getUserCryptoManager() async {
    final result = await $$context$$?.callMethod('getUserCryptoManager', []);

    return UserCryptoManager($$context$$: result);
  }

  Future<VKSession> createVKSession(VKConfig option) async {
    final result =
        await $$context$$?.callMethod('createVKSession', [option.toJson()]);

    return VKSession($$context$$: result);
  }

  Future<VideoContext> createVideoContext(String id,
      [dynamic component]) async {
    final result =
        await $$context$$?.callMethod('createVideoContext', [id, component]);

    return VideoContext($$context$$: result);
  }

  Future<VideoDecoder> createVideoDecoder() async {
    final result = await $$context$$?.callMethod('createVideoDecoder', []);

    return VideoDecoder($$context$$: result);
  }

  // Future<WebAudioContext> createWebAudioContext() async {
  //   final result = await $$context$$?.callMethod('createWebAudioContext', []);

  //   return WebAudioContext($$context$$: result);
  // }

  Future<Worker> createWorker(String scriptPath,
      [CreateWorkerOption? options]) async {
    final result = await $$context$$
        ?.callMethod('createWorker', [scriptPath, options?.toJson()]);

    return Worker($$context$$: result);
  }

  Future<T> getStorageSync<T extends dynamic>(String key) async {
    final result = await $$context$$?.callMethod('getStorageSync', [key]);
    return result;
  }

  Future<bool> canIUse(String schema) async {
    final result = await $$context$$?.callMethod('canIUse', [schema]);
    return result;
  }

  Future<bool> isVKSupport(dynamic version) async {
    final result = await $$context$$?.callMethod('isVKSupport', [version]);
    return result;
  }

  Future<String> arrayBufferToBase64(ArrayBuffer arrayBuffer) async {
    final result = await $$context$$
        ?.callMethod('arrayBufferToBase64', [arrayBuffer.toJson()]);
    return result;
  }

  Future<String> createBufferURL(dynamic buffer) async {
    final result = await $$context$$?.callMethod('createBufferURL', [buffer]);
    return result;
  }

  Future<AddCardSuccessCallbackResult> addCard<T extends AddCardOption>(
      T option) async {
    final result = await $$context$$?.callMethod('addCard', [option]);

    return AddCardSuccessCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      addFileToFavorites<T extends AddFileToFavoritesOption>(T option) async {
    final result =
        await $$context$$?.callMethod('addFileToFavorites', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      addPhoneCalendar<T extends AddPhoneCalendarOption>(T option) async {
    final result = await $$context$$?.callMethod('addPhoneCalendar', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      addPhoneContact<T extends AddPhoneContactOption>(T option) async {
    final result = await $$context$$?.callMethod('addPhoneContact', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      addPhoneRepeatCalendar<T extends AddPhoneRepeatCalendarOption>(
          T option) async {
    final result =
        await $$context$$?.callMethod('addPhoneRepeatCalendar', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      addVideoToFavorites<T extends AddVideoToFavoritesOption>(T option) async {
    final result =
        await $$context$$?.callMethod('addVideoToFavorites', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<void> authPrivateMessage([AuthPrivateMessageOption? option]) async {
    final result =
        await $$context$$?.callMethod('authPrivateMessage', [option?.toJson()]);
    return result;
  }

  Future<GeneralCallbackResult> authorize<T extends AuthorizeOption>(
      T option) async {
    final result = await $$context$$?.callMethod('authorize', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<void> authorizeForMiniProgram(
      AuthorizeForMiniProgramOption option) async {
    final result = await $$context$$
        ?.callMethod('authorizeForMiniProgram', [option.toJson()]);
    return result;
  }

  Future<GeneralCallbackResult>
      batchGetStorage<T extends BatchGetStorageOption>(T option) async {
    final result = await $$context$$?.callMethod('batchGetStorage', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      batchSetStorage<T extends BatchSetStorageOption>(T option) async {
    final result = await $$context$$?.callMethod('batchSetStorage', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<void> batchSetStorageSync(List<KvList> kvList) async {
    final result =
        await $$context$$?.callMethod('batchSetStorageSync', [kvList]);
    return result;
  }

  Future<CanvasGetImageDataSuccessCallbackResult>
      canvasGetImageData<T extends CanvasGetImageDataOption>(T option,
          [dynamic component]) async {
    final result = await $$context$$
        ?.callMethod('canvasGetImageData', [option, component]);

    return CanvasGetImageDataSuccessCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      canvasPutImageData<T extends CanvasPutImageDataOption>(T option,
          [dynamic component]) async {
    final result = await $$context$$
        ?.callMethod('canvasPutImageData', [option, component]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<CanvasToTempFilePathSuccessCallbackResult>
      canvasToTempFilePath<T extends CanvasToTempFilePathOption>(T option,
          [dynamic component]) async {
    final result = await $$context$$
        ?.callMethod('canvasToTempFilePath', [option, component]);

    return CanvasToTempFilePathSuccessCallbackResult($$context$$: result);
  }

  Future<void> checkIsAddedToMyMiniProgram(
      CheckIsAddedToMyMiniProgramOption option) async {
    final result = await $$context$$
        ?.callMethod('checkIsAddedToMyMiniProgram', [option.toJson()]);
    return result;
  }

  Future<CheckIsOpenAccessibilitySuccessCallbackOption>
      checkIsOpenAccessibility<T extends CheckIsOpenAccessibilityOption>(
          [T? option]) async {
    final result =
        await $$context$$?.callMethod('checkIsOpenAccessibility', [option]);

    return CheckIsOpenAccessibilitySuccessCallbackOption($$context$$: result);
  }

  Future<CheckIsSoterEnrolledInDeviceSuccessCallbackResult>
      checkIsSoterEnrolledInDevice<
          T extends CheckIsSoterEnrolledInDeviceOption>(T option) async {
    final result =
        await $$context$$?.callMethod('checkIsSoterEnrolledInDevice', [option]);

    return CheckIsSoterEnrolledInDeviceSuccessCallbackResult(
        $$context$$: result);
  }

  Future<CheckIsSupportSoterAuthenticationSuccessCallbackResult>
      checkIsSupportSoterAuthentication<
              T extends CheckIsSupportSoterAuthenticationOption>(
          [T? option]) async {
    final result = await $$context$$
        ?.callMethod('checkIsSupportSoterAuthentication', [option]);

    return CheckIsSupportSoterAuthenticationSuccessCallbackResult(
        $$context$$: result);
  }

  Future<GeneralCallbackResult> checkSession<T extends CheckSessionOption>(
      [T? option]) async {
    final result = await $$context$$?.callMethod('checkSession', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<ChooseAddressSuccessCallbackResult>
      chooseAddress<T extends ChooseAddressOption>([T? option]) async {
    final result = await $$context$$?.callMethod('chooseAddress', [option]);

    return ChooseAddressSuccessCallbackResult($$context$$: result);
  }

  Future<void> chooseContact([ChooseContactOption? option]) async {
    final result =
        await $$context$$?.callMethod('chooseContact', [option?.toJson()]);
    return result;
  }

  Future<ChooseImageSuccessCallbackResult>
      chooseImage<T extends ChooseImageOption>([T? option]) async {
    final result = await $$context$$?.callMethod('chooseImage', [option]);

    return ChooseImageSuccessCallbackResult($$context$$: result);
  }

  Future<ChooseInvoiceSuccessCallbackResult>
      chooseInvoice<T extends ChooseInvoiceOption>([T? option]) async {
    final result = await $$context$$?.callMethod('chooseInvoice', [option]);

    return ChooseInvoiceSuccessCallbackResult($$context$$: result);
  }

  Future<ChooseInvoiceTitleSuccessCallbackResult>
      chooseInvoiceTitle<T extends ChooseInvoiceTitleOption>(
          [T? option]) async {
    final result =
        await $$context$$?.callMethod('chooseInvoiceTitle', [option]);

    return ChooseInvoiceTitleSuccessCallbackResult($$context$$: result);
  }

  Future<ChooseLicensePlateSuccessCallbackResult>
      chooseLicensePlate<T extends ChooseLicensePlateOption>(
          [T? option]) async {
    final result =
        await $$context$$?.callMethod('chooseLicensePlate', [option]);

    return ChooseLicensePlateSuccessCallbackResult($$context$$: result);
  }

  Future<ChooseLocationSuccessCallbackResult>
      chooseLocation<T extends ChooseLocationOption>(T option) async {
    final result = await $$context$$?.callMethod('chooseLocation', [option]);

    return ChooseLocationSuccessCallbackResult($$context$$: result);
  }

  Future<ChooseMediaSuccessCallbackResult>
      chooseMedia<T extends ChooseMediaOption>(T option) async {
    final result = await $$context$$?.callMethod('chooseMedia', [option]);

    return ChooseMediaSuccessCallbackResult($$context$$: result);
  }

  Future<ChooseMessageFileSuccessCallbackResult>
      chooseMessageFile<T extends ChooseMessageFileOption>(T option) async {
    final result = await $$context$$?.callMethod('chooseMessageFile', [option]);

    return ChooseMessageFileSuccessCallbackResult($$context$$: result);
  }

  Future<ChoosePoiSuccessCallbackResult> choosePoi<T extends ChoosePoiOption>(
      T option) async {
    final result = await $$context$$?.callMethod('choosePoi', [option]);

    return ChoosePoiSuccessCallbackResult($$context$$: result);
  }

  Future<ChooseVideoSuccessCallbackResult>
      chooseVideo<T extends ChooseVideoOption>(T option) async {
    final result = await $$context$$?.callMethod('chooseVideo', [option]);

    return ChooseVideoSuccessCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> clearStorage<T extends ClearStorageOption>(
      [T? option]) async {
    final result = await $$context$$?.callMethod('clearStorage', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<void> clearStorageSync() async {
    final result = await $$context$$?.callMethod('clearStorageSync', []);
    return result;
  }

  Future<BluetoothError> closeBLEConnection<T extends CloseBLEConnectionOption>(
      T option) async {
    final result =
        await $$context$$?.callMethod('closeBLEConnection', [option]);

    return BluetoothError($$context$$: result);
  }

  Future<BluetoothError>
      closeBluetoothAdapter<T extends CloseBluetoothAdapterOption>(
          [T? option]) async {
    final result =
        await $$context$$?.callMethod('closeBluetoothAdapter', [option]);

    return BluetoothError($$context$$: result);
  }

  Future<GeneralCallbackResult> closeSocket<T extends CloseSocketOption>(
      [T? option]) async {
    final result = await $$context$$?.callMethod('closeSocket', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<CompressImageSuccessCallbackResult>
      compressImage<T extends CompressImageOption>(T option) async {
    final result = await $$context$$?.callMethod('compressImage', [option]);

    return CompressImageSuccessCallbackResult($$context$$: result);
  }

  Future<CompressVideoSuccessCallbackResult>
      compressVideo<T extends CompressVideoOption>(T option) async {
    final result = await $$context$$?.callMethod('compressVideo', [option]);

    return CompressVideoSuccessCallbackResult($$context$$: result);
  }

  Future<WifiError> connectWifi<T extends ConnectWifiOption>(T option) async {
    final result = await $$context$$?.callMethod('connectWifi', [option]);

    return WifiError($$context$$: result);
  }

  Future<BluetoothError>
      createBLEConnection<T extends CreateBLEConnectionOption>(T option) async {
    final result =
        await $$context$$?.callMethod('createBLEConnection', [option]);

    return BluetoothError($$context$$: result);
  }

  Future<CreateBLEPeripheralServerSuccessCallbackResult>
      createBLEPeripheralServer<T extends CreateBLEPeripheralServerOption>(
          [T? option]) async {
    final result =
        await $$context$$?.callMethod('createBLEPeripheralServer', [option]);

    return CreateBLEPeripheralServerSuccessCallbackResult($$context$$: result);
  }

  Future<void> cropImage(CropImageOption option) async {
    final result =
        await $$context$$?.callMethod('cropImage', [option.toJson()]);
    return result;
  }

  Future<void> disableAlertBeforeUnload(
      [DisableAlertBeforeUnloadOption? option]) async {
    final result = await $$context$$
        ?.callMethod('disableAlertBeforeUnload', [option?.toJson()]);
    return result;
  }

  Future<void> editImage(EditImageOption option) async {
    final result =
        await $$context$$?.callMethod('editImage', [option.toJson()]);
    return result;
  }

  Future<void> enableAlertBeforeUnload(
      EnableAlertBeforeUnloadOption option) async {
    final result = await $$context$$
        ?.callMethod('enableAlertBeforeUnload', [option.toJson()]);
    return result;
  }

  Future<GeneralCallbackResult>
      exitMiniProgram<T extends ExitMiniProgramOption>([T? option]) async {
    final result = await $$context$$?.callMethod('exitMiniProgram', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> exitVoIPChat<T extends ExitVoIPChatOption>(
      [T? option]) async {
    final result = await $$context$$?.callMethod('exitVoIPChat', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<void> faceDetect(FaceDetectOption option) async {
    final result =
        await $$context$$?.callMethod('faceDetect', [option.toJson()]);
    return result;
  }

  Future<GetAvailableAudioSourcesSuccessCallbackResult>
      getAvailableAudioSources<T extends GetAvailableAudioSourcesOption>(
          [T? option]) async {
    final result =
        await $$context$$?.callMethod('getAvailableAudioSources', [option]);

    return GetAvailableAudioSourcesSuccessCallbackResult($$context$$: result);
  }

  Future<GetBLEDeviceCharacteristicsSuccessCallbackResult>
      getBLEDeviceCharacteristics<T extends GetBLEDeviceCharacteristicsOption>(
          T option) async {
    final result =
        await $$context$$?.callMethod('getBLEDeviceCharacteristics', [option]);

    return GetBLEDeviceCharacteristicsSuccessCallbackResult(
        $$context$$: result);
  }

  Future<GetBLEDeviceRSSISuccessCallbackResult>
      getBLEDeviceRSSI<T extends GetBLEDeviceRSSIOption>(T option) async {
    final result = await $$context$$?.callMethod('getBLEDeviceRSSI', [option]);

    return GetBLEDeviceRSSISuccessCallbackResult($$context$$: result);
  }

  Future<GetBLEDeviceServicesSuccessCallbackResult>
      getBLEDeviceServices<T extends GetBLEDeviceServicesOption>(
          T option) async {
    final result =
        await $$context$$?.callMethod('getBLEDeviceServices', [option]);

    return GetBLEDeviceServicesSuccessCallbackResult($$context$$: result);
  }

  Future<GetBLEMTUSuccessCallbackResult> getBLEMTU<T extends GetBLEMTUOption>(
      T option) async {
    final result = await $$context$$?.callMethod('getBLEMTU', [option]);

    return GetBLEMTUSuccessCallbackResult($$context$$: result);
  }

  Future<GetBackgroundAudioPlayerStateSuccessCallbackResult>
      getBackgroundAudioPlayerState<
          T extends GetBackgroundAudioPlayerStateOption>([T? option]) async {
    final result = await $$context$$
        ?.callMethod('getBackgroundAudioPlayerState', [option]);

    return GetBackgroundAudioPlayerStateSuccessCallbackResult(
        $$context$$: result);
  }

  Future<GetBackgroundFetchDataSuccessCallbackResult>
      getBackgroundFetchData<T extends GetBackgroundFetchDataOption>(
          T option) async {
    final result =
        await $$context$$?.callMethod('getBackgroundFetchData', [option]);

    return GetBackgroundFetchDataSuccessCallbackResult($$context$$: result);
  }

  Future<GetBackgroundFetchTokenSuccessCallbackResult>
      getBackgroundFetchToken<T extends GetBackgroundFetchTokenOption>(
          [T? option]) async {
    final result =
        await $$context$$?.callMethod('getBackgroundFetchToken', [option]);

    return GetBackgroundFetchTokenSuccessCallbackResult($$context$$: result);
  }

  Future<GetBatteryInfoSuccessCallbackResult>
      getBatteryInfo<T extends GetBatteryInfoOption>([T? option]) async {
    final result = await $$context$$?.callMethod('getBatteryInfo', [option]);

    return GetBatteryInfoSuccessCallbackResult($$context$$: result);
  }

  Future<GetBeaconsSuccessCallbackResult>
      getBeacons<T extends GetBeaconsOption>([T? option]) async {
    final result = await $$context$$?.callMethod('getBeacons', [option]);

    return GetBeaconsSuccessCallbackResult($$context$$: result);
  }

  Future<GetBluetoothAdapterStateSuccessCallbackResult>
      getBluetoothAdapterState<T extends GetBluetoothAdapterStateOption>(
          [T? option]) async {
    final result =
        await $$context$$?.callMethod('getBluetoothAdapterState', [option]);

    return GetBluetoothAdapterStateSuccessCallbackResult($$context$$: result);
  }

  Future<GetBluetoothDevicesSuccessCallbackResult>
      getBluetoothDevices<T extends GetBluetoothDevicesOption>(
          [T? option]) async {
    final result =
        await $$context$$?.callMethod('getBluetoothDevices', [option]);

    return GetBluetoothDevicesSuccessCallbackResult($$context$$: result);
  }

  Future<void> getChannelsLiveInfo(GetChannelsLiveInfoOption option) async {
    final result =
        await $$context$$?.callMethod('getChannelsLiveInfo', [option.toJson()]);
    return result;
  }

  Future<void> getChannelsLiveNoticeInfo(
      GetChannelsLiveNoticeInfoOption option) async {
    final result = await $$context$$
        ?.callMethod('getChannelsLiveNoticeInfo', [option.toJson()]);
    return result;
  }

  Future<void> getChannelsShareKey([GetChannelsShareKeyOption? option]) async {
    final result = await $$context$$
        ?.callMethod('getChannelsShareKey', [option?.toJson()]);
    return result;
  }

  Future<GetClipboardDataSuccessCallbackOption>
      getClipboardData<T extends GetClipboardDataOption>([T? option]) async {
    final result = await $$context$$?.callMethod('getClipboardData', [option]);

    return GetClipboardDataSuccessCallbackOption($$context$$: result);
  }

  Future<GetConnectedBluetoothDevicesSuccessCallbackResult>
      getConnectedBluetoothDevices<
          T extends GetConnectedBluetoothDevicesOption>(T option) async {
    final result =
        await $$context$$?.callMethod('getConnectedBluetoothDevices', [option]);

    return GetConnectedBluetoothDevicesSuccessCallbackResult(
        $$context$$: result);
  }

  Future<GetConnectedWifiSuccessCallbackResult>
      getConnectedWifi<T extends GetConnectedWifiOption>(T option) async {
    final result = await $$context$$?.callMethod('getConnectedWifi', [option]);

    return GetConnectedWifiSuccessCallbackResult($$context$$: result);
  }

  Future<GetExtConfigSuccessCallbackResult>
      getExtConfig<T extends GetExtConfigOption>([T? option]) async {
    final result = await $$context$$?.callMethod('getExtConfig', [option]);

    return GetExtConfigSuccessCallbackResult($$context$$: result);
  }

  Future<void> getFuzzyLocation(GetFuzzyLocationOption option) async {
    final result =
        await $$context$$?.callMethod('getFuzzyLocation', [option.toJson()]);
    return result;
  }

  Future<void> getGroupEnterInfo(GetGroupEnterInfoOption option) async {
    final result =
        await $$context$$?.callMethod('getGroupEnterInfo', [option.toJson()]);
    return result;
  }

  Future<NFCError> getHCEState<T extends GetHCEStateOption>([T? option]) async {
    final result = await $$context$$?.callMethod('getHCEState', [option]);

    return NFCError($$context$$: result);
  }

  Future<GetImageInfoSuccessCallbackResult>
      getImageInfo<T extends GetImageInfoOption>(T option) async {
    final result = await $$context$$?.callMethod('getImageInfo', [option]);

    return GetImageInfoSuccessCallbackResult($$context$$: result);
  }

  Future<void> getLocalIPAddress(GetLocalIPAddressOption option) async {
    final result =
        await $$context$$?.callMethod('getLocalIPAddress', [option.toJson()]);
    return result;
  }

  Future<GetLocationSuccessCallbackResult>
      getLocation<T extends GetLocationOption>(T option) async {
    final result = await $$context$$?.callMethod('getLocation', [option]);

    return GetLocationSuccessCallbackResult($$context$$: result);
  }

  Future<GetNetworkTypeSuccessCallbackResult>
      getNetworkType<T extends GetNetworkTypeOption>([T? option]) async {
    final result = await $$context$$?.callMethod('getNetworkType', [option]);

    return GetNetworkTypeSuccessCallbackResult($$context$$: result);
  }

  Future<GetRandomValuesSuccessCallbackResult>
      getRandomValues<T extends GetRandomValuesOption>(T option) async {
    final result = await $$context$$?.callMethod('getRandomValues', [option]);

    return GetRandomValuesSuccessCallbackResult($$context$$: result);
  }

  Future<GetScreenBrightnessSuccessCallbackOption>
      getScreenBrightness<T extends GetScreenBrightnessOption>(
          [T? option]) async {
    final result =
        await $$context$$?.callMethod('getScreenBrightness', [option]);

    return GetScreenBrightnessSuccessCallbackOption($$context$$: result);
  }

  Future<void> getScreenRecordingState(
      [GetScreenRecordingStateOption? option]) async {
    final result = await $$context$$
        ?.callMethod('getScreenRecordingState', [option?.toJson()]);
    return result;
  }

  Future<GetSelectedTextRangeSuccessCallbackResult>
      getSelectedTextRange<T extends GetSelectedTextRangeOption>(
          [T? option]) async {
    final result =
        await $$context$$?.callMethod('getSelectedTextRange', [option]);

    return GetSelectedTextRangeSuccessCallbackResult($$context$$: result);
  }

  Future<GetSettingSuccessCallbackResult>
      getSetting<T extends GetSettingOption>([T? option]) async {
    final result = await $$context$$?.callMethod('getSetting', [option]);

    return GetSettingSuccessCallbackResult($$context$$: result);
  }

  Future<GetGroupEnterInfoSuccessCallbackResult>
      getShareInfo<T extends GetShareInfoOption>(T option) async {
    final result = await $$context$$?.callMethod('getShareInfo', [option]);

    return GetGroupEnterInfoSuccessCallbackResult($$context$$: result);
  }

  Future<void> getSkylineInfo([GetSkylineInfoOption? option]) async {
    final result =
        await $$context$$?.callMethod('getSkylineInfo', [option?.toJson()]);
    return result;
  }

  Future<PromisifySuccessResult<U, GetStorageOption<T>>>
      getStorage<T extends dynamic, U extends GetStorageOption<T>>(
          U option) async {
    final result = await $$context$$?.callMethod('getStorage', [option]);
    return result;
  }

  Future<GetStorageInfoSuccessCallbackOption>
      getStorageInfo<T extends GetStorageInfoOption>([T? option]) async {
    final result = await $$context$$?.callMethod('getStorageInfo', [option]);

    return GetStorageInfoSuccessCallbackOption($$context$$: result);
  }

  Future<SystemInfo> getSystemInfo<T extends GetSystemInfoOption>(
      [T? option]) async {
    final result = await $$context$$?.callMethod('getSystemInfo', [option]);

    return SystemInfo($$context$$: result);
  }

  Future<void> getSystemInfoAsync([GetSystemInfoAsyncOption? option]) async {
    final result =
        await $$context$$?.callMethod('getSystemInfoAsync', [option?.toJson()]);
    return result;
  }

  Future<GetUserInfoSuccessCallbackResult>
      getUserInfo<T extends GetUserInfoOption>(T option) async {
    final result = await $$context$$?.callMethod('getUserInfo', [option]);

    return GetUserInfoSuccessCallbackResult($$context$$: result);
  }

  Future<GetUserProfileSuccessCallbackResult>
      getUserProfile<T extends GetUserProfileOption>(T option) async {
    final result = await $$context$$?.callMethod('getUserProfile', [option]);

    return GetUserProfileSuccessCallbackResult($$context$$: result);
  }

  Future<GetVideoInfoSuccessCallbackResult>
      getVideoInfo<T extends GetVideoInfoOption>(T option) async {
    final result = await $$context$$?.callMethod('getVideoInfo', [option]);

    return GetVideoInfoSuccessCallbackResult($$context$$: result);
  }

  Future<GetWeRunDataSuccessCallbackResult>
      getWeRunData<T extends GetWeRunDataOption>([T? option]) async {
    final result = await $$context$$?.callMethod('getWeRunData', [option]);

    return GetWeRunDataSuccessCallbackResult($$context$$: result);
  }

  Future<WifiError> getWifiList<T extends GetWifiListOption>(
      [T? option]) async {
    final result = await $$context$$?.callMethod('getWifiList', [option]);

    return WifiError($$context$$: result);
  }

  Future<GeneralCallbackResult> hideHomeButton<T extends HideHomeButtonOption>(
      [T? option]) async {
    final result = await $$context$$?.callMethod('hideHomeButton', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> hideKeyboard<T extends HideKeyboardOption>(
      [T? option]) async {
    final result = await $$context$$?.callMethod('hideKeyboard', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> hideLoading<T extends HideLoadingOption>(
      [T? option]) async {
    final result = await $$context$$?.callMethod('hideLoading', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      hideNavigationBarLoading<T extends HideNavigationBarLoadingOption>(
          [T? option]) async {
    final result =
        await $$context$$?.callMethod('hideNavigationBarLoading', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> hideShareMenu<T extends HideShareMenuOption>(
      [T? option]) async {
    final result = await $$context$$?.callMethod('hideShareMenu', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> hideTabBar<T extends HideTabBarOption>(
      T option) async {
    final result = await $$context$$?.callMethod('hideTabBar', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      hideTabBarRedDot<T extends HideTabBarRedDotOption>(T option) async {
    final result = await $$context$$?.callMethod('hideTabBarRedDot', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> hideToast<T extends HideToastOption>(
      [T? option]) async {
    final result = await $$context$$?.callMethod('hideToast', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<void> initFaceDetect([InitFaceDetectOption? option]) async {
    final result =
        await $$context$$?.callMethod('initFaceDetect', [option?.toJson()]);
    return result;
  }

  Future<GeneralCallbackResult>
      isBluetoothDevicePaired<T extends IsBluetoothDevicePairedOption>(
          T option) async {
    final result =
        await $$context$$?.callMethod('isBluetoothDevicePaired', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<void> join1v1Chat(Join1v1ChatOption option) async {
    final result =
        await $$context$$?.callMethod('join1v1Chat', [option.toJson()]);
    return result;
  }

  Future<JoinVoIPChatSuccessCallbackResult>
      joinVoIPChat<T extends JoinVoIPChatOption>(T option) async {
    final result = await $$context$$?.callMethod('joinVoIPChat', [option]);

    return JoinVoIPChatSuccessCallbackResult($$context$$: result);
  }

  Future<LoadFontFaceCompleteCallbackResult>
      loadFontFace<T extends LoadFontFaceOption>(T option) async {
    final result = await $$context$$?.callMethod('loadFontFace', [option]);

    return LoadFontFaceCompleteCallbackResult($$context$$: result);
  }

  Future<LoginSuccessCallbackResult> login<T extends LoginOption>(
      [T? option]) async {
    final result = await $$context$$?.callMethod('login', [option]);

    return LoginSuccessCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      makeBluetoothPair<T extends MakeBluetoothPairOption>(T option) async {
    final result = await $$context$$?.callMethod('makeBluetoothPair', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> makePhoneCall<T extends MakePhoneCallOption>(
      T option) async {
    final result = await $$context$$?.callMethod('makePhoneCall', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> navigateBack<T extends NavigateBackOption>(
      [T? option]) async {
    final result = await $$context$$?.callMethod('navigateBack', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      navigateBackMiniProgram<T extends NavigateBackMiniProgramOption>(
          T option) async {
    final result =
        await $$context$$?.callMethod('navigateBackMiniProgram', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<NavigateToSuccessCallbackResult>
      navigateTo<T extends NavigateToOption>(T option) async {
    final result = await $$context$$?.callMethod('navigateTo', [option]);

    return NavigateToSuccessCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      navigateToMiniProgram<T extends NavigateToMiniProgramOption>(
          T option) async {
    final result =
        await $$context$$?.callMethod('navigateToMiniProgram', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<void> nextTick(dynamic callback) async {
    final result = await $$context$$?.callMethod('nextTick', [callback]);
    return result;
  }

  Future<BluetoothError> notifyBLECharacteristicValueChange<
      T extends NotifyBLECharacteristicValueChangeOption>(T option) async {
    final result = await $$context$$
        ?.callMethod('notifyBLECharacteristicValueChange', [option]);

    return BluetoothError($$context$$: result);
  }

  Future<void> offAccelerometerChange(
      [OffAccelerometerChangeCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offAccelerometerChange', [listener]);
    return result;
  }

  Future<void> offAppHide([OffAppHideCallback? listener]) async {
    final result = await $$context$$?.callMethod('offAppHide', [listener]);
    return result;
  }

  Future<void> offAppShow([OffAppShowCallback? listener]) async {
    final result = await $$context$$?.callMethod('offAppShow', [listener]);
    return result;
  }

  Future<void> offAudioInterruptionBegin(
      [OffAudioInterruptionBeginCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offAudioInterruptionBegin', [listener]);
    return result;
  }

  Future<void> offAudioInterruptionEnd(
      [OffAudioInterruptionEndCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offAudioInterruptionEnd', [listener]);
    return result;
  }

  Future<void> offBLECharacteristicValueChange(
      [OffBLECharacteristicValueChangeCallback? listener]) async {
    final result = await $$context$$
        ?.callMethod('offBLECharacteristicValueChange', [listener]);
    return result;
  }

  Future<void> offBLEConnectionStateChange(
      [OffBLEConnectionStateChangeCallback? listener]) async {
    final result = await $$context$$
        ?.callMethod('offBLEConnectionStateChange', [listener]);
    return result;
  }

  Future<void> offBLEMTUChange([OffBLEMTUChangeCallback? listener]) async {
    final result = await $$context$$?.callMethod('offBLEMTUChange', [listener]);
    return result;
  }

  Future<void> offBLEPeripheralConnectionStateChanged(
      [OffBLEPeripheralConnectionStateChangedCallback? listener]) async {
    final result = await $$context$$
        ?.callMethod('offBLEPeripheralConnectionStateChanged', [listener]);
    return result;
  }

  Future<void> offBeaconServiceChange(
      [OffBeaconServiceChangeCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offBeaconServiceChange', [listener]);
    return result;
  }

  Future<void> offBeaconUpdate([OffBeaconUpdateCallback? listener]) async {
    final result = await $$context$$?.callMethod('offBeaconUpdate', [listener]);
    return result;
  }

  Future<void> offBluetoothAdapterStateChange(
      [OffBluetoothAdapterStateChangeCallback? listener]) async {
    final result = await $$context$$
        ?.callMethod('offBluetoothAdapterStateChange', [listener]);
    return result;
  }

  Future<void> offBluetoothDeviceFound(
      [OffBluetoothDeviceFoundCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offBluetoothDeviceFound', [listener]);
    return result;
  }

  Future<void> offCompassChange([OffCompassChangeCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offCompassChange', [listener]);
    return result;
  }

  Future<void> offCopyUrl([OffCopyUrlCallback? listener]) async {
    final result = await $$context$$?.callMethod('offCopyUrl', [listener]);
    return result;
  }

  Future<void> offDeviceMotionChange(
      [OffDeviceMotionChangeCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offDeviceMotionChange', [listener]);
    return result;
  }

  Future<void> offError([WxOffErrorCallback? listener]) async {
    final result = await $$context$$?.callMethod('offError', [listener]);
    return result;
  }

  Future<void> offGetWifiList([OffGetWifiListCallback? listener]) async {
    final result = await $$context$$?.callMethod('offGetWifiList', [listener]);
    return result;
  }

  Future<void> offHCEMessage([OffHCEMessageCallback? listener]) async {
    final result = await $$context$$?.callMethod('offHCEMessage', [listener]);
    return result;
  }

  Future<void> offKeyboardHeightChange(
      [OffKeyboardHeightChangeCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offKeyboardHeightChange', [listener]);
    return result;
  }

  Future<void> offLazyLoadError([OffLazyLoadErrorCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offLazyLoadError', [listener]);
    return result;
  }

  Future<void> offLocalServiceDiscoveryStop(
      [OffLocalServiceDiscoveryStopCallback? listener]) async {
    final result = await $$context$$
        ?.callMethod('offLocalServiceDiscoveryStop', [listener]);
    return result;
  }

  Future<void> offLocalServiceFound(
      [OffLocalServiceFoundCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offLocalServiceFound', [listener]);
    return result;
  }

  Future<void> offLocalServiceLost(
      [OffLocalServiceLostCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offLocalServiceLost', [listener]);
    return result;
  }

  Future<void> offLocalServiceResolveFail(
      [OffLocalServiceResolveFailCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offLocalServiceResolveFail', [listener]);
    return result;
  }

  Future<void> offLocationChange([OffLocationChangeCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offLocationChange', [listener]);
    return result;
  }

  Future<void> offLocationChangeError(
      [OffLocationChangeErrorCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offLocationChangeError', [listener]);
    return result;
  }

  Future<void> offMemoryWarning([OffMemoryWarningCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offMemoryWarning', [listener]);
    return result;
  }

  Future<void> offNetworkStatusChange(
      [OffNetworkStatusChangeCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offNetworkStatusChange', [listener]);
    return result;
  }

  Future<void> offNetworkWeakChange(
      [OffNetworkWeakChangeCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offNetworkWeakChange', [listener]);
    return result;
  }

  Future<void> offPageNotFound([OffPageNotFoundCallback? listener]) async {
    final result = await $$context$$?.callMethod('offPageNotFound', [listener]);
    return result;
  }

  Future<void> offScreenRecordingStateChanged(
      [OffScreenRecordingStateChangedCallback? listener]) async {
    final result = await $$context$$
        ?.callMethod('offScreenRecordingStateChanged', [listener]);
    return result;
  }

  Future<void> offThemeChange([OffThemeChangeCallback? listener]) async {
    final result = await $$context$$?.callMethod('offThemeChange', [listener]);
    return result;
  }

  Future<void> offUnhandledRejection(
      [OffUnhandledRejectionCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offUnhandledRejection', [listener]);
    return result;
  }

  Future<void> offUserCaptureScreen([dynamic callback]) async {
    final result =
        await $$context$$?.callMethod('offUserCaptureScreen', [callback]);
    return result;
  }

  Future<void> offVoIPChatInterrupted(
      [OffVoIPChatInterruptedCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offVoIPChatInterrupted', [listener]);
    return result;
  }

  Future<void> offVoIPChatMembersChanged(
      [OffVoIPChatMembersChangedCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offVoIPChatMembersChanged', [listener]);
    return result;
  }

  Future<void> offVoIPChatSpeakersChanged(
      [OffVoIPChatSpeakersChangedCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offVoIPChatSpeakersChanged', [listener]);
    return result;
  }

  Future<void> offVoIPChatStateChanged(
      [OffVoIPChatStateChangedCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offVoIPChatStateChanged', [listener]);
    return result;
  }

  Future<void> offVoIPVideoMembersChanged(
      [OffVoIPVideoMembersChangedCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offVoIPVideoMembersChanged', [listener]);
    return result;
  }

  Future<void> offWifiConnected([OffWifiConnectedCallback? listener]) async {
    final result =
        await $$context$$?.callMethod('offWifiConnected', [listener]);
    return result;
  }

  Future<void> offWifiConnectedWithPartialInfo(
      [OffWifiConnectedWithPartialInfoCallback? listener]) async {
    final result = await $$context$$
        ?.callMethod('offWifiConnectedWithPartialInfo', [listener]);
    return result;
  }

  Future<void> offWindowResize([OffWindowResizeCallback? listener]) async {
    final result = await $$context$$?.callMethod('offWindowResize', [listener]);
    return result;
  }

  Future<void> onAccelerometerChange(
      OnAccelerometerChangeCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnAccelerometerChangeListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onAccelerometerChange', [listener]);
    return result;
  }

  Future<void> onAppHide(OnAppHideCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onAppHide', [listener]);
    return result;
  }

  Future<void> onAppShow(OnAppShowCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(LaunchOptionsApp($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onAppShow', [listener]);
    return result;
  }

  Future<void> onAudioInterruptionBegin(
      OnAudioInterruptionBeginCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onAudioInterruptionBegin', [listener]);
    return result;
  }

  Future<void> onAudioInterruptionEnd(
      OnAudioInterruptionEndCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onAudioInterruptionEnd', [listener]);
    return result;
  }

  Future<void> onBLECharacteristicValueChange(
      OnBLECharacteristicValueChangeCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnBLECharacteristicValueChangeListenerResult($$context$$: obj));
    });
    final result = await $$context$$
        ?.callMethod('onBLECharacteristicValueChange', [listener]);
    return result;
  }

  Future<void> onBLEConnectionStateChange(
      OnBLEConnectionStateChangeCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnBLEConnectionStateChangeListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onBLEConnectionStateChange', [listener]);
    return result;
  }

  Future<void> onBLEMTUChange(OnBLEMTUChangeCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnBLEMTUChangeListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onBLEMTUChange', [listener]);
    return result;
  }

  Future<void> onBLEPeripheralConnectionStateChanged(
      OnBLEPeripheralConnectionStateChangedCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnBLEPeripheralConnectionStateChangedListenerResult(
          $$context$$: obj));
    });
    final result = await $$context$$
        ?.callMethod('onBLEPeripheralConnectionStateChanged', [listener]);
    return result;
  }

  Future<void> onBackgroundAudioPause(
      OnBackgroundAudioPauseCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onBackgroundAudioPause', [listener]);
    return result;
  }

  Future<void> onBackgroundAudioPlay(
      OnBackgroundAudioPlayCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onBackgroundAudioPlay', [listener]);
    return result;
  }

  Future<void> onBackgroundAudioStop(
      OnBackgroundAudioStopCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onBackgroundAudioStop', [listener]);
    return result;
  }

  Future<void> onBackgroundFetchData(
      OnBackgroundFetchDataCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnBackgroundFetchDataListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onBackgroundFetchData', [listener]);
    return result;
  }

  Future<void> onBeaconServiceChange(
      OnBeaconServiceChangeCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnBeaconServiceChangeListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onBeaconServiceChange', [listener]);
    return result;
  }

  Future<void> onBeaconUpdate(OnBeaconUpdateCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnBeaconUpdateListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onBeaconUpdate', [listener]);
    return result;
  }

  Future<void> onBluetoothAdapterStateChange(
      OnBluetoothAdapterStateChangeCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnBluetoothAdapterStateChangeListenerResult($$context$$: obj));
    });
    final result = await $$context$$
        ?.callMethod('onBluetoothAdapterStateChange', [listener]);
    return result;
  }

  Future<void> onBluetoothDeviceFound(
      OnBluetoothDeviceFoundCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnBluetoothDeviceFoundListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onBluetoothDeviceFound', [listener]);
    return result;
  }

  Future<void> onCompassChange(OnCompassChangeCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnCompassChangeListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onCompassChange', [listener]);
    return result;
  }

  Future<void> onCopyUrl(OnCopyUrlCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnCopyUrlListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onCopyUrl', [listener]);
    return result;
  }

  Future<void> onDeviceMotionChange(
      OnDeviceMotionChangeCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnDeviceMotionChangeListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onDeviceMotionChange', [listener]);
    return result;
  }

  Future<void> onError(WxOnErrorCallback listener) async {
    final result = await $$context$$?.callMethod('onError', [listener]);
    return result;
  }

  Future<void> onGetWifiList(OnGetWifiListCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnGetWifiListListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onGetWifiList', [listener]);
    return result;
  }

  Future<void> onGyroscopeChange(OnGyroscopeChangeCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnGyroscopeChangeListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onGyroscopeChange', [listener]);
    return result;
  }

  Future<void> onHCEMessage(OnHCEMessageCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnHCEMessageListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onHCEMessage', [listener]);
    return result;
  }

  Future<void> onKeyboardHeightChange(
      OnKeyboardHeightChangeCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnKeyboardHeightChangeListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onKeyboardHeightChange', [listener]);
    return result;
  }

  Future<void> onLazyLoadError(OnLazyLoadErrorCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnLazyLoadErrorListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onLazyLoadError', [listener]);
    return result;
  }

  Future<void> onLocalServiceDiscoveryStop(
      OnLocalServiceDiscoveryStopCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$
        ?.callMethod('onLocalServiceDiscoveryStop', [listener]);
    return result;
  }

  Future<void> onLocalServiceFound(OnLocalServiceFoundCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnLocalServiceFoundListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onLocalServiceFound', [listener]);
    return result;
  }

  Future<void> onLocalServiceLost(OnLocalServiceLostCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnLocalServiceLostListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onLocalServiceLost', [listener]);
    return result;
  }

  Future<void> onLocalServiceResolveFail(
      OnLocalServiceResolveFailCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnLocalServiceLostListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onLocalServiceResolveFail', [listener]);
    return result;
  }

  Future<void> onLocationChange(OnLocationChangeCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnLocationChangeListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onLocationChange', [listener]);
    return result;
  }

  Future<void> onLocationChangeError(
      OnLocationChangeErrorCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnLocationChangeErrorListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onLocationChangeError', [listener]);
    return result;
  }

  Future<void> onMemoryWarning(OnMemoryWarningCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnMemoryWarningListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onMemoryWarning', [listener]);
    return result;
  }

  Future<void> onNetworkStatusChange(
      OnNetworkStatusChangeCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnNetworkStatusChangeListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onNetworkStatusChange', [listener]);
    return result;
  }

  Future<void> onNetworkWeakChange(OnNetworkWeakChangeCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnNetworkWeakChangeListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onNetworkWeakChange', [listener]);
    return result;
  }

  Future<void> onPageNotFound(OnPageNotFoundCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnPageNotFoundListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onPageNotFound', [listener]);
    return result;
  }

  Future<void> onScreenRecordingStateChanged(
      OnScreenRecordingStateChangedCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnScreenRecordingStateChangedListenerResult($$context$$: obj));
    });
    final result = await $$context$$
        ?.callMethod('onScreenRecordingStateChanged', [listener]);
    return result;
  }

  Future<void> onSocketClose(OnSocketCloseCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(SocketTaskOnCloseListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onSocketClose', [listener]);
    return result;
  }

  Future<void> onSocketError(OnSocketErrorCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onSocketError', [listener]);
    return result;
  }

  Future<void> onSocketMessage(OnSocketMessageCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(SocketTaskOnMessageListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onSocketMessage', [listener]);
    return result;
  }

  Future<void> onSocketOpen(OnSocketOpenCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnSocketOpenListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onSocketOpen', [listener]);
    return result;
  }

  Future<void> onThemeChange(OnThemeChangeCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnThemeChangeListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onThemeChange', [listener]);
    return result;
  }

  Future<void> onUnhandledRejection(
      OnUnhandledRejectionCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnUnhandledRejectionListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onUnhandledRejection', [listener]);
    return result;
  }

  Future<void> onUserCaptureScreen(OnUserCaptureScreenCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(GeneralCallbackResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onUserCaptureScreen', [listener]);
    return result;
  }

  Future<void> onVoIPChatInterrupted(
      OnVoIPChatInterruptedCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnVoIPChatInterruptedListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onVoIPChatInterrupted', [listener]);
    return result;
  }

  Future<void> onVoIPChatMembersChanged(
      OnVoIPChatMembersChangedCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnVoIPChatMembersChangedListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onVoIPChatMembersChanged', [listener]);
    return result;
  }

  Future<void> onVoIPChatSpeakersChanged(
      OnVoIPChatSpeakersChangedCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnVoIPChatSpeakersChangedListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onVoIPChatSpeakersChanged', [listener]);
    return result;
  }

  Future<void> onVoIPChatStateChanged(
      OnVoIPChatStateChangedCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnVoIPChatStateChangedListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onVoIPChatStateChanged', [listener]);
    return result;
  }

  Future<void> onVoIPVideoMembersChanged(
      OnVoIPVideoMembersChangedCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnVoIPVideoMembersChangedListenerResult($$context$$: obj));
    });
    final result =
        await $$context$$?.callMethod('onVoIPVideoMembersChanged', [listener]);
    return result;
  }

  Future<void> onWifiConnected(OnWifiConnectedCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnWifiConnectedListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onWifiConnected', [listener]);
    return result;
  }

  Future<void> onWifiConnectedWithPartialInfo(
      OnWifiConnectedWithPartialInfoCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnWifiConnectedWithPartialInfoListenerResult($$context$$: obj));
    });
    final result = await $$context$$
        ?.callMethod('onWifiConnectedWithPartialInfo', [listener]);
    return result;
  }

  Future<void> onWindowResize(OnWindowResizeCallback listener) async {
    mpjs.JsObject.mirrorFunction(listener, (obj) {
      listener(OnWindowResizeListenerResult($$context$$: obj));
    });
    final result = await $$context$$?.callMethod('onWindowResize', [listener]);
    return result;
  }

  Future<GeneralCallbackResult>
      openAppAuthorizeSetting<T extends OpenAppAuthorizeSettingOption>(
          [T? option]) async {
    final result =
        await $$context$$?.callMethod('openAppAuthorizeSetting', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<BluetoothError>
      openBluetoothAdapter<T extends OpenBluetoothAdapterOption>(
          [T? option]) async {
    final result =
        await $$context$$?.callMethod('openBluetoothAdapter', [option]);

    return BluetoothError($$context$$: result);
  }

  Future<GeneralCallbackResult> openCard<T extends OpenCardOption>(
      T option) async {
    final result = await $$context$$?.callMethod('openCard', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<void> openChannelsActivity(OpenChannelsActivityOption option) async {
    final result = await $$context$$
        ?.callMethod('openChannelsActivity', [option.toJson()]);
    return result;
  }

  Future<void> openChannelsEvent(OpenChannelsEventOption option) async {
    final result =
        await $$context$$?.callMethod('openChannelsEvent', [option.toJson()]);
    return result;
  }

  Future<void> openChannelsLive(OpenChannelsLiveOption option) async {
    final result =
        await $$context$$?.callMethod('openChannelsLive', [option.toJson()]);
    return result;
  }

  Future<void> openChannelsUserProfile(
      OpenChannelsUserProfileOption option) async {
    final result = await $$context$$
        ?.callMethod('openChannelsUserProfile', [option.toJson()]);
    return result;
  }

  Future<void> openCustomerServiceChat(
      OpenCustomerServiceChatOption option) async {
    final result = await $$context$$
        ?.callMethod('openCustomerServiceChat', [option.toJson()]);
    return result;
  }

  Future<GeneralCallbackResult> openDocument<T extends OpenDocumentOption>(
      T option) async {
    final result = await $$context$$?.callMethod('openDocument', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      openEmbeddedMiniProgram<T extends OpenEmbeddedMiniProgramOption>(
          T option) async {
    final result =
        await $$context$$?.callMethod('openEmbeddedMiniProgram', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> openLocation<T extends OpenLocationOption>(
      T option) async {
    final result = await $$context$$?.callMethod('openLocation', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<OpenSettingSuccessCallbackResult>
      openSetting<T extends OpenSettingOption>([T? option]) async {
    final result = await $$context$$?.callMethod('openSetting', [option]);

    return OpenSettingSuccessCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      openSystemBluetoothSetting<T extends OpenSystemBluetoothSettingOption>(
          [T? option]) async {
    final result =
        await $$context$$?.callMethod('openSystemBluetoothSetting', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<void> openVideoEditor(OpenVideoEditorOption option) async {
    final result =
        await $$context$$?.callMethod('openVideoEditor', [option.toJson()]);
    return result;
  }

  Future<GeneralCallbackResult> pageScrollTo<T extends PageScrollToOption>(
      T option) async {
    final result = await $$context$$?.callMethod('pageScrollTo', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      pauseBackgroundAudio<T extends PauseBackgroundAudioOption>(
          [T? option]) async {
    final result =
        await $$context$$?.callMethod('pauseBackgroundAudio', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> pauseVoice<T extends PauseVoiceOption>(
      [T? option]) async {
    final result = await $$context$$?.callMethod('pauseVoice', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      playBackgroundAudio<T extends PlayBackgroundAudioOption>(T option) async {
    final result =
        await $$context$$?.callMethod('playBackgroundAudio', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> playVoice<T extends PlayVoiceOption>(
      T option) async {
    final result = await $$context$$?.callMethod('playVoice', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<void> pluginLogin([PluginLoginOption? args]) async {
    final result =
        await $$context$$?.callMethod('pluginLogin', [args?.toJson()]);
    return result;
  }

  Future<void> preloadAssets(PreloadAssetsOption option) async {
    final result =
        await $$context$$?.callMethod('preloadAssets', [option.toJson()]);
    return result;
  }

  Future<void> preloadSkylineView([PreloadSkylineViewOption? option]) async {
    final result =
        await $$context$$?.callMethod('preloadSkylineView', [option?.toJson()]);
    return result;
  }

  Future<void> preloadWebview([PreloadWebviewOption? option]) async {
    final result =
        await $$context$$?.callMethod('preloadWebview', [option?.toJson()]);
    return result;
  }

  Future<GeneralCallbackResult> previewImage<T extends PreviewImageOption>(
      T option) async {
    final result = await $$context$$?.callMethod('previewImage', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> previewMedia<T extends PreviewMediaOption>(
      T option) async {
    final result = await $$context$$?.callMethod('previewMedia', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> reLaunch<T extends ReLaunchOption>(
      T option) async {
    final result = await $$context$$?.callMethod('reLaunch', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<BluetoothError>
      readBLECharacteristicValue<T extends ReadBLECharacteristicValueOption>(
          T option) async {
    final result =
        await $$context$$?.callMethod('readBLECharacteristicValue', [option]);

    return BluetoothError($$context$$: result);
  }

  Future<GeneralCallbackResult> redirectTo<T extends RedirectToOption>(
      T option) async {
    final result = await $$context$$?.callMethod('redirectTo', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> removeStorage<T extends RemoveStorageOption>(
      T option) async {
    final result = await $$context$$?.callMethod('removeStorage', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<void> removeStorageSync(String key) async {
    final result = await $$context$$?.callMethod('removeStorageSync', [key]);
    return result;
  }

  Future<GeneralCallbackResult>
      removeTabBarBadge<T extends RemoveTabBarBadgeOption>(T option) async {
    final result = await $$context$$?.callMethod('removeTabBarBadge', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<void> reportAnalytics(String eventName, IAnyObject data) async {
    final result = await $$context$$
        ?.callMethod('reportAnalytics', [eventName, data.toJson()]);
    return result;
  }

  Future<void> reportEvent(String eventId, [IAnyObject? data]) async {
    final result =
        await $$context$$?.callMethod('reportEvent', [eventId, data?.toJson()]);
    return result;
  }

  Future<void> reportMonitor(String name, num value) async {
    final result =
        await $$context$$?.callMethod('reportMonitor', [name, value]);
    return result;
  }

  Future<void> reportPerformance(num id, num value,
      [dynamic dimensions]) async {
    final result = await $$context$$
        ?.callMethod('reportPerformance', [id, value, dimensions]);
    return result;
  }

  Future<GeneralCallbackResult>
      requestOrderPayment<T extends RequestOrderPaymentOption>(T args) async {
    final result = await $$context$$?.callMethod('requestOrderPayment', [args]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> requestPayment<T extends RequestPaymentOption>(
      T option) async {
    final result = await $$context$$?.callMethod('requestPayment', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<void> requestPluginPayment(RequestPluginPaymentOption option) async {
    final result = await $$context$$
        ?.callMethod('requestPluginPayment', [option.toJson()]);
    return result;
  }

  Future<RequestSubscribeDeviceMessageSuccessCallbackResult>
      requestSubscribeDeviceMessage<
          T extends RequestSubscribeDeviceMessageOption>(T option) async {
    final result = await $$context$$
        ?.callMethod('requestSubscribeDeviceMessage', [option]);

    return RequestSubscribeDeviceMessageSuccessCallbackResult(
        $$context$$: result);
  }

  Future<RequestSubscribeMessageSuccessCallbackResult>
      requestSubscribeMessage<T extends RequestSubscribeMessageOption>(
          T option) async {
    final result =
        await $$context$$?.callMethod('requestSubscribeMessage', [option]);

    return RequestSubscribeMessageSuccessCallbackResult($$context$$: result);
  }

  Future<void> reserveChannelsLive(ReserveChannelsLiveOption option) async {
    final result =
        await $$context$$?.callMethod('reserveChannelsLive', [option.toJson()]);
    return result;
  }

  Future<void> revokeBufferURL(String url) async {
    final result = await $$context$$?.callMethod('revokeBufferURL', [url]);
    return result;
  }

  Future<void> saveFileToDisk(SaveFileToDiskOption option) async {
    final result =
        await $$context$$?.callMethod('saveFileToDisk', [option.toJson()]);
    return result;
  }

  Future<GeneralCallbackResult>
      saveImageToPhotosAlbum<T extends SaveImageToPhotosAlbumOption>(
          T option) async {
    final result =
        await $$context$$?.callMethod('saveImageToPhotosAlbum', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      saveVideoToPhotosAlbum<T extends SaveVideoToPhotosAlbumOption>(
          T option) async {
    final result =
        await $$context$$?.callMethod('saveVideoToPhotosAlbum', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<ScanCodeSuccessCallbackResult> scanCode<T extends ScanCodeOption>(
      T option) async {
    final result = await $$context$$?.callMethod('scanCode', [option]);

    return ScanCodeSuccessCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      seekBackgroundAudio<T extends SeekBackgroundAudioOption>(T option) async {
    final result =
        await $$context$$?.callMethod('seekBackgroundAudio', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<NFCError> sendHCEMessage<T extends SendHCEMessageOption>(
      T option) async {
    final result = await $$context$$?.callMethod('sendHCEMessage', [option]);

    return NFCError($$context$$: result);
  }

  Future<void> sendSms(SendSmsOption option) async {
    final result = await $$context$$?.callMethod('sendSms', [option.toJson()]);
    return result;
  }

  Future<GeneralCallbackResult>
      sendSocketMessage<T extends SendSocketMessageOption>(T option) async {
    final result = await $$context$$?.callMethod('sendSocketMessage', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<SetBLEMTUSuccessCallbackResult> setBLEMTU<T extends SetBLEMTUOption>(
      T option) async {
    final result = await $$context$$?.callMethod('setBLEMTU', [option]);

    return SetBLEMTUSuccessCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      setBackgroundColor<T extends SetBackgroundColorOption>(T option) async {
    final result =
        await $$context$$?.callMethod('setBackgroundColor', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      setBackgroundFetchToken<T extends SetBackgroundFetchTokenOption>(
          T option) async {
    final result =
        await $$context$$?.callMethod('setBackgroundFetchToken', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      setBackgroundTextStyle<T extends SetBackgroundTextStyleOption>(
          T option) async {
    final result =
        await $$context$$?.callMethod('setBackgroundTextStyle', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      setClipboardData<T extends SetClipboardDataOption>(T option) async {
    final result = await $$context$$?.callMethod('setClipboardData', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<void> setEnable1v1Chat(SetEnable1v1ChatOption option) async {
    final result =
        await $$context$$?.callMethod('setEnable1v1Chat', [option.toJson()]);
    return result;
  }

  Future<GeneralCallbackResult> setEnableDebug<T extends SetEnableDebugOption>(
      T option) async {
    final result = await $$context$$?.callMethod('setEnableDebug', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      setInnerAudioOption<T extends SetInnerAudioOption>(T option) async {
    final result =
        await $$context$$?.callMethod('setInnerAudioOption', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      setKeepScreenOn<T extends SetKeepScreenOnOption>(T option) async {
    final result = await $$context$$?.callMethod('setKeepScreenOn', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      setNavigationBarColor<T extends SetNavigationBarColorOption>(
          T option) async {
    final result =
        await $$context$$?.callMethod('setNavigationBarColor', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      setNavigationBarTitle<T extends SetNavigationBarTitleOption>(
          T option) async {
    final result =
        await $$context$$?.callMethod('setNavigationBarTitle', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      setScreenBrightness<T extends SetScreenBrightnessOption>(T option) async {
    final result =
        await $$context$$?.callMethod('setScreenBrightness', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<PromisifySuccessResult<U, SetStorageOption<T>>>
      setStorage<T extends dynamic, U extends SetStorageOption<T>>(
          U option) async {
    final result = await $$context$$?.callMethod('setStorage', [option]);
    return result;
  }

  Future<void> setStorageSync<T extends dynamic>(String key, T data) async {
    final result = await $$context$$?.callMethod('setStorageSync', [key, data]);
    return result;
  }

  Future<GeneralCallbackResult> setTabBarBadge<T extends SetTabBarBadgeOption>(
      T option) async {
    final result = await $$context$$?.callMethod('setTabBarBadge', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> setTabBarItem<T extends SetTabBarItemOption>(
      T option) async {
    final result = await $$context$$?.callMethod('setTabBarItem', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> setTabBarStyle<T extends SetTabBarStyleOption>(
      [T? option]) async {
    final result = await $$context$$?.callMethod('setTabBarStyle', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> setTopBarText<T extends SetTopBarTextOption>(
      T option) async {
    final result = await $$context$$?.callMethod('setTopBarText', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<void> setVisualEffectOnCapture(
      SetVisualEffectOnCaptureOption option) async {
    final result = await $$context$$
        ?.callMethod('setVisualEffectOnCapture', [option.toJson()]);
    return result;
  }

  Future<WifiError> setWifiList<T extends SetWifiListOption>(T option) async {
    final result = await $$context$$?.callMethod('setWifiList', [option]);

    return WifiError($$context$$: result);
  }

  Future<void> setWindowSize(SetWindowSizeOption option) async {
    final result =
        await $$context$$?.callMethod('setWindowSize', [option.toJson()]);
    return result;
  }

  Future<GeneralCallbackResult>
      shareFileMessage<T extends ShareFileMessageOption>(T option) async {
    final result = await $$context$$?.callMethod('shareFileMessage', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> shareToWeRun<T extends ShareToWeRunOption>(
      T option) async {
    final result = await $$context$$?.callMethod('shareToWeRun', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      shareVideoMessage<T extends ShareVideoMessageOption>(T option) async {
    final result = await $$context$$?.callMethod('shareVideoMessage', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<ShowActionSheetSuccessCallbackResult>
      showActionSheet<T extends ShowActionSheetOption>(T option) async {
    final result = await $$context$$?.callMethod('showActionSheet', [option]);

    return ShowActionSheetSuccessCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> showLoading<T extends ShowLoadingOption>(
      T option) async {
    final result = await $$context$$?.callMethod('showLoading', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<ShowModalSuccessCallbackResult> showModal<T extends ShowModalOption>(
      T option) async {
    final result = await $$context$$?.callMethod('showModal', [option]);

    return ShowModalSuccessCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      showNavigationBarLoading<T extends ShowNavigationBarLoadingOption>(
          [T? option]) async {
    final result =
        await $$context$$?.callMethod('showNavigationBarLoading', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> showRedPackage<T extends ShowRedPackageOption>(
      T option) async {
    final result = await $$context$$?.callMethod('showRedPackage', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      showShareImageMenu<T extends ShowShareImageMenuOption>(T option) async {
    final result =
        await $$context$$?.callMethod('showShareImageMenu', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> showShareMenu<T extends ShowShareMenuOption>(
      T option) async {
    final result = await $$context$$?.callMethod('showShareMenu', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> showTabBar<T extends ShowTabBarOption>(
      T option) async {
    final result = await $$context$$?.callMethod('showTabBar', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      showTabBarRedDot<T extends ShowTabBarRedDotOption>(T option) async {
    final result = await $$context$$?.callMethod('showTabBarRedDot', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> showToast<T extends ShowToastOption>(
      T option) async {
    final result = await $$context$$?.callMethod('showToast', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      startAccelerometer<T extends StartAccelerometerOption>(
          [T? option]) async {
    final result =
        await $$context$$?.callMethod('startAccelerometer', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<BeaconError>
      startBeaconDiscovery<T extends StartBeaconDiscoveryOption>(
          T option) async {
    final result =
        await $$context$$?.callMethod('startBeaconDiscovery', [option]);

    return BeaconError($$context$$: result);
  }

  Future<BluetoothError> startBluetoothDevicesDiscovery<
      T extends StartBluetoothDevicesDiscoveryOption>(T option) async {
    final result = await $$context$$
        ?.callMethod('startBluetoothDevicesDiscovery', [option]);

    return BluetoothError($$context$$: result);
  }

  Future<GeneralCallbackResult> startCompass<T extends StartCompassOption>(
      [T? option]) async {
    final result = await $$context$$?.callMethod('startCompass', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      startDeviceMotionListening<T extends StartDeviceMotionListeningOption>(
          [T? option]) async {
    final result =
        await $$context$$?.callMethod('startDeviceMotionListening', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> startGyroscope<T extends StartGyroscopeOption>(
      [T? option]) async {
    final result = await $$context$$?.callMethod('startGyroscope', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<NFCError> startHCE<T extends StartHCEOption>(T option) async {
    final result = await $$context$$?.callMethod('startHCE', [option]);

    return NFCError($$context$$: result);
  }

  Future<GeneralCallbackResult>
      startLocalServiceDiscovery<T extends StartLocalServiceDiscoveryOption>(
          T option) async {
    final result =
        await $$context$$?.callMethod('startLocalServiceDiscovery', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      startLocationUpdate<T extends StartLocationUpdateOption>(T option) async {
    final result =
        await $$context$$?.callMethod('startLocationUpdate', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> startLocationUpdateBackground<
      T extends StartLocationUpdateBackgroundOption>(T option) async {
    final result = await $$context$$
        ?.callMethod('startLocationUpdateBackground', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      startPullDownRefresh<T extends StartPullDownRefreshOption>(
          [T? option]) async {
    final result =
        await $$context$$?.callMethod('startPullDownRefresh', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<StartRecordSuccessCallbackResult>
      startRecord<T extends WxStartRecordOption>([T? option]) async {
    final result = await $$context$$?.callMethod('startRecord', [option]);

    return StartRecordSuccessCallbackResult($$context$$: result);
  }

  Future<StartSoterAuthenticationSuccessCallbackResult>
      startSoterAuthentication<T extends StartSoterAuthenticationOption>(
          T option) async {
    final result =
        await $$context$$?.callMethod('startSoterAuthentication', [option]);

    return StartSoterAuthenticationSuccessCallbackResult($$context$$: result);
  }

  Future<WifiError> startWifi<T extends StartWifiOption>([T? option]) async {
    final result = await $$context$$?.callMethod('startWifi', [option]);

    return WifiError($$context$$: result);
  }

  Future<GeneralCallbackResult>
      stopAccelerometer<T extends StopAccelerometerOption>([T? option]) async {
    final result = await $$context$$?.callMethod('stopAccelerometer', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      stopBackgroundAudio<T extends StopBackgroundAudioOption>(
          [T? option]) async {
    final result =
        await $$context$$?.callMethod('stopBackgroundAudio', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<BeaconError> stopBeaconDiscovery<T extends StopBeaconDiscoveryOption>(
      [T? option]) async {
    final result =
        await $$context$$?.callMethod('stopBeaconDiscovery', [option]);

    return BeaconError($$context$$: result);
  }

  Future<BluetoothError> stopBluetoothDevicesDiscovery<
      T extends StopBluetoothDevicesDiscoveryOption>([T? option]) async {
    final result = await $$context$$
        ?.callMethod('stopBluetoothDevicesDiscovery', [option]);

    return BluetoothError($$context$$: result);
  }

  Future<GeneralCallbackResult> stopCompass<T extends StopCompassOption>(
      [T? option]) async {
    final result = await $$context$$?.callMethod('stopCompass', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      stopDeviceMotionListening<T extends StopDeviceMotionListeningOption>(
          [T? option]) async {
    final result =
        await $$context$$?.callMethod('stopDeviceMotionListening', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<void> stopFaceDetect([StopFaceDetectOption? option]) async {
    final result =
        await $$context$$?.callMethod('stopFaceDetect', [option?.toJson()]);
    return result;
  }

  Future<GeneralCallbackResult> stopGyroscope<T extends StopGyroscopeOption>(
      [T? option]) async {
    final result = await $$context$$?.callMethod('stopGyroscope', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<NFCError> stopHCE<T extends StopHCEOption>([T? option]) async {
    final result = await $$context$$?.callMethod('stopHCE', [option]);

    return NFCError($$context$$: result);
  }

  Future<GeneralCallbackResult>
      stopLocalServiceDiscovery<T extends StopLocalServiceDiscoveryOption>(
          [T? option]) async {
    final result =
        await $$context$$?.callMethod('stopLocalServiceDiscovery', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      stopLocationUpdate<T extends StopLocationUpdateOption>(
          [T? option]) async {
    final result =
        await $$context$$?.callMethod('stopLocationUpdate', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      stopPullDownRefresh<T extends StopPullDownRefreshOption>(
          [T? option]) async {
    final result =
        await $$context$$?.callMethod('stopPullDownRefresh', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> stopRecord<T extends WxStopRecordOption>(
      [T? option]) async {
    final result = await $$context$$?.callMethod('stopRecord', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> stopVoice<T extends StopVoiceOption>(
      [T? option]) async {
    final result = await $$context$$?.callMethod('stopVoice', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<WifiError> stopWifi<T extends StopWifiOption>([T? option]) async {
    final result = await $$context$$?.callMethod('stopWifi', [option]);

    return WifiError($$context$$: result);
  }

  Future<GeneralCallbackResult>
      subscribeVoIPVideoMembers<T extends SubscribeVoIPVideoMembersOption>(
          T option) async {
    final result =
        await $$context$$?.callMethod('subscribeVoIPVideoMembers', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> switchTab<T extends SwitchTabOption>(
      T option) async {
    final result = await $$context$$?.callMethod('switchTab', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      updateShareMenu<T extends UpdateShareMenuOption>(T option) async {
    final result = await $$context$$?.callMethod('updateShareMenu', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      updateVoIPChatMuteConfig<T extends UpdateVoIPChatMuteConfigOption>(
          T option) async {
    final result =
        await $$context$$?.callMethod('updateVoIPChatMuteConfig', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult>
      updateWeChatApp<T extends UpdateWeChatAppOption>([T? option]) async {
    final result = await $$context$$?.callMethod('updateWeChatApp', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> vibrateLong<T extends VibrateLongOption>(
      [T? option]) async {
    final result = await $$context$$?.callMethod('vibrateLong', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<GeneralCallbackResult> vibrateShort<T extends VibrateShortOption>(
      T option) async {
    final result = await $$context$$?.callMethod('vibrateShort', [option]);

    return GeneralCallbackResult($$context$$: result);
  }

  Future<BluetoothError>
      writeBLECharacteristicValue<T extends WriteBLECharacteristicValueOption>(
          T option) async {
    final result =
        await $$context$$?.callMethod('writeBLECharacteristicValue', [option]);

    return BluetoothError($$context$$: result);
  }

  Future<dynamic> getXrFrameSystem() async {
    final result = await $$context$$?.callMethod('getXrFrameSystem', []);
    return result;
  }
}

typedef AccessCompleteCallback = void Function(GeneralCallbackResult);

typedef AccessFailCallback = void Function(AccessFailCallbackResult);

typedef AccessSuccessCallback = void Function(GeneralCallbackResult);

typedef AddArcCompleteCallback = void Function(GeneralCallbackResult);

typedef AddArcFailCallback = void Function(GeneralCallbackResult);

typedef AddArcSuccessCallback = void Function(GeneralCallbackResult);

typedef AddCardCompleteCallback = void Function(GeneralCallbackResult);

typedef AddCardFailCallback = void Function(GeneralCallbackResult);

typedef AddCardSuccessCallback = void Function(AddCardSuccessCallbackResult);

typedef AddCustomLayerCompleteCallback = void Function(GeneralCallbackResult);

typedef AddCustomLayerFailCallback = void Function(GeneralCallbackResult);

typedef AddCustomLayerSuccessCallback = void Function(GeneralCallbackResult);

typedef AddFileToFavoritesCompleteCallback = void Function(
    GeneralCallbackResult);

typedef AddFileToFavoritesFailCallback = void Function(GeneralCallbackResult);

typedef AddFileToFavoritesSuccessCallback = void Function(
    GeneralCallbackResult);

typedef AddGroundOverlayCompleteCallback = void Function(GeneralCallbackResult);

typedef AddGroundOverlayFailCallback = void Function(GeneralCallbackResult);

typedef AddGroundOverlaySuccessCallback = void Function(GeneralCallbackResult);

typedef AddMarkersCompleteCallback = void Function(GeneralCallbackResult);

typedef AddMarkersFailCallback = void Function(GeneralCallbackResult);

typedef AddMarkersSuccessCallback = void Function(GeneralCallbackResult);

typedef AddPhoneCalendarCompleteCallback = void Function(GeneralCallbackResult);

typedef AddPhoneCalendarFailCallback = void Function(GeneralCallbackResult);

typedef AddPhoneCalendarSuccessCallback = void Function(GeneralCallbackResult);

typedef AddPhoneContactCompleteCallback = void Function(GeneralCallbackResult);

typedef AddPhoneContactFailCallback = void Function(GeneralCallbackResult);

typedef AddPhoneContactSuccessCallback = void Function(GeneralCallbackResult);

typedef AddPhoneRepeatCalendarCompleteCallback = void Function(
    GeneralCallbackResult);

typedef AddPhoneRepeatCalendarFailCallback = void Function(
    GeneralCallbackResult);

typedef AddPhoneRepeatCalendarSuccessCallback = void Function(
    GeneralCallbackResult);

typedef AddServiceCompleteCallback = void Function(GeneralCallbackResult);

typedef AddServiceFailCallback = void Function(GeneralCallbackResult);

typedef AddServiceSuccessCallback = void Function(GeneralCallbackResult);

typedef AddVideoToFavoritesCompleteCallback = void Function(
    GeneralCallbackResult);

typedef AddVideoToFavoritesFailCallback = void Function(GeneralCallbackResult);

typedef AddVideoToFavoritesSuccessCallback = void Function(
    GeneralCallbackResult);

typedef AddVisualLayerCompleteCallback = void Function(GeneralCallbackResult);

typedef AddVisualLayerFailCallback = void Function(GeneralCallbackResult);

typedef AddVisualLayerSuccessCallback = void Function(GeneralCallbackResult);

typedef AppendFileCompleteCallback = void Function(GeneralCallbackResult);

typedef AppendFileFailCallback = void Function(AppendFileFailCallbackResult);

typedef AppendFileSuccessCallback = void Function(GeneralCallbackResult);

typedef ApplyBlusherStickMakeupCompleteCallback = void Function(
    GeneralCallbackResult);

typedef ApplyBlusherStickMakeupFailCallback = void Function(
    GeneralCallbackResult);

typedef ApplyBlusherStickMakeupSuccessCallback = void Function(
    GeneralCallbackResult);

typedef ApplyEyeBrowMakeupCompleteCallback = void Function(
    GeneralCallbackResult);

typedef ApplyEyeBrowMakeupFailCallback = void Function(GeneralCallbackResult);

typedef ApplyEyeBrowMakeupSuccessCallback = void Function(
    GeneralCallbackResult);

typedef ApplyEyeShadowMakeupCompleteCallback = void Function(
    GeneralCallbackResult);

typedef ApplyEyeShadowMakeupFailCallback = void Function(GeneralCallbackResult);

typedef ApplyEyeShadowMakeupSuccessCallback = void Function(
    GeneralCallbackResult);

typedef ApplyFaceContourMakeupCompleteCallback = void Function(
    GeneralCallbackResult);

typedef ApplyFaceContourMakeupFailCallback = void Function(
    GeneralCallbackResult);

typedef ApplyFaceContourMakeupSuccessCallback = void Function(
    GeneralCallbackResult);

typedef ApplyFilterCompleteCallback = void Function(GeneralCallbackResult);

typedef ApplyFilterFailCallback = void Function(GeneralCallbackResult);

typedef ApplyFilterSuccessCallback = void Function(GeneralCallbackResult);

typedef ApplyLipStickMakeupCompleteCallback = void Function(
    GeneralCallbackResult);

typedef ApplyLipStickMakeupFailCallback = void Function(GeneralCallbackResult);

typedef ApplyLipStickMakeupSuccessCallback = void Function(
    GeneralCallbackResult);

typedef ApplyStickerCompleteCallback = void Function(GeneralCallbackResult);

typedef ApplyStickerFailCallback = void Function(GeneralCallbackResult);

typedef ApplyStickerSuccessCallback = void Function(GeneralCallbackResult);

typedef AuthPrivateMessageCompleteCallback = void Function(
    GeneralCallbackResult);

typedef AuthPrivateMessageFailCallback = void Function(GeneralCallbackResult);

typedef AuthPrivateMessageSuccessCallback = void Function(
    AuthPrivateMessageSuccessCallbackResult);

typedef AuthorizeCompleteCallback = void Function(GeneralCallbackResult);

typedef AuthorizeFailCallback = void Function(GeneralCallbackResult);

typedef AuthorizeForMiniProgramCompleteCallback = void Function(
    GeneralCallbackResult);

typedef AuthorizeForMiniProgramFailCallback = void Function(
    GeneralCallbackResult);

typedef AuthorizeForMiniProgramSuccessCallback = void Function(
    GeneralCallbackResult);

typedef AuthorizeSuccessCallback = void Function(GeneralCallbackResult);

typedef BackgroundAudioManagerOnErrorCallback = void Function(
    GeneralCallbackResult);

typedef BatchGetStorageCompleteCallback = void Function(GeneralCallbackResult);

typedef BatchGetStorageFailCallback = void Function(GeneralCallbackResult);

typedef BatchGetStorageSuccessCallback = void Function(GeneralCallbackResult);

typedef BatchSetStorageCompleteCallback = void Function(GeneralCallbackResult);

typedef BatchSetStorageFailCallback = void Function(GeneralCallbackResult);

typedef BatchSetStorageSuccessCallback = void Function(GeneralCallbackResult);

typedef BlurCompleteCallback = void Function(GeneralCallbackResult);

typedef BlurFailCallback = void Function(GeneralCallbackResult);

typedef BlurSuccessCallback = void Function(GeneralCallbackResult);

typedef BoundingClientRectCallback = void Function(
    BoundingClientRectCallbackResult);

typedef CameraContextStartRecordSuccessCallback = void Function(
    GeneralCallbackResult);

typedef CameraContextStopRecordSuccessCallback = void Function(
    StopRecordSuccessCallbackResult);

typedef CanvasGetImageDataCompleteCallback = void Function(
    GeneralCallbackResult);

typedef CanvasGetImageDataFailCallback = void Function(GeneralCallbackResult);

typedef CanvasGetImageDataSuccessCallback = void Function(
    CanvasGetImageDataSuccessCallbackResult);

typedef CanvasPutImageDataCompleteCallback = void Function(
    GeneralCallbackResult);

typedef CanvasPutImageDataFailCallback = void Function(GeneralCallbackResult);

typedef CanvasPutImageDataSuccessCallback = void Function(
    GeneralCallbackResult);

typedef CanvasToTempFilePathCompleteCallback = void Function(
    GeneralCallbackResult);

typedef CanvasToTempFilePathFailCallback = void Function(GeneralCallbackResult);

typedef CanvasToTempFilePathSuccessCallback = void Function(
    CanvasToTempFilePathSuccessCallbackResult);

typedef CheckIsAddedToMyMiniProgramCompleteCallback = void Function(
    GeneralCallbackResult);

typedef CheckIsAddedToMyMiniProgramFailCallback = void Function(
    GeneralCallbackResult);

typedef CheckIsAddedToMyMiniProgramSuccessCallback = void Function(
    CheckIsAddedToMyMiniProgramSuccessCallbackResult);

typedef CheckIsOpenAccessibilityCompleteCallback = void Function(
    GeneralCallbackResult);

typedef CheckIsOpenAccessibilityFailCallback = void Function(
    GeneralCallbackResult);

typedef CheckIsOpenAccessibilitySuccessCallback = void Function(
    CheckIsOpenAccessibilitySuccessCallbackOption);

typedef CheckIsSoterEnrolledInDeviceCompleteCallback = void Function(
    GeneralCallbackResult);

typedef CheckIsSoterEnrolledInDeviceFailCallback = void Function(
    GeneralCallbackResult);

typedef CheckIsSoterEnrolledInDeviceSuccessCallback = void Function(
    CheckIsSoterEnrolledInDeviceSuccessCallbackResult);

typedef CheckIsSupportSoterAuthenticationCompleteCallback = void Function(
    GeneralCallbackResult);

typedef CheckIsSupportSoterAuthenticationFailCallback = void Function(
    GeneralCallbackResult);

typedef CheckIsSupportSoterAuthenticationSuccessCallback = void Function(
    CheckIsSupportSoterAuthenticationSuccessCallbackResult);

typedef CheckSessionCompleteCallback = void Function(GeneralCallbackResult);

typedef CheckSessionFailCallback = void Function(GeneralCallbackResult);

typedef CheckSessionSuccessCallback = void Function(GeneralCallbackResult);

typedef ChooseAddressCompleteCallback = void Function(GeneralCallbackResult);

typedef ChooseAddressFailCallback = void Function(GeneralCallbackResult);

typedef ChooseAddressSuccessCallback = void Function(
    ChooseAddressSuccessCallbackResult);

typedef ChooseContactCompleteCallback = void Function(GeneralCallbackResult);

typedef ChooseContactFailCallback = void Function(GeneralCallbackResult);

typedef ChooseContactSuccessCallback = void Function(
    ChooseContactSuccessCallbackOption);

typedef ChooseImageCompleteCallback = void Function(GeneralCallbackResult);

typedef ChooseImageFailCallback = void Function(GeneralCallbackResult);

typedef ChooseImageSuccessCallback = void Function(
    ChooseImageSuccessCallbackResult);

typedef ChooseInvoiceCompleteCallback = void Function(GeneralCallbackResult);

typedef ChooseInvoiceFailCallback = void Function(GeneralCallbackResult);

typedef ChooseInvoiceSuccessCallback = void Function(
    ChooseInvoiceSuccessCallbackResult);

typedef ChooseInvoiceTitleCompleteCallback = void Function(
    GeneralCallbackResult);

typedef ChooseInvoiceTitleFailCallback = void Function(GeneralCallbackResult);

typedef ChooseInvoiceTitleSuccessCallback = void Function(
    ChooseInvoiceTitleSuccessCallbackResult);

typedef ChooseLicensePlateCompleteCallback = void Function(
    GeneralCallbackResult);

typedef ChooseLicensePlateFailCallback = void Function(GeneralCallbackResult);

typedef ChooseLicensePlateSuccessCallback = void Function(
    ChooseLicensePlateSuccessCallbackResult);

typedef ChooseLocationCompleteCallback = void Function(GeneralCallbackResult);

typedef ChooseLocationFailCallback = void Function(GeneralCallbackResult);

typedef ChooseLocationSuccessCallback = void Function(
    ChooseLocationSuccessCallbackResult);

typedef ChooseMediaCompleteCallback = void Function(GeneralCallbackResult);

typedef ChooseMediaFailCallback = void Function(GeneralCallbackResult);

typedef ChooseMediaSuccessCallback = void Function(
    ChooseMediaSuccessCallbackResult);

typedef ChooseMessageFileCompleteCallback = void Function(
    GeneralCallbackResult);

typedef ChooseMessageFileFailCallback = void Function(GeneralCallbackResult);

typedef ChooseMessageFileSuccessCallback = void Function(
    ChooseMessageFileSuccessCallbackResult);

typedef ChoosePoiCompleteCallback = void Function(GeneralCallbackResult);

typedef ChoosePoiFailCallback = void Function(GeneralCallbackResult);

typedef ChoosePoiSuccessCallback = void Function(
    ChoosePoiSuccessCallbackResult);

typedef ChooseVideoCompleteCallback = void Function(GeneralCallbackResult);

typedef ChooseVideoFailCallback = void Function(GeneralCallbackResult);

typedef ChooseVideoSuccessCallback = void Function(
    ChooseVideoSuccessCallbackResult);

typedef ClearCompleteCallback = void Function(GeneralCallbackResult);

typedef ClearFailCallback = void Function(GeneralCallbackResult);

typedef ClearFiltersCompleteCallback = void Function(GeneralCallbackResult);

typedef ClearFiltersFailCallback = void Function(GeneralCallbackResult);

typedef ClearFiltersSuccessCallback = void Function(GeneralCallbackResult);

typedef ClearMakeupsCompleteCallback = void Function(GeneralCallbackResult);

typedef ClearMakeupsFailCallback = void Function(GeneralCallbackResult);

typedef ClearMakeupsSuccessCallback = void Function(GeneralCallbackResult);

typedef ClearStickersCompleteCallback = void Function(GeneralCallbackResult);

typedef ClearStickersFailCallback = void Function(GeneralCallbackResult);

typedef ClearStickersSuccessCallback = void Function(GeneralCallbackResult);

typedef ClearStorageCompleteCallback = void Function(GeneralCallbackResult);

typedef ClearStorageFailCallback = void Function(GeneralCallbackResult);

typedef ClearStorageSuccessCallback = void Function(GeneralCallbackResult);

typedef ClearSuccessCallback = void Function(GeneralCallbackResult);

typedef CloseBLEConnectionCompleteCallback = void Function(BluetoothError);

typedef CloseBLEConnectionFailCallback = void Function(BluetoothError);

typedef CloseBLEConnectionSuccessCallback = void Function(BluetoothError);

typedef CloseBluetoothAdapterCompleteCallback = void Function(BluetoothError);

typedef CloseBluetoothAdapterFailCallback = void Function(BluetoothError);

typedef CloseBluetoothAdapterSuccessCallback = void Function(BluetoothError);

typedef CloseSocketCompleteCallback = void Function(GeneralCallbackResult);

typedef CloseSocketFailCallback = void Function(GeneralCallbackResult);

typedef CloseSocketSuccessCallback = void Function(GeneralCallbackResult);

typedef CompressImageCompleteCallback = void Function(GeneralCallbackResult);

typedef CompressImageFailCallback = void Function(GeneralCallbackResult);

typedef CompressImageSuccessCallback = void Function(
    CompressImageSuccessCallbackResult);

typedef CompressVideoCompleteCallback = void Function(GeneralCallbackResult);

typedef CompressVideoFailCallback = void Function(GeneralCallbackResult);

typedef CompressVideoSuccessCallback = void Function(
    CompressVideoSuccessCallbackResult);

typedef ConnectCompleteCallback = void Function(Nfcrwerror);

typedef ConnectFailCallback = void Function(Nfcrwerror);

typedef ConnectSocketCompleteCallback = void Function(GeneralCallbackResult);

typedef ConnectSocketFailCallback = void Function(GeneralCallbackResult);

typedef ConnectSocketSuccessCallback = void Function(GeneralCallbackResult);

typedef ConnectSuccessCallback = void Function(Nfcrwerror);

typedef ConnectWifiCompleteCallback = void Function(WifiError);

typedef ConnectWifiFailCallback = void Function(WifiError);

typedef ConnectWifiSuccessCallback = void Function(WifiError);

typedef ContextCallback = void Function(ContextCallbackResult);

typedef CopyFileCompleteCallback = void Function(GeneralCallbackResult);

typedef CopyFileFailCallback = void Function(CopyFileFailCallbackResult);

typedef CopyFileSuccessCallback = void Function(GeneralCallbackResult);

typedef CreateBLEConnectionCompleteCallback = void Function(BluetoothError);

typedef CreateBLEConnectionFailCallback = void Function(BluetoothError);

typedef CreateBLEConnectionSuccessCallback = void Function(BluetoothError);

typedef CreateBLEPeripheralServerCompleteCallback = void Function(
    GeneralCallbackResult);

typedef CreateBLEPeripheralServerFailCallback = void Function(
    GeneralCallbackResult);

typedef CreateBLEPeripheralServerSuccessCallback = void Function(
    CreateBLEPeripheralServerSuccessCallbackResult);

typedef CropImageCompleteCallback = void Function(GeneralCallbackResult);

typedef CropImageFailCallback = void Function(GeneralCallbackResult);

typedef CropImageSuccessCallback = void Function(
    EditImageSuccessCallbackResult);

typedef CustomRendererFrameEventCallback = void Function(
    OnCustomRendererEventCallbackResult);

typedef DisableAlertBeforeUnloadCompleteCallback = void Function(
    GeneralCallbackResult);

typedef DisableAlertBeforeUnloadFailCallback = void Function(
    GeneralCallbackResult);

typedef DisableAlertBeforeUnloadSuccessCallback = void Function(
    GeneralCallbackResult);

typedef DownloadFileCompleteCallback = void Function(GeneralCallbackResult);

typedef DownloadFileFailCallback = void Function(GeneralCallbackResult);

typedef DownloadFileSuccessCallback = void Function(
    DownloadFileSuccessCallbackResult);

typedef DownloadTaskOffProgressUpdateCallback = void Function(
    DownloadTaskOnProgressUpdateListenerResult);

typedef DownloadTaskOnProgressUpdateCallback = void Function(
    DownloadTaskOnProgressUpdateListenerResult);

typedef EditImageCompleteCallback = void Function(GeneralCallbackResult);

typedef EditImageFailCallback = void Function(GeneralCallbackResult);

typedef EditImageSuccessCallback = void Function(
    EditImageSuccessCallbackResult);

typedef EnableAlertBeforeUnloadCompleteCallback = void Function(
    GeneralCallbackResult);

typedef EnableAlertBeforeUnloadFailCallback = void Function(
    GeneralCallbackResult);

typedef EnableAlertBeforeUnloadSuccessCallback = void Function(
    GeneralCallbackResult);

typedef EventCallback = void Function(dynamic);

typedef ExecuteVisualLayerCommandCompleteCallback = void Function(
    GeneralCallbackResult);

typedef ExecuteVisualLayerCommandFailCallback = void Function(
    GeneralCallbackResult);

typedef ExecuteVisualLayerCommandSuccessCallback = void Function(
    ExecuteVisualLayerCommandSuccessCallbackResult);

typedef ExitFullScreenCompleteCallback = void Function(GeneralCallbackResult);

typedef ExitFullScreenFailCallback = void Function(GeneralCallbackResult);

typedef ExitFullScreenSuccessCallback = void Function(GeneralCallbackResult);

typedef ExitMiniProgramCompleteCallback = void Function(GeneralCallbackResult);

typedef ExitMiniProgramFailCallback = void Function(GeneralCallbackResult);

typedef ExitMiniProgramSuccessCallback = void Function(GeneralCallbackResult);

typedef ExitPictureInPictureCompleteCallback = void Function(
    GeneralCallbackResult);

typedef ExitPictureInPictureFailCallback = void Function(GeneralCallbackResult);

typedef ExitPictureInPictureSuccessCallback = void Function(
    GeneralCallbackResult);

typedef ExitVoIPChatCompleteCallback = void Function(GeneralCallbackResult);

typedef ExitVoIPChatFailCallback = void Function(GeneralCallbackResult);

typedef ExitVoIPChatSuccessCallback = void Function(GeneralCallbackResult);

typedef FaceDetectCompleteCallback = void Function(GeneralCallbackResult);

typedef FaceDetectFailCallback = void Function(GeneralCallbackResult);

typedef FaceDetectSuccessCallback = void Function(
    FaceDetectSuccessCallbackResult);

typedef FieldsCallback = void Function(IAnyObject);

typedef FileSystemManagerCloseCompleteCallback = void Function(
    GeneralCallbackResult);

typedef FileSystemManagerCloseFailCallback = void Function(
    CloseFailCallbackResult);

typedef FileSystemManagerCloseSuccessCallback = void Function(
    GeneralCallbackResult);

typedef FromScreenLocationCompleteCallback = void Function(
    GeneralCallbackResult);

typedef FromScreenLocationFailCallback = void Function(GeneralCallbackResult);

typedef FromScreenLocationSuccessCallback = void Function(
    GetCenterLocationSuccessCallbackResult);

typedef FstatCompleteCallback = void Function(GeneralCallbackResult);

typedef FstatFailCallback = void Function(FstatFailCallbackResult);

typedef FstatSuccessCallback = void Function(FstatSuccessCallbackResult);

typedef FtruncateCompleteCallback = void Function(GeneralCallbackResult);

typedef FtruncateFailCallback = void Function(FtruncateFailCallbackResult);

typedef FtruncateSuccessCallback = void Function(GeneralCallbackResult);

typedef GetAtqaCompleteCallback = void Function(Nfcrwerror);

typedef GetAtqaFailCallback = void Function(Nfcrwerror);

typedef GetAtqaSuccessCallback = void Function(GetAtqaSuccessCallbackResult);

typedef GetAvailableAudioSourcesCompleteCallback = void Function(
    GeneralCallbackResult);

typedef GetAvailableAudioSourcesFailCallback = void Function(
    GeneralCallbackResult);

typedef GetAvailableAudioSourcesSuccessCallback = void Function(
    GetAvailableAudioSourcesSuccessCallbackResult);

typedef GetBLEDeviceCharacteristicsCompleteCallback = void Function(
    BluetoothError);

typedef GetBLEDeviceCharacteristicsFailCallback = void Function(BluetoothError);

typedef GetBLEDeviceCharacteristicsSuccessCallback = void Function(
    GetBLEDeviceCharacteristicsSuccessCallbackResult);

typedef GetBLEDeviceRSSICompleteCallback = void Function(GeneralCallbackResult);

typedef GetBLEDeviceRSSIFailCallback = void Function(GeneralCallbackResult);

typedef GetBLEDeviceRSSISuccessCallback = void Function(
    GetBLEDeviceRSSISuccessCallbackResult);

typedef GetBLEDeviceServicesCompleteCallback = void Function(BluetoothError);

typedef GetBLEDeviceServicesFailCallback = void Function(BluetoothError);

typedef GetBLEDeviceServicesSuccessCallback = void Function(
    GetBLEDeviceServicesSuccessCallbackResult);

typedef GetBLEMTUCompleteCallback = void Function(BluetoothError);

typedef GetBLEMTUFailCallback = void Function(BluetoothError);

typedef GetBLEMTUSuccessCallback = void Function(
    GetBLEMTUSuccessCallbackResult);

typedef GetBackgroundAudioPlayerStateCompleteCallback = void Function(
    GeneralCallbackResult);

typedef GetBackgroundAudioPlayerStateFailCallback = void Function(
    GeneralCallbackResult);

typedef GetBackgroundAudioPlayerStateSuccessCallback = void Function(
    GetBackgroundAudioPlayerStateSuccessCallbackResult);

typedef GetBackgroundFetchDataCompleteCallback = void Function(
    GeneralCallbackResult);

typedef GetBackgroundFetchDataFailCallback = void Function(
    GeneralCallbackResult);

typedef GetBackgroundFetchDataSuccessCallback = void Function(
    GetBackgroundFetchDataSuccessCallbackResult);

typedef GetBackgroundFetchTokenCompleteCallback = void Function(
    GeneralCallbackResult);

typedef GetBackgroundFetchTokenFailCallback = void Function(
    GeneralCallbackResult);

typedef GetBackgroundFetchTokenSuccessCallback = void Function(
    GetBackgroundFetchTokenSuccessCallbackResult);

typedef GetBatteryInfoCompleteCallback = void Function(GeneralCallbackResult);

typedef GetBatteryInfoFailCallback = void Function(GeneralCallbackResult);

typedef GetBatteryInfoSuccessCallback = void Function(
    GetBatteryInfoSuccessCallbackResult);

typedef GetBeaconsCompleteCallback = void Function(BeaconError);

typedef GetBeaconsFailCallback = void Function(BeaconError);

typedef GetBeaconsSuccessCallback = void Function(
    GetBeaconsSuccessCallbackResult);

typedef GetBluetoothAdapterStateCompleteCallback = void Function(
    BluetoothError);

typedef GetBluetoothAdapterStateFailCallback = void Function(BluetoothError);

typedef GetBluetoothAdapterStateSuccessCallback = void Function(
    GetBluetoothAdapterStateSuccessCallbackResult);

typedef GetBluetoothDevicesCompleteCallback = void Function(BluetoothError);

typedef GetBluetoothDevicesFailCallback = void Function(BluetoothError);

typedef GetBluetoothDevicesSuccessCallback = void Function(
    GetBluetoothDevicesSuccessCallbackResult);

typedef GetCenterLocationCompleteCallback = void Function(
    GeneralCallbackResult);

typedef GetCenterLocationFailCallback = void Function(GeneralCallbackResult);

typedef GetCenterLocationSuccessCallback = void Function(
    GetCenterLocationSuccessCallbackResult);

typedef GetChannelsLiveInfoCompleteCallback = void Function(
    GeneralCallbackResult);

typedef GetChannelsLiveInfoFailCallback = void Function(GeneralCallbackResult);

typedef GetChannelsLiveInfoSuccessCallback = void Function(
    GetChannelsLiveInfoSuccessCallbackResult);

typedef GetChannelsLiveNoticeInfoCompleteCallback = void Function(
    GeneralCallbackResult);

typedef GetChannelsLiveNoticeInfoFailCallback = void Function(
    GeneralCallbackResult);

typedef GetChannelsLiveNoticeInfoSuccessCallback = void Function(
    GetChannelsLiveNoticeInfoSuccessCallbackResult);

typedef GetChannelsShareKeyCompleteCallback = void Function(
    GeneralCallbackResult);

typedef GetChannelsShareKeyFailCallback = void Function(GeneralCallbackResult);

typedef GetChannelsShareKeySuccessCallback = void Function(
    GetChannelsShareKeySuccessCallbackResult);

typedef GetClipboardDataCompleteCallback = void Function(GeneralCallbackResult);

typedef GetClipboardDataFailCallback = void Function(GeneralCallbackResult);

typedef GetClipboardDataSuccessCallback = void Function(
    GetClipboardDataSuccessCallbackOption);

typedef GetConnectedBluetoothDevicesCompleteCallback = void Function(
    BluetoothError);

typedef GetConnectedBluetoothDevicesFailCallback = void Function(
    BluetoothError);

typedef GetConnectedBluetoothDevicesSuccessCallback = void Function(
    GetConnectedBluetoothDevicesSuccessCallbackResult);

typedef GetConnectedWifiCompleteCallback = void Function(WifiError);

typedef GetConnectedWifiFailCallback = void Function(WifiError);

typedef GetConnectedWifiSuccessCallback = void Function(
    GetConnectedWifiSuccessCallbackResult);

typedef GetContentsCompleteCallback = void Function(GeneralCallbackResult);

typedef GetContentsFailCallback = void Function(GeneralCallbackResult);

typedef GetContentsSuccessCallback = void Function(
    GetContentsSuccessCallbackResult);

typedef GetExtConfigCompleteCallback = void Function(GeneralCallbackResult);

typedef GetExtConfigFailCallback = void Function(GeneralCallbackResult);

typedef GetExtConfigSuccessCallback = void Function(
    GetExtConfigSuccessCallbackResult);

typedef GetFileInfoCompleteCallback = void Function(GeneralCallbackResult);

typedef GetFileInfoFailCallback = void Function(GetFileInfoFailCallbackResult);

typedef GetFileInfoSuccessCallback = void Function(
    GetFileInfoSuccessCallbackResult);

typedef GetFuzzyLocationCompleteCallback = void Function(GeneralCallbackResult);

typedef GetFuzzyLocationFailCallback = void Function(GeneralCallbackResult);

typedef GetFuzzyLocationSuccessCallback = void Function(
    GetFuzzyLocationSuccessCallbackResult);

typedef GetGroupEnterInfoCompleteCallback = void Function(
    GeneralCallbackResult);

typedef GetGroupEnterInfoFailCallback = void Function(GeneralCallbackResult);

typedef GetGroupEnterInfoSuccessCallback = void Function(
    GetGroupEnterInfoSuccessCallbackResult);

typedef GetHCEStateCompleteCallback = void Function(NFCError);

typedef GetHCEStateFailCallback = void Function(NFCError);

typedef GetHCEStateSuccessCallback = void Function(NFCError);

typedef GetHistoricalBytesCompleteCallback = void Function(Nfcrwerror);

typedef GetHistoricalBytesFailCallback = void Function(Nfcrwerror);

typedef GetHistoricalBytesSuccessCallback = void Function(
    GetHistoricalBytesSuccessCallbackResult);

typedef GetImageInfoCompleteCallback = void Function(GeneralCallbackResult);

typedef GetImageInfoFailCallback = void Function(GeneralCallbackResult);

typedef GetImageInfoSuccessCallback = void Function(
    GetImageInfoSuccessCallbackResult);

typedef GetLatestUserKeyCompleteCallback = void Function(GeneralCallbackResult);

typedef GetLatestUserKeyFailCallback = void Function(GeneralCallbackResult);

typedef GetLatestUserKeySuccessCallback = void Function(
    GetLatestUserKeySuccessCallbackResult);

typedef GetLocalIPAddressCompleteCallback = void Function(
    GeneralCallbackResult);

typedef GetLocalIPAddressFailCallback = void Function(GeneralCallbackResult);

typedef GetLocalIPAddressSuccessCallback = void Function(
    GetLocalIPAddressSuccessCallbackResult);

typedef GetLocationCompleteCallback = void Function(GeneralCallbackResult);

typedef GetLocationFailCallback = void Function(GeneralCallbackResult);

typedef GetLocationSuccessCallback = void Function(
    GetLocationSuccessCallbackResult);

typedef GetMaxTransceiveLengthCompleteCallback = void Function(Nfcrwerror);

typedef GetMaxTransceiveLengthFailCallback = void Function(Nfcrwerror);

typedef GetMaxTransceiveLengthSuccessCallback = void Function(
    GetMaxTransceiveLengthSuccessCallbackResult);

typedef GetNetworkTypeCompleteCallback = void Function(GeneralCallbackResult);

typedef GetNetworkTypeFailCallback = void Function(GeneralCallbackResult);

typedef GetNetworkTypeSuccessCallback = void Function(
    GetNetworkTypeSuccessCallbackResult);

typedef GetRandomValuesCompleteCallback = void Function(GeneralCallbackResult);

typedef GetRandomValuesFailCallback = void Function(GeneralCallbackResult);

typedef GetRandomValuesSuccessCallback = void Function(
    GetRandomValuesSuccessCallbackResult);

typedef GetRegionCompleteCallback = void Function(GeneralCallbackResult);

typedef GetRegionFailCallback = void Function(GeneralCallbackResult);

typedef GetRegionSuccessCallback = void Function(
    GetRegionSuccessCallbackResult);

typedef GetRotateCompleteCallback = void Function(GeneralCallbackResult);

typedef GetRotateFailCallback = void Function(GeneralCallbackResult);

typedef GetRotateSuccessCallback = void Function(
    GetRotateSuccessCallbackResult);

typedef GetSakCompleteCallback = void Function(Nfcrwerror);

typedef GetSakFailCallback = void Function(Nfcrwerror);

typedef GetSakSuccessCallback = void Function(GetSakSuccessCallbackResult);

typedef GetSavedFileListCompleteCallback = void Function(GeneralCallbackResult);

typedef GetSavedFileListFailCallback = void Function(GeneralCallbackResult);

typedef GetSavedFileListSuccessCallback = void Function(
    GetSavedFileListSuccessCallbackResult);

typedef GetScaleCompleteCallback = void Function(GeneralCallbackResult);

typedef GetScaleFailCallback = void Function(GeneralCallbackResult);

typedef GetScaleSuccessCallback = void Function(GetScaleSuccessCallbackResult);

typedef GetScreenBrightnessCompleteCallback = void Function(
    GeneralCallbackResult);

typedef GetScreenBrightnessFailCallback = void Function(GeneralCallbackResult);

typedef GetScreenBrightnessSuccessCallback = void Function(
    GetScreenBrightnessSuccessCallbackOption);

typedef GetScreenRecordingStateCompleteCallback = void Function(
    GeneralCallbackResult);

typedef GetScreenRecordingStateFailCallback = void Function(
    GeneralCallbackResult);

typedef GetScreenRecordingStateSuccessCallback = void Function(
    GetScreenRecordingStateSuccessCallbackResult);

typedef GetSelectedTextRangeCompleteCallback = void Function(
    GeneralCallbackResult);

typedef GetSelectedTextRangeFailCallback = void Function(GeneralCallbackResult);

typedef GetSelectedTextRangeSuccessCallback = void Function(
    GetSelectedTextRangeSuccessCallbackResult);

typedef GetSelectionTextCompleteCallback = void Function(GeneralCallbackResult);

typedef GetSelectionTextFailCallback = void Function(GeneralCallbackResult);

typedef GetSelectionTextSuccessCallback = void Function(
    GetSelectionTextSuccessCallbackResult);

typedef GetSettingCompleteCallback = void Function(GeneralCallbackResult);

typedef GetSettingFailCallback = void Function(GeneralCallbackResult);

typedef GetSettingSuccessCallback = void Function(
    GetSettingSuccessCallbackResult);

typedef GetShareInfoCompleteCallback = void Function(GeneralCallbackResult);

typedef GetShareInfoFailCallback = void Function(GeneralCallbackResult);

typedef GetShareInfoSuccessCallback = void Function(
    GetGroupEnterInfoSuccessCallbackResult);

typedef GetSkewCompleteCallback = void Function(GeneralCallbackResult);

typedef GetSkewFailCallback = void Function(GeneralCallbackResult);

typedef GetSkewSuccessCallback = void Function(GetSkewSuccessCallbackResult);

typedef GetSkylineInfoCompleteCallback = void Function(GeneralCallbackResult);

typedef GetSkylineInfoFailCallback = void Function(GeneralCallbackResult);

typedef GetSkylineInfoSuccessCallback = void Function(SkylineInfo);

typedef GetStorageCompleteCallback = void Function(GeneralCallbackResult);

typedef GetStorageFailCallback = void Function(GeneralCallbackResult);

typedef GetStorageInfoCompleteCallback = void Function(GeneralCallbackResult);

typedef GetStorageInfoFailCallback = void Function(GeneralCallbackResult);

typedef GetStorageInfoSuccessCallback = void Function(
    GetStorageInfoSuccessCallbackOption);

typedef GetStorageSuccessCallback<T> = void Function(
    GetStorageSuccessCallbackResult<T>);

typedef GetSystemInfoAsyncCompleteCallback = void Function(
    GeneralCallbackResult);

typedef GetSystemInfoAsyncFailCallback = void Function(GeneralCallbackResult);

typedef GetSystemInfoAsyncSuccessCallback = void Function(SystemInfo);

typedef GetSystemInfoCompleteCallback = void Function(GeneralCallbackResult);

typedef GetSystemInfoFailCallback = void Function(GeneralCallbackResult);

typedef GetSystemInfoSuccessCallback = void Function(SystemInfo);

typedef GetUserInfoCompleteCallback = void Function(GeneralCallbackResult);

typedef GetUserInfoFailCallback = void Function(GeneralCallbackResult);

typedef GetUserInfoSuccessCallback = void Function(
    GetUserInfoSuccessCallbackResult);

typedef GetUserProfileCompleteCallback = void Function(GeneralCallbackResult);

typedef GetUserProfileFailCallback = void Function(GeneralCallbackResult);

typedef GetUserProfileSuccessCallback = void Function(
    GetUserProfileSuccessCallbackResult);

typedef GetVideoInfoCompleteCallback = void Function(GeneralCallbackResult);

typedef GetVideoInfoFailCallback = void Function(GeneralCallbackResult);

typedef GetVideoInfoSuccessCallback = void Function(
    GetVideoInfoSuccessCallbackResult);

typedef GetWeRunDataCompleteCallback = void Function(GeneralCallbackResult);

typedef GetWeRunDataFailCallback = void Function(GeneralCallbackResult);

typedef GetWeRunDataSuccessCallback = void Function(
    GetWeRunDataSuccessCallbackResult);

typedef GetWifiListCompleteCallback = void Function(WifiError);

typedef GetWifiListFailCallback = void Function(WifiError);

typedef GetWifiListSuccessCallback = void Function(WifiError);

typedef HideHomeButtonCompleteCallback = void Function(GeneralCallbackResult);

typedef HideHomeButtonFailCallback = void Function(GeneralCallbackResult);

typedef HideHomeButtonSuccessCallback = void Function(GeneralCallbackResult);

typedef HideKeyboardCompleteCallback = void Function(GeneralCallbackResult);

typedef HideKeyboardFailCallback = void Function(GeneralCallbackResult);

typedef HideKeyboardSuccessCallback = void Function(GeneralCallbackResult);

typedef HideLoadingCompleteCallback = void Function(GeneralCallbackResult);

typedef HideLoadingFailCallback = void Function(GeneralCallbackResult);

typedef HideLoadingSuccessCallback = void Function(GeneralCallbackResult);

typedef HideNavigationBarLoadingCompleteCallback = void Function(
    GeneralCallbackResult);

typedef HideNavigationBarLoadingFailCallback = void Function(
    GeneralCallbackResult);

typedef HideNavigationBarLoadingSuccessCallback = void Function(
    GeneralCallbackResult);

typedef HideShareMenuCompleteCallback = void Function(GeneralCallbackResult);

typedef HideShareMenuFailCallback = void Function(GeneralCallbackResult);

typedef HideShareMenuSuccessCallback = void Function(GeneralCallbackResult);

typedef HideTabBarCompleteCallback = void Function(GeneralCallbackResult);

typedef HideTabBarFailCallback = void Function(GeneralCallbackResult);

typedef HideTabBarRedDotCompleteCallback = void Function(GeneralCallbackResult);

typedef HideTabBarRedDotFailCallback = void Function(GeneralCallbackResult);

typedef HideTabBarRedDotSuccessCallback = void Function(GeneralCallbackResult);

typedef HideTabBarSuccessCallback = void Function(GeneralCallbackResult);

typedef HideToastCompleteCallback = void Function(GeneralCallbackResult);

typedef HideToastFailCallback = void Function(GeneralCallbackResult);

typedef HideToastSuccessCallback = void Function(GeneralCallbackResult);

typedef IncludePointsCompleteCallback = void Function(GeneralCallbackResult);

typedef IncludePointsFailCallback = void Function(GeneralCallbackResult);

typedef IncludePointsSuccessCallback = void Function(GeneralCallbackResult);

typedef InitFaceDetectCompleteCallback = void Function(GeneralCallbackResult);

typedef InitFaceDetectFailCallback = void Function(GeneralCallbackResult);

typedef InitFaceDetectSuccessCallback = void Function(GeneralCallbackResult);

typedef InitMarkerClusterCompleteCallback = void Function(
    GeneralCallbackResult);

typedef InitMarkerClusterFailCallback = void Function(GeneralCallbackResult);

typedef InitMarkerClusterSuccessCallback = void Function(GeneralCallbackResult);

typedef InnerAudioContextOffErrorCallback = void Function(
    InnerAudioContextOnErrorListenerResult);

typedef InnerAudioContextOnErrorCallback = void Function(
    InnerAudioContextOnErrorListenerResult);

typedef InnerAudioContextOnStopCallback = void Function(GeneralCallbackResult);

typedef InsertDividerCompleteCallback = void Function(GeneralCallbackResult);

typedef InsertDividerFailCallback = void Function(GeneralCallbackResult);

typedef InsertDividerSuccessCallback = void Function(GeneralCallbackResult);

typedef InsertImageCompleteCallback = void Function(GeneralCallbackResult);

typedef InsertImageFailCallback = void Function(GeneralCallbackResult);

typedef InsertImageSuccessCallback = void Function(GeneralCallbackResult);

typedef InsertTextCompleteCallback = void Function(GeneralCallbackResult);

typedef InsertTextFailCallback = void Function(GeneralCallbackResult);

typedef InsertTextSuccessCallback = void Function(GeneralCallbackResult);

typedef IntersectionObserverObserveCallback = void Function(
    IntersectionObserverObserveCallbackResult);

typedef InterstitialAdOffErrorCallback = void Function(
    InterstitialAdOnErrorListenerResult);

typedef InterstitialAdOnErrorCallback = void Function(
    InterstitialAdOnErrorListenerResult);

typedef IsBluetoothDevicePairedCompleteCallback = void Function(
    GeneralCallbackResult);

typedef IsBluetoothDevicePairedFailCallback = void Function(
    GeneralCallbackResult);

typedef IsBluetoothDevicePairedSuccessCallback = void Function(
    GeneralCallbackResult);

typedef IsConnectedCompleteCallback = void Function(Nfcrwerror);

typedef IsConnectedFailCallback = void Function(Nfcrwerror);

typedef IsConnectedSuccessCallback = void Function(Nfcrwerror);

typedef Join1v1ChatCompleteCallback = void Function(Join1v1ChatError);

typedef Join1v1ChatFailCallback = void Function(Join1v1ChatError);

typedef Join1v1ChatSuccessCallback = void Function(Join1v1ChatError);

typedef JoinVoIPChatCompleteCallback = void Function(JoinVoIPChatError);

typedef JoinVoIPChatFailCallback = void Function(JoinVoIPChatError);

typedef JoinVoIPChatSuccessCallback = void Function(
    JoinVoIPChatSuccessCallbackResult);

typedef LivePlayerContextSnapshotSuccessCallback = void Function(
    LivePlayerContextSnapshotSuccessCallbackResult);

typedef LivePusherContextSnapshotSuccessCallback = void Function(
    LivePusherContextSnapshotSuccessCallbackResult);

typedef LoadFontFaceCompleteCallback = void Function(
    LoadFontFaceCompleteCallbackResult);

typedef LoadFontFaceFailCallback = void Function(
    LoadFontFaceCompleteCallbackResult);

typedef LoadFontFaceSuccessCallback = void Function(
    LoadFontFaceCompleteCallbackResult);

typedef LoginCompleteCallback = void Function(GeneralCallbackResult);

typedef LoginFailCallback = void Function(GeneralCallbackResult);

typedef LoginSuccessCallback = void Function(LoginSuccessCallbackResult);

typedef MakeBluetoothPairCompleteCallback = void Function(
    GeneralCallbackResult);

typedef MakeBluetoothPairFailCallback = void Function(GeneralCallbackResult);

typedef MakeBluetoothPairSuccessCallback = void Function(GeneralCallbackResult);

typedef MakePhoneCallCompleteCallback = void Function(GeneralCallbackResult);

typedef MakePhoneCallFailCallback = void Function(GeneralCallbackResult);

typedef MakePhoneCallSuccessCallback = void Function(GeneralCallbackResult);

typedef MediaQueryObserverObserveCallback = void Function(
    MediaQueryObserverObserveCallbackResult);

typedef MkdirCompleteCallback = void Function(GeneralCallbackResult);

typedef MkdirFailCallback = void Function(MkdirFailCallbackResult);

typedef MkdirSuccessCallback = void Function(GeneralCallbackResult);

typedef MoveAlongCompleteCallback = void Function(GeneralCallbackResult);

typedef MoveAlongFailCallback = void Function(GeneralCallbackResult);

typedef MoveAlongSuccessCallback = void Function(GeneralCallbackResult);

typedef MoveToLocationCompleteCallback = void Function(GeneralCallbackResult);

typedef MoveToLocationFailCallback = void Function(GeneralCallbackResult);

typedef MoveToLocationSuccessCallback = void Function(GeneralCallbackResult);

typedef MuteCompleteCallback = void Function(GeneralCallbackResult);

typedef MuteFailCallback = void Function(GeneralCallbackResult);

typedef MuteSuccessCallback = void Function(GeneralCallbackResult);

typedef NavigateBackCompleteCallback = void Function(GeneralCallbackResult);

typedef NavigateBackFailCallback = void Function(GeneralCallbackResult);

typedef NavigateBackMiniProgramCompleteCallback = void Function(
    GeneralCallbackResult);

typedef NavigateBackMiniProgramFailCallback = void Function(
    GeneralCallbackResult);

typedef NavigateBackMiniProgramSuccessCallback = void Function(
    GeneralCallbackResult);

typedef NavigateBackSuccessCallback = void Function(GeneralCallbackResult);

typedef NavigateToCompleteCallback = void Function(GeneralCallbackResult);

typedef NavigateToFailCallback = void Function(GeneralCallbackResult);

typedef NavigateToMiniProgramCompleteCallback = void Function(
    GeneralCallbackResult);

typedef NavigateToMiniProgramFailCallback = void Function(
    GeneralCallbackResult);

typedef NavigateToMiniProgramSuccessCallback = void Function(
    GeneralCallbackResult);

typedef NavigateToSuccessCallback = void Function(
    NavigateToSuccessCallbackResult);

typedef NdefCloseCompleteCallback = void Function(Nfcrwerror);

typedef NdefCloseFailCallback = void Function(Nfcrwerror);

typedef NdefCloseSuccessCallback = void Function(Nfcrwerror);

typedef NodeCallback = void Function(NodeCallbackResult);

typedef NotifyBLECharacteristicValueChangeCompleteCallback = void Function(
    BluetoothError);

typedef NotifyBLECharacteristicValueChangeFailCallback = void Function(
    BluetoothError);

typedef NotifyBLECharacteristicValueChangeSuccessCallback = void Function(
    BluetoothError);

typedef OffAccelerometerChangeCallback = void Function(GeneralCallbackResult);

typedef OffAppHideCallback = void Function(GeneralCallbackResult);

typedef OffAppShowCallback = void Function(GeneralCallbackResult);

typedef OffAudioInterruptionBeginCallback = void Function(
    GeneralCallbackResult);

typedef OffAudioInterruptionEndCallback = void Function(GeneralCallbackResult);

typedef OffBLECharacteristicValueChangeCallback = void Function(
    OnBLECharacteristicValueChangeListenerResult);

typedef OffBLEConnectionStateChangeCallback = void Function(
    OnBLEConnectionStateChangeListenerResult);

typedef OffBLEMTUChangeCallback = void Function(OnBLEMTUChangeListenerResult);

typedef OffBLEPeripheralConnectionStateChangedCallback = void Function(
    OnBLEPeripheralConnectionStateChangedListenerResult);

typedef OffBeaconServiceChangeCallback = void Function(GeneralCallbackResult);

typedef OffBeaconUpdateCallback = void Function(GeneralCallbackResult);

typedef OffBindWifiCallback = void Function(GeneralCallbackResult);

typedef OffBluetoothAdapterStateChangeCallback = void Function(
    OnBluetoothAdapterStateChangeListenerResult);

typedef OffBluetoothDeviceFoundCallback = void Function(GeneralCallbackResult);

typedef OffCanplayCallback = void Function(GeneralCallbackResult);

typedef OffCharacteristicReadRequestCallback = void Function(
    OnCharacteristicReadRequestListenerResult);

typedef OffCharacteristicSubscribedCallback = void Function(
    OnCharacteristicSubscribedListenerResult);

typedef OffCharacteristicUnsubscribedCallback = void Function(
    OnCharacteristicSubscribedListenerResult);

typedef OffCharacteristicWriteRequestCallback = void Function(
    OnCharacteristicWriteRequestListenerResult);

typedef OffChunkReceivedCallback = void Function(OnChunkReceivedListenerResult);

typedef OffCompassChangeCallback = void Function(GeneralCallbackResult);

typedef OffConnectCallback = void Function(GeneralCallbackResult);

typedef OffCopyUrlCallback = void Function(OnCopyUrlListenerResult);

typedef OffDeviceMotionChangeCallback = void Function(GeneralCallbackResult);

typedef OffDiscoveredCallback = void Function(OnDiscoveredListenerResult);

typedef OffEndedCallback = void Function(GeneralCallbackResult);

typedef OffGetWifiListCallback = void Function(OnGetWifiListListenerResult);

typedef OffHCEMessageCallback = void Function(OnHCEMessageListenerResult);

typedef OffHeadersReceivedCallback = void Function(
    OnHeadersReceivedListenerResult);

typedef OffKeyboardHeightChangeCallback = void Function(
    OnKeyboardHeightChangeListenerResult);

typedef OffLazyLoadErrorCallback = void Function(OnLazyLoadErrorListenerResult);

typedef OffListeningCallback = void Function(GeneralCallbackResult);

typedef OffLoadCallback = void Function(GeneralCallbackResult);

typedef OffLocalServiceDiscoveryStopCallback = void Function(
    GeneralCallbackResult);

typedef OffLocalServiceFoundCallback = void Function(
    OnLocalServiceFoundListenerResult);

typedef OffLocalServiceLostCallback = void Function(
    OnLocalServiceLostListenerResult);

typedef OffLocalServiceResolveFailCallback = void Function(
    OnLocalServiceLostListenerResult);

typedef OffLocationChangeCallback = void Function(
    OnLocationChangeListenerResult);

typedef OffLocationChangeErrorCallback = void Function(
    OnLocationChangeErrorListenerResult);

typedef OffMemoryWarningCallback = void Function(OnMemoryWarningListenerResult);

typedef OffNetworkStatusChangeCallback = void Function(GeneralCallbackResult);

typedef OffNetworkWeakChangeCallback = void Function(
    OnNetworkWeakChangeListenerResult);

typedef OffPageNotFoundCallback = void Function(OnPageNotFoundListenerResult);

typedef OffPauseCallback = void Function(GeneralCallbackResult);

typedef OffPlayCallback = void Function(GeneralCallbackResult);

typedef OffScreenRecordingStateChangedCallback = void Function(
    OnScreenRecordingStateChangedListenerResult);

typedef OffSeekedCallback = void Function(GeneralCallbackResult);

typedef OffSeekingCallback = void Function(GeneralCallbackResult);

typedef OffStopCallback = void Function(GeneralCallbackResult);

typedef OffThemeChangeCallback = void Function(OnThemeChangeListenerResult);

typedef OffTimeUpdateCallback = void Function(GeneralCallbackResult);

typedef OffUnhandledRejectionCallback = void Function(
    OnUnhandledRejectionListenerResult);

typedef OffVoIPChatInterruptedCallback = void Function(
    OnVoIPChatInterruptedListenerResult);

typedef OffVoIPChatMembersChangedCallback = void Function(
    OnVoIPChatMembersChangedListenerResult);

typedef OffVoIPChatSpeakersChangedCallback = void Function(
    OnVoIPChatSpeakersChangedListenerResult);

typedef OffVoIPChatStateChangedCallback = void Function(
    OnVoIPChatStateChangedListenerResult);

typedef OffVoIPVideoMembersChangedCallback = void Function(
    OnVoIPVideoMembersChangedListenerResult);

typedef OffWaitingCallback = void Function(GeneralCallbackResult);

typedef OffWifiConnectedCallback = void Function(OnWifiConnectedListenerResult);

typedef OffWifiConnectedWithPartialInfoCallback = void Function(
    OnWifiConnectedWithPartialInfoListenerResult);

typedef OffWindowResizeCallback = void Function(OnWindowResizeListenerResult);

typedef OnAccelerometerChangeCallback = void Function(
    OnAccelerometerChangeListenerResult);

typedef OnAppHideCallback = void Function(GeneralCallbackResult);

typedef OnAppShowCallback = void Function(LaunchOptionsApp);

typedef OnAudioInterruptionBeginCallback = void Function(GeneralCallbackResult);

typedef OnAudioInterruptionEndCallback = void Function(GeneralCallbackResult);

typedef OnBLECharacteristicValueChangeCallback = void Function(
    OnBLECharacteristicValueChangeListenerResult);

typedef OnBLEConnectionStateChangeCallback = void Function(
    OnBLEConnectionStateChangeListenerResult);

typedef OnBLEMTUChangeCallback = void Function(OnBLEMTUChangeListenerResult);

typedef OnBLEPeripheralConnectionStateChangedCallback = void Function(
    OnBLEPeripheralConnectionStateChangedListenerResult);

typedef OnBackgroundAudioPauseCallback = void Function(GeneralCallbackResult);

typedef OnBackgroundAudioPlayCallback = void Function(GeneralCallbackResult);

typedef OnBackgroundAudioStopCallback = void Function(GeneralCallbackResult);

typedef OnBackgroundFetchDataCallback = void Function(
    OnBackgroundFetchDataListenerResult);

typedef OnBeaconServiceChangeCallback = void Function(
    OnBeaconServiceChangeListenerResult);

typedef OnBeaconUpdateCallback = void Function(OnBeaconUpdateListenerResult);

typedef OnBindWifiCallback = void Function(GeneralCallbackResult);

typedef OnBluetoothAdapterStateChangeCallback = void Function(
    OnBluetoothAdapterStateChangeListenerResult);

typedef OnBluetoothDeviceFoundCallback = void Function(
    OnBluetoothDeviceFoundListenerResult);

typedef OnCameraFrameCallback = void Function(OnCameraFrameCallbackResult);

typedef OnCanplayCallback = void Function(GeneralCallbackResult);

typedef OnCharacteristicReadRequestCallback = void Function(
    OnCharacteristicReadRequestListenerResult);

typedef OnCharacteristicSubscribedCallback = void Function(
    OnCharacteristicSubscribedListenerResult);

typedef OnCharacteristicUnsubscribedCallback = void Function(
    OnCharacteristicSubscribedListenerResult);

typedef OnCharacteristicWriteRequestCallback = void Function(
    OnCharacteristicWriteRequestListenerResult);

typedef OnCheckForUpdateCallback = void Function(
    OnCheckForUpdateListenerResult);

typedef OnChunkReceivedCallback = void Function(OnChunkReceivedListenerResult);

typedef OnCompassChangeCallback = void Function(OnCompassChangeListenerResult);

typedef OnConnectCallback = void Function(GeneralCallbackResult);

typedef OnCopyUrlCallback = void Function(OnCopyUrlListenerResult);

typedef OnDeviceMotionChangeCallback = void Function(
    OnDeviceMotionChangeListenerResult);

typedef OnDiscoveredCallback = void Function(OnDiscoveredListenerResult);

typedef OnEndedCallback = void Function(GeneralCallbackResult);

typedef OnFrameRecordedCallback = void Function(OnFrameRecordedListenerResult);

typedef OnGetWifiListCallback = void Function(OnGetWifiListListenerResult);

typedef OnGyroscopeChangeCallback = void Function(
    OnGyroscopeChangeListenerResult);

typedef OnHCEMessageCallback = void Function(OnHCEMessageListenerResult);

typedef OnHeadersReceivedCallback = void Function(
    OnHeadersReceivedListenerResult);

typedef OnInterruptionBeginCallback = void Function(GeneralCallbackResult);

typedef OnInterruptionEndCallback = void Function(GeneralCallbackResult);

typedef OnKeyboardHeightChangeCallback = void Function(
    OnKeyboardHeightChangeListenerResult);

typedef OnLazyLoadErrorCallback = void Function(OnLazyLoadErrorListenerResult);

typedef OnListeningCallback = void Function(GeneralCallbackResult);

typedef OnLoadCallback = void Function(GeneralCallbackResult);

typedef OnLocalServiceDiscoveryStopCallback = void Function(
    GeneralCallbackResult);

typedef OnLocalServiceFoundCallback = void Function(
    OnLocalServiceFoundListenerResult);

typedef OnLocalServiceLostCallback = void Function(
    OnLocalServiceLostListenerResult);

typedef OnLocalServiceResolveFailCallback = void Function(
    OnLocalServiceLostListenerResult);

typedef OnLocationChangeCallback = void Function(
    OnLocationChangeListenerResult);

typedef OnLocationChangeErrorCallback = void Function(
    OnLocationChangeErrorListenerResult);

typedef OnMemoryWarningCallback = void Function(OnMemoryWarningListenerResult);

typedef OnNetworkStatusChangeCallback = void Function(
    OnNetworkStatusChangeListenerResult);

typedef OnNetworkWeakChangeCallback = void Function(
    OnNetworkWeakChangeListenerResult);

typedef OnNextCallback = void Function(GeneralCallbackResult);

typedef OnOpenCallback = void Function(OnOpenListenerResult);

typedef OnPageNotFoundCallback = void Function(OnPageNotFoundListenerResult);

typedef OnPauseCallback = void Function(GeneralCallbackResult);

typedef OnPlayCallback = void Function(GeneralCallbackResult);

typedef OnPrevCallback = void Function(GeneralCallbackResult);

typedef OnProcessKilledCallback = void Function(GeneralCallbackResult);

typedef OnResumeCallback = void Function(GeneralCallbackResult);

typedef OnScreenRecordingStateChangedCallback = void Function(
    OnScreenRecordingStateChangedListenerResult);

typedef OnSeekedCallback = void Function(GeneralCallbackResult);

typedef OnSeekingCallback = void Function(GeneralCallbackResult);

typedef OnSocketCloseCallback = void Function(SocketTaskOnCloseListenerResult);

typedef OnSocketErrorCallback = void Function(GeneralCallbackResult);

typedef OnSocketMessageCallback = void Function(
    SocketTaskOnMessageListenerResult);

typedef OnSocketOpenCallback = void Function(OnSocketOpenListenerResult);

typedef OnStartCallback = void Function(GeneralCallbackResult);

typedef OnThemeChangeCallback = void Function(OnThemeChangeListenerResult);

typedef OnTimeUpdateCallback = void Function(GeneralCallbackResult);

typedef OnUnhandledRejectionCallback = void Function(
    OnUnhandledRejectionListenerResult);

typedef OnUpdateFailedCallback = void Function(GeneralCallbackResult);

typedef OnUpdateReadyCallback = void Function(GeneralCallbackResult);

typedef OnUserCaptureScreenCallback = void Function(GeneralCallbackResult);

typedef OnVoIPChatInterruptedCallback = void Function(
    OnVoIPChatInterruptedListenerResult);

typedef OnVoIPChatMembersChangedCallback = void Function(
    OnVoIPChatMembersChangedListenerResult);

typedef OnVoIPChatSpeakersChangedCallback = void Function(
    OnVoIPChatSpeakersChangedListenerResult);

typedef OnVoIPChatStateChangedCallback = void Function(
    OnVoIPChatStateChangedListenerResult);

typedef OnVoIPVideoMembersChangedCallback = void Function(
    OnVoIPVideoMembersChangedListenerResult);

typedef OnWaitingCallback = void Function(GeneralCallbackResult);

typedef OnWifiConnectedCallback = void Function(OnWifiConnectedListenerResult);

typedef OnWifiConnectedWithPartialInfoCallback = void Function(
    OnWifiConnectedWithPartialInfoListenerResult);

typedef OnWindowResizeCallback = void Function(OnWindowResizeListenerResult);

typedef OpenAppAuthorizeSettingCompleteCallback = void Function(
    GeneralCallbackResult);

typedef OpenAppAuthorizeSettingFailCallback = void Function(
    GeneralCallbackResult);

typedef OpenAppAuthorizeSettingSuccessCallback = void Function(
    GeneralCallbackResult);

typedef OpenBluetoothAdapterCompleteCallback = void Function(BluetoothError);

typedef OpenBluetoothAdapterFailCallback = void Function(BluetoothError);

typedef OpenBluetoothAdapterSuccessCallback = void Function(BluetoothError);

typedef OpenCardCompleteCallback = void Function(GeneralCallbackResult);

typedef OpenCardFailCallback = void Function(GeneralCallbackResult);

typedef OpenCardSuccessCallback = void Function(GeneralCallbackResult);

typedef OpenChannelsActivityCompleteCallback = void Function(
    GeneralCallbackResult);

typedef OpenChannelsActivityFailCallback = void Function(GeneralCallbackResult);

typedef OpenChannelsActivitySuccessCallback = void Function(
    GeneralCallbackResult);

typedef OpenChannelsEventCompleteCallback = void Function(
    GeneralCallbackResult);

typedef OpenChannelsEventFailCallback = void Function(GeneralCallbackResult);

typedef OpenChannelsEventSuccessCallback = void Function(GeneralCallbackResult);

typedef OpenChannelsLiveCompleteCallback = void Function(GeneralCallbackResult);

typedef OpenChannelsLiveFailCallback = void Function(GeneralCallbackResult);

typedef OpenChannelsLiveSuccessCallback = void Function(GeneralCallbackResult);

typedef OpenChannelsUserProfileCompleteCallback = void Function(
    GeneralCallbackResult);

typedef OpenChannelsUserProfileFailCallback = void Function(
    GeneralCallbackResult);

typedef OpenChannelsUserProfileSuccessCallback = void Function(
    GeneralCallbackResult);

typedef OpenCompleteCallback = void Function(GeneralCallbackResult);

typedef OpenCustomerServiceChatCompleteCallback = void Function(
    GeneralCallbackResult);

typedef OpenCustomerServiceChatFailCallback = void Function(
    GeneralCallbackResult);

typedef OpenCustomerServiceChatSuccessCallback = void Function(
    GeneralCallbackResult);

typedef OpenDocumentCompleteCallback = void Function(GeneralCallbackResult);

typedef OpenDocumentFailCallback = void Function(GeneralCallbackResult);

typedef OpenDocumentSuccessCallback = void Function(GeneralCallbackResult);

typedef OpenEmbeddedMiniProgramCompleteCallback = void Function(
    GeneralCallbackResult);

typedef OpenEmbeddedMiniProgramFailCallback = void Function(
    GeneralCallbackResult);

typedef OpenEmbeddedMiniProgramSuccessCallback = void Function(
    GeneralCallbackResult);

typedef OpenFailCallback = void Function(OpenFailCallbackResult);

typedef OpenLocationCompleteCallback = void Function(GeneralCallbackResult);

typedef OpenLocationFailCallback = void Function(GeneralCallbackResult);

typedef OpenLocationSuccessCallback = void Function(GeneralCallbackResult);

typedef OpenMapAppCompleteCallback = void Function(GeneralCallbackResult);

typedef OpenMapAppFailCallback = void Function(GeneralCallbackResult);

typedef OpenMapAppSuccessCallback = void Function(GeneralCallbackResult);

typedef OpenSettingCompleteCallback = void Function(GeneralCallbackResult);

typedef OpenSettingFailCallback = void Function(GeneralCallbackResult);

typedef OpenSettingSuccessCallback = void Function(
    OpenSettingSuccessCallbackResult);

typedef OpenSuccessCallback = void Function(OpenSuccessCallbackResult);

typedef OpenSystemBluetoothSettingCompleteCallback = void Function(
    GeneralCallbackResult);

typedef OpenSystemBluetoothSettingFailCallback = void Function(
    GeneralCallbackResult);

typedef OpenSystemBluetoothSettingSuccessCallback = void Function(
    GeneralCallbackResult);

typedef OpenVideoEditorCompleteCallback = void Function(GeneralCallbackResult);

typedef OpenVideoEditorFailCallback = void Function(GeneralCallbackResult);

typedef OpenVideoEditorSuccessCallback = void Function(
    OpenVideoEditorSuccessCallbackResult);

typedef PageScrollToCompleteCallback = void Function(GeneralCallbackResult);

typedef PageScrollToFailCallback = void Function(GeneralCallbackResult);

typedef PageScrollToSuccessCallback = void Function(GeneralCallbackResult);

typedef PauseBGMCompleteCallback = void Function(GeneralCallbackResult);

typedef PauseBGMFailCallback = void Function(GeneralCallbackResult);

typedef PauseBGMSuccessCallback = void Function(GeneralCallbackResult);

typedef PauseBackgroundAudioCompleteCallback = void Function(
    GeneralCallbackResult);

typedef PauseBackgroundAudioFailCallback = void Function(GeneralCallbackResult);

typedef PauseBackgroundAudioSuccessCallback = void Function(
    GeneralCallbackResult);

typedef PauseCompleteCallback = void Function(GeneralCallbackResult);

typedef PauseFailCallback = void Function(GeneralCallbackResult);

typedef PauseSuccessCallback = void Function(GeneralCallbackResult);

typedef PauseVoiceCompleteCallback = void Function(GeneralCallbackResult);

typedef PauseVoiceFailCallback = void Function(GeneralCallbackResult);

typedef PauseVoiceSuccessCallback = void Function(GeneralCallbackResult);

typedef PlayBGMCompleteCallback = void Function(GeneralCallbackResult);

typedef PlayBGMFailCallback = void Function(GeneralCallbackResult);

typedef PlayBGMSuccessCallback = void Function(GeneralCallbackResult);

typedef PlayBackgroundAudioCompleteCallback = void Function(
    GeneralCallbackResult);

typedef PlayBackgroundAudioFailCallback = void Function(GeneralCallbackResult);

typedef PlayBackgroundAudioSuccessCallback = void Function(
    GeneralCallbackResult);

typedef PlayCompleteCallback = void Function(GeneralCallbackResult);

typedef PlayFailCallback = void Function(GeneralCallbackResult);

typedef PlaySuccessCallback = void Function(GeneralCallbackResult);

typedef PlayVoiceCompleteCallback = void Function(GeneralCallbackResult);

typedef PlayVoiceFailCallback = void Function(GeneralCallbackResult);

typedef PlayVoiceSuccessCallback = void Function(GeneralCallbackResult);

typedef PluginLoginCompleteCallback = void Function(GeneralCallbackResult);

typedef PluginLoginFailCallback = void Function(GeneralCallbackResult);

typedef PluginLoginSuccessCallback = void Function(
    PluginLoginSuccessCallbackResult);

typedef PreDownloadSubpackageTaskOnProgressUpdateCallback = void Function(
    PreDownloadSubpackageTaskOnProgressUpdateListenerResult);

typedef PreloadAssetsCompleteCallback = void Function(GeneralCallbackResult);

typedef PreloadAssetsFailCallback = void Function(GeneralCallbackResult);

typedef PreloadAssetsSuccessCallback = void Function(GeneralCallbackResult);

typedef PreloadSkylineViewCompleteCallback = void Function(
    GeneralCallbackResult);

typedef PreloadSkylineViewFailCallback = void Function(GeneralCallbackResult);

typedef PreloadSkylineViewSuccessCallback = void Function(
    GeneralCallbackResult);

typedef PreloadWebviewCompleteCallback = void Function(GeneralCallbackResult);

typedef PreloadWebviewFailCallback = void Function(GeneralCallbackResult);

typedef PreloadWebviewSuccessCallback = void Function(GeneralCallbackResult);

typedef PreviewImageCompleteCallback = void Function(GeneralCallbackResult);

typedef PreviewImageFailCallback = void Function(GeneralCallbackResult);

typedef PreviewImageSuccessCallback = void Function(GeneralCallbackResult);

typedef PreviewMediaCompleteCallback = void Function(GeneralCallbackResult);

typedef PreviewMediaFailCallback = void Function(GeneralCallbackResult);

typedef PreviewMediaSuccessCallback = void Function(GeneralCallbackResult);

typedef ReLaunchCompleteCallback = void Function(GeneralCallbackResult);

typedef ReLaunchFailCallback = void Function(GeneralCallbackResult);

typedef ReLaunchSuccessCallback = void Function(GeneralCallbackResult);

typedef ReadBLECharacteristicValueCompleteCallback = void Function(
    BluetoothError);

typedef ReadBLECharacteristicValueFailCallback = void Function(BluetoothError);

typedef ReadBLECharacteristicValueSuccessCallback = void Function(
    BluetoothError);

typedef ReadCompleteCallback = void Function(GeneralCallbackResult);

typedef ReadCompressedFileCompleteCallback = void Function(
    GeneralCallbackResult);

typedef ReadCompressedFileFailCallback = void Function(
    ReadCompressedFileFailCallbackResult);

typedef ReadCompressedFileSuccessCallback = void Function(
    ReadCompressedFileSuccessCallbackResult);

typedef ReadFailCallback = void Function(ReadFailCallbackResult);

typedef ReadFileCompleteCallback = void Function(GeneralCallbackResult);

typedef ReadFileFailCallback = void Function(ReadFileFailCallbackResult);

typedef ReadFileSuccessCallback = void Function(ReadFileSuccessCallbackResult);

typedef ReadSuccessCallback = void Function(ReadSuccessCallbackResult);

typedef ReadZipEntryCompleteCallback = void Function(GeneralCallbackResult);

typedef ReadZipEntryFailCallback = void Function(
    ReadZipEntryFailCallbackResult);

typedef ReadZipEntrySuccessCallback = void Function(
    ReadZipEntrySuccessCallbackResult);

typedef ReaddirCompleteCallback = void Function(GeneralCallbackResult);

typedef ReaddirFailCallback = void Function(ReaddirFailCallbackResult);

typedef ReaddirSuccessCallback = void Function(ReaddirSuccessCallbackResult);

typedef RecorderManagerOnStopCallback = void Function(OnStopListenerResult);

typedef RedirectToCompleteCallback = void Function(GeneralCallbackResult);

typedef RedirectToFailCallback = void Function(GeneralCallbackResult);

typedef RedirectToSuccessCallback = void Function(GeneralCallbackResult);

typedef RedoCompleteCallback = void Function(GeneralCallbackResult);

typedef RedoFailCallback = void Function(GeneralCallbackResult);

typedef RedoSuccessCallback = void Function(GeneralCallbackResult);

typedef RemoveArcCompleteCallback = void Function(GeneralCallbackResult);

typedef RemoveArcFailCallback = void Function(GeneralCallbackResult);

typedef RemoveArcSuccessCallback = void Function(GeneralCallbackResult);

typedef RemoveCustomLayerCompleteCallback = void Function(
    GeneralCallbackResult);

typedef RemoveCustomLayerFailCallback = void Function(GeneralCallbackResult);

typedef RemoveCustomLayerSuccessCallback = void Function(GeneralCallbackResult);

typedef RemoveFormatCompleteCallback = void Function(GeneralCallbackResult);

typedef RemoveFormatFailCallback = void Function(GeneralCallbackResult);

typedef RemoveFormatSuccessCallback = void Function(GeneralCallbackResult);

typedef RemoveGroundOverlayCompleteCallback = void Function(
    GeneralCallbackResult);

typedef RemoveGroundOverlayFailCallback = void Function(GeneralCallbackResult);

typedef RemoveGroundOverlaySuccessCallback = void Function(
    GeneralCallbackResult);

typedef RemoveMarkersCompleteCallback = void Function(GeneralCallbackResult);

typedef RemoveMarkersFailCallback = void Function(GeneralCallbackResult);

typedef RemoveMarkersSuccessCallback = void Function(GeneralCallbackResult);

typedef RemoveSavedFileCompleteCallback = void Function(GeneralCallbackResult);

typedef RemoveSavedFileFailCallback = void Function(
    RemoveSavedFileFailCallbackResult);

typedef RemoveSavedFileSuccessCallback = void Function(GeneralCallbackResult);

typedef RemoveServiceCompleteCallback = void Function(GeneralCallbackResult);

typedef RemoveServiceFailCallback = void Function(GeneralCallbackResult);

typedef RemoveServiceSuccessCallback = void Function(GeneralCallbackResult);

typedef RemoveStorageCompleteCallback = void Function(GeneralCallbackResult);

typedef RemoveStorageFailCallback = void Function(GeneralCallbackResult);

typedef RemoveStorageSuccessCallback = void Function(GeneralCallbackResult);

typedef RemoveTabBarBadgeCompleteCallback = void Function(
    GeneralCallbackResult);

typedef RemoveTabBarBadgeFailCallback = void Function(GeneralCallbackResult);

typedef RemoveTabBarBadgeSuccessCallback = void Function(GeneralCallbackResult);

typedef RemoveVisualLayerCompleteCallback = void Function(
    GeneralCallbackResult);

typedef RemoveVisualLayerFailCallback = void Function(GeneralCallbackResult);

typedef RemoveVisualLayerSuccessCallback = void Function(GeneralCallbackResult);

typedef RenameCompleteCallback = void Function(GeneralCallbackResult);

typedef RenameFailCallback = void Function(RenameFailCallbackResult);

typedef RenameSuccessCallback = void Function(GeneralCallbackResult);

typedef RequestCompleteCallback = void Function(GeneralCallbackResult);

typedef RequestFailCallback = void Function(Err);

typedef RequestFullScreenCompleteCallback = void Function(
    GeneralCallbackResult);

typedef RequestFullScreenFailCallback = void Function(GeneralCallbackResult);

typedef RequestFullScreenSuccessCallback = void Function(GeneralCallbackResult);

typedef RequestOrderPaymentCompleteCallback = void Function(
    GeneralCallbackResult);

typedef RequestOrderPaymentFailCallback = void Function(GeneralCallbackResult);

typedef RequestOrderPaymentSuccessCallback = void Function(
    GeneralCallbackResult);

typedef RequestPaymentCompleteCallback = void Function(GeneralCallbackResult);

typedef RequestPaymentFailCallback = void Function(GeneralCallbackResult);

typedef RequestPaymentSuccessCallback = void Function(GeneralCallbackResult);

typedef RequestPictureInPictureCompleteCallback = void Function(
    GeneralCallbackResult);

typedef RequestPictureInPictureFailCallback = void Function(
    GeneralCallbackResult);

typedef RequestPictureInPictureSuccessCallback = void Function(
    GeneralCallbackResult);

typedef RequestPluginPaymentCompleteCallback = void Function(
    GeneralCallbackResult);

typedef RequestPluginPaymentFailCallback = void Function(GeneralCallbackResult);

typedef RequestPluginPaymentSuccessCallback = void Function(
    GeneralCallbackResult);

typedef RequestSubscribeDeviceMessageCompleteCallback = void Function(
    GeneralCallbackResult);

typedef RequestSubscribeDeviceMessageFailCallback = void Function(
    RequestSubscribeDeviceMessageFailCallbackResult);

typedef RequestSubscribeDeviceMessageSuccessCallback = void Function(
    RequestSubscribeDeviceMessageSuccessCallbackResult);

typedef RequestSubscribeMessageCompleteCallback = void Function(
    GeneralCallbackResult);

typedef RequestSubscribeMessageFailCallback = void Function(
    RequestSubscribeMessageFailCallbackResult);

typedef RequestSubscribeMessageSuccessCallback = void Function(
    RequestSubscribeMessageSuccessCallbackResult);

typedef RequestSuccessCallback<T> = void Function(
    RequestSuccessCallbackResult<T>);

typedef ResumeBGMCompleteCallback = void Function(GeneralCallbackResult);

typedef ResumeBGMFailCallback = void Function(GeneralCallbackResult);

typedef ResumeBGMSuccessCallback = void Function(GeneralCallbackResult);

typedef ResumeCompleteCallback = void Function(GeneralCallbackResult);

typedef ResumeFailCallback = void Function(GeneralCallbackResult);

typedef ResumeSuccessCallback = void Function(GeneralCallbackResult);

typedef RewardedVideoAdOffCloseCallback = void Function(
    RewardedVideoAdOnCloseListenerResult);

typedef RewardedVideoAdOffErrorCallback = void Function(
    RewardedVideoAdOnErrorListenerResult);

typedef RewardedVideoAdOnCloseCallback = void Function(
    RewardedVideoAdOnCloseListenerResult);

typedef RewardedVideoAdOnErrorCallback = void Function(
    RewardedVideoAdOnErrorListenerResult);

typedef RmdirCompleteCallback = void Function(GeneralCallbackResult);

typedef RmdirFailCallback = void Function(RmdirFailCallbackResult);

typedef RmdirSuccessCallback = void Function(GeneralCallbackResult);

typedef SaveFileCompleteCallback = void Function(GeneralCallbackResult);

typedef SaveFileFailCallback = void Function(SaveFileFailCallbackResult);

typedef SaveFileSuccessCallback = void Function(SaveFileSuccessCallbackResult);

typedef SaveFileToDiskCompleteCallback = void Function(GeneralCallbackResult);

typedef SaveFileToDiskFailCallback = void Function(GeneralCallbackResult);

typedef SaveFileToDiskSuccessCallback = void Function(GeneralCallbackResult);

typedef SaveImageToPhotosAlbumCompleteCallback = void Function(
    GeneralCallbackResult);

typedef SaveImageToPhotosAlbumFailCallback = void Function(
    GeneralCallbackResult);

typedef SaveImageToPhotosAlbumSuccessCallback = void Function(
    GeneralCallbackResult);

typedef SaveVideoToPhotosAlbumCompleteCallback = void Function(
    GeneralCallbackResult);

typedef SaveVideoToPhotosAlbumFailCallback = void Function(
    GeneralCallbackResult);

typedef SaveVideoToPhotosAlbumSuccessCallback = void Function(
    GeneralCallbackResult);

typedef ScanCodeCompleteCallback = void Function(GeneralCallbackResult);

typedef ScanCodeFailCallback = void Function(GeneralCallbackResult);

typedef ScanCodeSuccessCallback = void Function(ScanCodeSuccessCallbackResult);

typedef ScrollOffsetCallback = void Function(ScrollOffsetCallbackResult);

typedef SeekBackgroundAudioCompleteCallback = void Function(
    GeneralCallbackResult);

typedef SeekBackgroundAudioFailCallback = void Function(GeneralCallbackResult);

typedef SeekBackgroundAudioSuccessCallback = void Function(
    GeneralCallbackResult);

typedef SendCompleteCallback = void Function(GeneralCallbackResult);

typedef SendFailCallback = void Function(GeneralCallbackResult);

typedef SendHCEMessageCompleteCallback = void Function(NFCError);

typedef SendHCEMessageFailCallback = void Function(NFCError);

typedef SendHCEMessageSuccessCallback = void Function(NFCError);

typedef SendMessageCompleteCallback = void Function(GeneralCallbackResult);

typedef SendMessageFailCallback = void Function(GeneralCallbackResult);

typedef SendMessageSuccessCallback = void Function(GeneralCallbackResult);

typedef SendSmsCompleteCallback = void Function(GeneralCallbackResult);

typedef SendSmsFailCallback = void Function(GeneralCallbackResult);

typedef SendSmsSuccessCallback = void Function(GeneralCallbackResult);

typedef SendSocketMessageCompleteCallback = void Function(
    GeneralCallbackResult);

typedef SendSocketMessageFailCallback = void Function(GeneralCallbackResult);

typedef SendSocketMessageSuccessCallback = void Function(GeneralCallbackResult);

typedef SendSuccessCallback = void Function(GeneralCallbackResult);

typedef SetBGMVolumeCompleteCallback = void Function(GeneralCallbackResult);

typedef SetBGMVolumeFailCallback = void Function(GeneralCallbackResult);

typedef SetBGMVolumeSuccessCallback = void Function(GeneralCallbackResult);

typedef SetBLEMTUCompleteCallback = void Function(GeneralCallbackResult);

typedef SetBLEMTUFailCallback = void Function(SetBLEMTUFailCallbackResult);

typedef SetBLEMTUSuccessCallback = void Function(
    SetBLEMTUSuccessCallbackResult);

typedef SetBackgroundColorCompleteCallback = void Function(
    GeneralCallbackResult);

typedef SetBackgroundColorFailCallback = void Function(GeneralCallbackResult);

typedef SetBackgroundColorSuccessCallback = void Function(
    GeneralCallbackResult);

typedef SetBackgroundFetchTokenCompleteCallback = void Function(
    GeneralCallbackResult);

typedef SetBackgroundFetchTokenFailCallback = void Function(
    GeneralCallbackResult);

typedef SetBackgroundFetchTokenSuccessCallback = void Function(
    GeneralCallbackResult);

typedef SetBackgroundTextStyleCompleteCallback = void Function(
    GeneralCallbackResult);

typedef SetBackgroundTextStyleFailCallback = void Function(
    GeneralCallbackResult);

typedef SetBackgroundTextStyleSuccessCallback = void Function(
    GeneralCallbackResult);

typedef SetBoundaryCompleteCallback = void Function(GeneralCallbackResult);

typedef SetBoundaryFailCallback = void Function(GeneralCallbackResult);

typedef SetBoundarySuccessCallback = void Function(GeneralCallbackResult);

typedef SetCenterOffsetCompleteCallback = void Function(GeneralCallbackResult);

typedef SetCenterOffsetFailCallback = void Function(GeneralCallbackResult);

typedef SetCenterOffsetSuccessCallback = void Function(GeneralCallbackResult);

typedef SetClipboardDataCompleteCallback = void Function(GeneralCallbackResult);

typedef SetClipboardDataFailCallback = void Function(GeneralCallbackResult);

typedef SetClipboardDataSuccessCallback = void Function(GeneralCallbackResult);

typedef SetContentsCompleteCallback = void Function(GeneralCallbackResult);

typedef SetContentsFailCallback = void Function(GeneralCallbackResult);

typedef SetContentsSuccessCallback = void Function(GeneralCallbackResult);

typedef SetEnable1v1ChatCompleteCallback = void Function(GeneralCallbackResult);

typedef SetEnable1v1ChatFailCallback = void Function(GeneralCallbackResult);

typedef SetEnable1v1ChatSuccessCallback = void Function(GeneralCallbackResult);

typedef SetEnableDebugCompleteCallback = void Function(GeneralCallbackResult);

typedef SetEnableDebugFailCallback = void Function(GeneralCallbackResult);

typedef SetEnableDebugSuccessCallback = void Function(GeneralCallbackResult);

typedef SetInnerAudioOptionCompleteCallback = void Function(
    GeneralCallbackResult);

typedef SetInnerAudioOptionFailCallback = void Function(GeneralCallbackResult);

typedef SetInnerAudioOptionSuccessCallback = void Function(
    GeneralCallbackResult);

typedef SetKeepScreenOnCompleteCallback = void Function(GeneralCallbackResult);

typedef SetKeepScreenOnFailCallback = void Function(GeneralCallbackResult);

typedef SetKeepScreenOnSuccessCallback = void Function(GeneralCallbackResult);

typedef SetLocMarkerIconCompleteCallback = void Function(GeneralCallbackResult);

typedef SetLocMarkerIconFailCallback = void Function(GeneralCallbackResult);

typedef SetLocMarkerIconSuccessCallback = void Function(GeneralCallbackResult);

typedef SetMICVolumeCompleteCallback = void Function(GeneralCallbackResult);

typedef SetMICVolumeFailCallback = void Function(GeneralCallbackResult);

typedef SetMICVolumeSuccessCallback = void Function(GeneralCallbackResult);

typedef SetNavigationBarColorCompleteCallback = void Function(
    GeneralCallbackResult);

typedef SetNavigationBarColorFailCallback = void Function(
    GeneralCallbackResult);

typedef SetNavigationBarColorSuccessCallback = void Function(
    GeneralCallbackResult);

typedef SetNavigationBarTitleCompleteCallback = void Function(
    GeneralCallbackResult);

typedef SetNavigationBarTitleFailCallback = void Function(
    GeneralCallbackResult);

typedef SetNavigationBarTitleSuccessCallback = void Function(
    GeneralCallbackResult);

typedef SetScreenBrightnessCompleteCallback = void Function(
    GeneralCallbackResult);

typedef SetScreenBrightnessFailCallback = void Function(GeneralCallbackResult);

typedef SetScreenBrightnessSuccessCallback = void Function(
    GeneralCallbackResult);

typedef SetStorageCompleteCallback = void Function(GeneralCallbackResult);

typedef SetStorageFailCallback = void Function(GeneralCallbackResult);

typedef SetStorageSuccessCallback = void Function(GeneralCallbackResult);

typedef SetTabBarBadgeCompleteCallback = void Function(GeneralCallbackResult);

typedef SetTabBarBadgeFailCallback = void Function(GeneralCallbackResult);

typedef SetTabBarBadgeSuccessCallback = void Function(GeneralCallbackResult);

typedef SetTabBarItemCompleteCallback = void Function(GeneralCallbackResult);

typedef SetTabBarItemFailCallback = void Function(GeneralCallbackResult);

typedef SetTabBarItemSuccessCallback = void Function(GeneralCallbackResult);

typedef SetTabBarStyleCompleteCallback = void Function(GeneralCallbackResult);

typedef SetTabBarStyleFailCallback = void Function(GeneralCallbackResult);

typedef SetTabBarStyleSuccessCallback = void Function(GeneralCallbackResult);

typedef SetTimeoutCompleteCallback = void Function(Nfcrwerror);

typedef SetTimeoutFailCallback = void Function(Nfcrwerror);

typedef SetTimeoutSuccessCallback = void Function(Nfcrwerror);

typedef SetTopBarTextCompleteCallback = void Function(GeneralCallbackResult);

typedef SetTopBarTextFailCallback = void Function(GeneralCallbackResult);

typedef SetTopBarTextSuccessCallback = void Function(GeneralCallbackResult);

typedef SetVisualEffectOnCaptureCompleteCallback = void Function(
    GeneralCallbackResult);

typedef SetVisualEffectOnCaptureFailCallback = void Function(
    GeneralCallbackResult);

typedef SetVisualEffectOnCaptureSuccessCallback = void Function(
    GeneralCallbackResult);

typedef SetWifiListCompleteCallback = void Function(WifiError);

typedef SetWifiListFailCallback = void Function(WifiError);

typedef SetWifiListSuccessCallback = void Function(WifiError);

typedef SetWindowSizeCompleteCallback = void Function(GeneralCallbackResult);

typedef SetWindowSizeFailCallback = void Function(GeneralCallbackResult);

typedef SetWindowSizeSuccessCallback = void Function(GeneralCallbackResult);

typedef SetZoomCompleteCallback = void Function(GeneralCallbackResult);

typedef SetZoomFailCallback = void Function(GeneralCallbackResult);

typedef SetZoomSuccessCallback = void Function(SetZoomSuccessCallbackResult);

typedef ShareFileMessageCompleteCallback = void Function(GeneralCallbackResult);

typedef ShareFileMessageFailCallback = void Function(GeneralCallbackResult);

typedef ShareFileMessageSuccessCallback = void Function(GeneralCallbackResult);

typedef ShareToWeRunCompleteCallback = void Function(GeneralCallbackResult);

typedef ShareToWeRunFailCallback = void Function(GeneralCallbackResult);

typedef ShareToWeRunSuccessCallback = void Function(GeneralCallbackResult);

typedef ShareVideoMessageCompleteCallback = void Function(
    GeneralCallbackResult);

typedef ShareVideoMessageFailCallback = void Function(GeneralCallbackResult);

typedef ShareVideoMessageSuccessCallback = void Function(GeneralCallbackResult);

typedef ShowActionSheetCompleteCallback = void Function(GeneralCallbackResult);

typedef ShowActionSheetFailCallback = void Function(GeneralCallbackResult);

typedef ShowActionSheetSuccessCallback = void Function(
    ShowActionSheetSuccessCallbackResult);

typedef ShowLoadingCompleteCallback = void Function(GeneralCallbackResult);

typedef ShowLoadingFailCallback = void Function(GeneralCallbackResult);

typedef ShowLoadingSuccessCallback = void Function(GeneralCallbackResult);

typedef ShowModalCompleteCallback = void Function(GeneralCallbackResult);

typedef ShowModalFailCallback = void Function(GeneralCallbackResult);

typedef ShowModalSuccessCallback = void Function(
    ShowModalSuccessCallbackResult);

typedef ShowNavigationBarLoadingCompleteCallback = void Function(
    GeneralCallbackResult);

typedef ShowNavigationBarLoadingFailCallback = void Function(
    GeneralCallbackResult);

typedef ShowNavigationBarLoadingSuccessCallback = void Function(
    GeneralCallbackResult);

typedef ShowRedPackageCompleteCallback = void Function(GeneralCallbackResult);

typedef ShowRedPackageFailCallback = void Function(GeneralCallbackResult);

typedef ShowRedPackageSuccessCallback = void Function(GeneralCallbackResult);

typedef ShowShareImageMenuCompleteCallback = void Function(
    GeneralCallbackResult);

typedef ShowShareImageMenuFailCallback = void Function(GeneralCallbackResult);

typedef ShowShareImageMenuSuccessCallback = void Function(
    GeneralCallbackResult);

typedef ShowShareMenuCompleteCallback = void Function(GeneralCallbackResult);

typedef ShowShareMenuFailCallback = void Function(GeneralCallbackResult);

typedef ShowShareMenuSuccessCallback = void Function(GeneralCallbackResult);

typedef ShowTabBarCompleteCallback = void Function(GeneralCallbackResult);

typedef ShowTabBarFailCallback = void Function(GeneralCallbackResult);

typedef ShowTabBarRedDotCompleteCallback = void Function(GeneralCallbackResult);

typedef ShowTabBarRedDotFailCallback = void Function(GeneralCallbackResult);

typedef ShowTabBarRedDotSuccessCallback = void Function(GeneralCallbackResult);

typedef ShowTabBarSuccessCallback = void Function(GeneralCallbackResult);

typedef ShowToastCompleteCallback = void Function(GeneralCallbackResult);

typedef ShowToastFailCallback = void Function(GeneralCallbackResult);

typedef ShowToastSuccessCallback = void Function(GeneralCallbackResult);

typedef SnapshotCompleteCallback = void Function(GeneralCallbackResult);

typedef SnapshotFailCallback = void Function(GeneralCallbackResult);

typedef SocketTaskCloseFailCallback = void Function(GeneralCallbackResult);

typedef SocketTaskOnCloseCallback = void Function(
    SocketTaskOnCloseListenerResult);

typedef SocketTaskOnMessageCallback = void Function(
    SocketTaskOnMessageListenerResult);

typedef StartAccelerometerCompleteCallback = void Function(
    GeneralCallbackResult);

typedef StartAccelerometerFailCallback = void Function(GeneralCallbackResult);

typedef StartAccelerometerSuccessCallback = void Function(
    GeneralCallbackResult);

typedef StartAdvertisingCompleteCallback = void Function(GeneralCallbackResult);

typedef StartAdvertisingFailCallback = void Function(GeneralCallbackResult);

typedef StartAdvertisingSuccessCallback = void Function(GeneralCallbackResult);

typedef StartBeaconDiscoveryCompleteCallback = void Function(BeaconError);

typedef StartBeaconDiscoveryFailCallback = void Function(BeaconError);

typedef StartBeaconDiscoverySuccessCallback = void Function(BeaconError);

typedef StartBluetoothDevicesDiscoveryCompleteCallback = void Function(
    BluetoothError);

typedef StartBluetoothDevicesDiscoveryFailCallback = void Function(
    BluetoothError);

typedef StartBluetoothDevicesDiscoverySuccessCallback = void Function(
    BluetoothError);

typedef StartCompassCompleteCallback = void Function(GeneralCallbackResult);

typedef StartCompassFailCallback = void Function(GeneralCallbackResult);

typedef StartCompassSuccessCallback = void Function(GeneralCallbackResult);

typedef StartCompleteCallback = void Function(GeneralCallbackResult);

typedef StartDeviceMotionListeningCompleteCallback = void Function(
    GeneralCallbackResult);

typedef StartDeviceMotionListeningFailCallback = void Function(
    GeneralCallbackResult);

typedef StartDeviceMotionListeningSuccessCallback = void Function(
    GeneralCallbackResult);

typedef StartDiscoveryCompleteCallback = void Function(Nfcrwerror);

typedef StartDiscoveryFailCallback = void Function(Nfcrwerror);

typedef StartDiscoverySuccessCallback = void Function(Nfcrwerror);

typedef StartFailCallback = void Function(GeneralCallbackResult);

typedef StartGyroscopeCompleteCallback = void Function(GeneralCallbackResult);

typedef StartGyroscopeFailCallback = void Function(GeneralCallbackResult);

typedef StartGyroscopeSuccessCallback = void Function(GeneralCallbackResult);

typedef StartHCECompleteCallback = void Function(NFCError);

typedef StartHCEFailCallback = void Function(NFCError);

typedef StartHCESuccessCallback = void Function(NFCError);

typedef StartLocalServiceDiscoveryCompleteCallback = void Function(
    GeneralCallbackResult);

typedef StartLocalServiceDiscoveryFailCallback = void Function(
    StartLocalServiceDiscoveryFailCallbackResult);

typedef StartLocalServiceDiscoverySuccessCallback = void Function(
    GeneralCallbackResult);

typedef StartLocationUpdateBackgroundCompleteCallback = void Function(
    GeneralCallbackResult);

typedef StartLocationUpdateBackgroundFailCallback = void Function(
    GeneralCallbackResult);

typedef StartLocationUpdateBackgroundSuccessCallback = void Function(
    GeneralCallbackResult);

typedef StartLocationUpdateCompleteCallback = void Function(
    GeneralCallbackResult);

typedef StartLocationUpdateFailCallback = void Function(GeneralCallbackResult);

typedef StartLocationUpdateSuccessCallback = void Function(
    GeneralCallbackResult);

typedef StartPreviewCompleteCallback = void Function(GeneralCallbackResult);

typedef StartPreviewFailCallback = void Function(GeneralCallbackResult);

typedef StartPreviewSuccessCallback = void Function(GeneralCallbackResult);

typedef StartPullDownRefreshCompleteCallback = void Function(
    GeneralCallbackResult);

typedef StartPullDownRefreshFailCallback = void Function(GeneralCallbackResult);

typedef StartPullDownRefreshSuccessCallback = void Function(
    GeneralCallbackResult);

typedef StartRecordCompleteCallback = void Function(GeneralCallbackResult);

typedef StartRecordFailCallback = void Function(GeneralCallbackResult);

typedef StartRecordTimeoutCallback = void Function(
    StartRecordTimeoutCallbackResult);

typedef StartSoterAuthenticationCompleteCallback = void Function(
    GeneralCallbackResult);

typedef StartSoterAuthenticationFailCallback = void Function(
    GeneralCallbackResult);

typedef StartSoterAuthenticationSuccessCallback = void Function(
    StartSoterAuthenticationSuccessCallbackResult);

typedef StartSuccessCallback = void Function(GeneralCallbackResult);

typedef StartWifiCompleteCallback = void Function(WifiError);

typedef StartWifiFailCallback = void Function(WifiError);

typedef StartWifiSuccessCallback = void Function(WifiError);

typedef StatCompleteCallback = void Function(GeneralCallbackResult);

typedef StatFailCallback = void Function(StatFailCallbackResult);

typedef StatSuccessCallback = void Function(StatSuccessCallbackResult);

typedef StopAccelerometerCompleteCallback = void Function(
    GeneralCallbackResult);

typedef StopAccelerometerFailCallback = void Function(GeneralCallbackResult);

typedef StopAccelerometerSuccessCallback = void Function(GeneralCallbackResult);

typedef StopAdvertisingCompleteCallback = void Function(GeneralCallbackResult);

typedef StopAdvertisingFailCallback = void Function(GeneralCallbackResult);

typedef StopAdvertisingSuccessCallback = void Function(GeneralCallbackResult);

typedef StopBGMCompleteCallback = void Function(GeneralCallbackResult);

typedef StopBGMFailCallback = void Function(GeneralCallbackResult);

typedef StopBGMSuccessCallback = void Function(GeneralCallbackResult);

typedef StopBackgroundAudioCompleteCallback = void Function(
    GeneralCallbackResult);

typedef StopBackgroundAudioFailCallback = void Function(GeneralCallbackResult);

typedef StopBackgroundAudioSuccessCallback = void Function(
    GeneralCallbackResult);

typedef StopBeaconDiscoveryCompleteCallback = void Function(BeaconError);

typedef StopBeaconDiscoveryFailCallback = void Function(BeaconError);

typedef StopBeaconDiscoverySuccessCallback = void Function(BeaconError);

typedef StopBluetoothDevicesDiscoveryCompleteCallback = void Function(
    BluetoothError);

typedef StopBluetoothDevicesDiscoveryFailCallback = void Function(
    BluetoothError);

typedef StopBluetoothDevicesDiscoverySuccessCallback = void Function(
    BluetoothError);

typedef StopCompassCompleteCallback = void Function(GeneralCallbackResult);

typedef StopCompassFailCallback = void Function(GeneralCallbackResult);

typedef StopCompassSuccessCallback = void Function(GeneralCallbackResult);

typedef StopCompleteCallback = void Function(GeneralCallbackResult);

typedef StopDeviceMotionListeningCompleteCallback = void Function(
    GeneralCallbackResult);

typedef StopDeviceMotionListeningFailCallback = void Function(
    GeneralCallbackResult);

typedef StopDeviceMotionListeningSuccessCallback = void Function(
    GeneralCallbackResult);

typedef StopDiscoveryCompleteCallback = void Function(Nfcrwerror);

typedef StopDiscoveryFailCallback = void Function(Nfcrwerror);

typedef StopDiscoverySuccessCallback = void Function(Nfcrwerror);

typedef StopFaceDetectCompleteCallback = void Function(GeneralCallbackResult);

typedef StopFaceDetectFailCallback = void Function(GeneralCallbackResult);

typedef StopFaceDetectSuccessCallback = void Function(GeneralCallbackResult);

typedef StopFailCallback = void Function(GeneralCallbackResult);

typedef StopGyroscopeCompleteCallback = void Function(GeneralCallbackResult);

typedef StopGyroscopeFailCallback = void Function(GeneralCallbackResult);

typedef StopGyroscopeSuccessCallback = void Function(GeneralCallbackResult);

typedef StopHCECompleteCallback = void Function(NFCError);

typedef StopHCEFailCallback = void Function(NFCError);

typedef StopHCESuccessCallback = void Function(NFCError);

typedef StopLocalServiceDiscoveryCompleteCallback = void Function(
    GeneralCallbackResult);

typedef StopLocalServiceDiscoveryFailCallback = void Function(
    StopLocalServiceDiscoveryFailCallbackResult);

typedef StopLocalServiceDiscoverySuccessCallback = void Function(
    GeneralCallbackResult);

typedef StopLocationUpdateCompleteCallback = void Function(
    GeneralCallbackResult);

typedef StopLocationUpdateFailCallback = void Function(GeneralCallbackResult);

typedef StopLocationUpdateSuccessCallback = void Function(
    GeneralCallbackResult);

typedef StopPreviewCompleteCallback = void Function(GeneralCallbackResult);

typedef StopPreviewFailCallback = void Function(GeneralCallbackResult);

typedef StopPreviewSuccessCallback = void Function(GeneralCallbackResult);

typedef StopPullDownRefreshCompleteCallback = void Function(
    GeneralCallbackResult);

typedef StopPullDownRefreshFailCallback = void Function(GeneralCallbackResult);

typedef StopPullDownRefreshSuccessCallback = void Function(
    GeneralCallbackResult);

typedef StopRecordCompleteCallback = void Function(GeneralCallbackResult);

typedef StopRecordFailCallback = void Function(GeneralCallbackResult);

typedef StopSuccessCallback = void Function(GeneralCallbackResult);

typedef StopVoiceCompleteCallback = void Function(GeneralCallbackResult);

typedef StopVoiceFailCallback = void Function(GeneralCallbackResult);

typedef StopVoiceSuccessCallback = void Function(GeneralCallbackResult);

typedef StopWifiCompleteCallback = void Function(WifiError);

typedef StopWifiFailCallback = void Function(WifiError);

typedef StopWifiSuccessCallback = void Function(WifiError);

typedef SubscribeVoIPVideoMembersCompleteCallback = void Function(
    GeneralCallbackResult);

typedef SubscribeVoIPVideoMembersFailCallback = void Function(
    GeneralCallbackResult);

typedef SubscribeVoIPVideoMembersSuccessCallback = void Function(
    GeneralCallbackResult);

typedef SwitchCameraCompleteCallback = void Function(GeneralCallbackResult);

typedef SwitchCameraFailCallback = void Function(GeneralCallbackResult);

typedef SwitchCameraSuccessCallback = void Function(GeneralCallbackResult);

typedef SwitchTabCompleteCallback = void Function(GeneralCallbackResult);

typedef SwitchTabFailCallback = void Function(GeneralCallbackResult);

typedef SwitchTabSuccessCallback = void Function(GeneralCallbackResult);

typedef TCPSocketOffMessageCallback = void Function(
    TCPSocketOnMessageListenerResult);

typedef TCPSocketOnMessageCallback = void Function(
    TCPSocketOnMessageListenerResult);

typedef TakePhotoCompleteCallback = void Function(GeneralCallbackResult);

typedef TakePhotoFailCallback = void Function(GeneralCallbackResult);

typedef TakePhotoSuccessCallback = void Function(
    TakePhotoSuccessCallbackResult);

typedef ToScreenLocationCompleteCallback = void Function(GeneralCallbackResult);

typedef ToScreenLocationFailCallback = void Function(GeneralCallbackResult);

typedef ToScreenLocationSuccessCallback = void Function(
    ToScreenLocationSuccessCallbackResult);

typedef ToggleTorchCompleteCallback = void Function(GeneralCallbackResult);

typedef ToggleTorchFailCallback = void Function(GeneralCallbackResult);

typedef ToggleTorchSuccessCallback = void Function(GeneralCallbackResult);

typedef TransceiveCompleteCallback = void Function(Nfcrwerror);

typedef TransceiveFailCallback = void Function(Nfcrwerror);

typedef TransceiveSuccessCallback = void Function(
    TransceiveSuccessCallbackResult);

typedef TranslateMarkerCompleteCallback = void Function(GeneralCallbackResult);

typedef TranslateMarkerFailCallback = void Function(GeneralCallbackResult);

typedef TranslateMarkerSuccessCallback = void Function(GeneralCallbackResult);

typedef TruncateCompleteCallback = void Function(GeneralCallbackResult);

typedef TruncateFailCallback = void Function(TruncateFailCallbackResult);

typedef TruncateSuccessCallback = void Function(GeneralCallbackResult);

typedef UDPSocketOffCloseCallback = void Function(GeneralCallbackResult);

typedef UDPSocketOffErrorCallback = void Function(GeneralCallbackResult);

typedef UDPSocketOffMessageCallback = void Function(
    UDPSocketOnMessageListenerResult);

typedef UDPSocketOnCloseCallback = void Function(GeneralCallbackResult);

typedef UDPSocketOnErrorCallback = void Function(GeneralCallbackResult);

typedef UDPSocketOnMessageCallback = void Function(
    UDPSocketOnMessageListenerResult);

typedef UndoCompleteCallback = void Function(GeneralCallbackResult);

typedef UndoFailCallback = void Function(GeneralCallbackResult);

typedef UndoSuccessCallback = void Function(GeneralCallbackResult);

typedef UnlinkCompleteCallback = void Function(GeneralCallbackResult);

typedef UnlinkFailCallback = void Function(UnlinkFailCallbackResult);

typedef UnlinkSuccessCallback = void Function(GeneralCallbackResult);

typedef UnzipCompleteCallback = void Function(GeneralCallbackResult);

typedef UnzipFailCallback = void Function(UnzipFailCallbackResult);

typedef UnzipSuccessCallback = void Function(GeneralCallbackResult);

typedef UpdateGroundOverlayCompleteCallback = void Function(
    GeneralCallbackResult);

typedef UpdateGroundOverlayFailCallback = void Function(GeneralCallbackResult);

typedef UpdateGroundOverlaySuccessCallback = void Function(
    GeneralCallbackResult);

typedef UpdateShareMenuCompleteCallback = void Function(GeneralCallbackResult);

typedef UpdateShareMenuFailCallback = void Function(GeneralCallbackResult);

typedef UpdateShareMenuSuccessCallback = void Function(GeneralCallbackResult);

typedef UpdateVoIPChatMuteConfigCompleteCallback = void Function(
    GeneralCallbackResult);

typedef UpdateVoIPChatMuteConfigFailCallback = void Function(
    GeneralCallbackResult);

typedef UpdateVoIPChatMuteConfigSuccessCallback = void Function(
    GeneralCallbackResult);

typedef UpdateWeChatAppCompleteCallback = void Function(GeneralCallbackResult);

typedef UpdateWeChatAppFailCallback = void Function(GeneralCallbackResult);

typedef UpdateWeChatAppSuccessCallback = void Function(GeneralCallbackResult);

typedef UploadFileCompleteCallback = void Function(GeneralCallbackResult);

typedef UploadFileFailCallback = void Function(GeneralCallbackResult);

typedef UploadFileSuccessCallback = void Function(
    UploadFileSuccessCallbackResult);

typedef UploadTaskOffProgressUpdateCallback = void Function(
    UploadTaskOnProgressUpdateListenerResult);

typedef UploadTaskOnProgressUpdateCallback = void Function(
    UploadTaskOnProgressUpdateListenerResult);

typedef VKSessionStartCallback = void Function(dynamic);

typedef VibrateLongCompleteCallback = void Function(GeneralCallbackResult);

typedef VibrateLongFailCallback = void Function(GeneralCallbackResult);

typedef VibrateLongSuccessCallback = void Function(GeneralCallbackResult);

typedef VibrateShortCompleteCallback = void Function(GeneralCallbackResult);

typedef VibrateShortFailCallback = void Function(
    VibrateShortFailCallbackResult);

typedef VibrateShortSuccessCallback = void Function(GeneralCallbackResult);

typedef WorkerOnMessageCallback = void Function(WorkerOnMessageListenerResult);

typedef WriteBLECharacteristicValueCompleteCallback = void Function(
    BluetoothError);

typedef WriteBLECharacteristicValueFailCallback = void Function(BluetoothError);

typedef WriteBLECharacteristicValueSuccessCallback = void Function(
    BluetoothError);

typedef WriteCharacteristicValueCompleteCallback = void Function(
    GeneralCallbackResult);

typedef WriteCharacteristicValueFailCallback = void Function(
    GeneralCallbackResult);

typedef WriteCharacteristicValueSuccessCallback = void Function(
    GeneralCallbackResult);

typedef WriteCompleteCallback = void Function(GeneralCallbackResult);

typedef WriteFailCallback = void Function(WriteFailCallbackResult);

typedef WriteFileCompleteCallback = void Function(GeneralCallbackResult);

typedef WriteFileFailCallback = void Function(WriteFileFailCallbackResult);

typedef WriteFileSuccessCallback = void Function(GeneralCallbackResult);

typedef WriteNdefMessageCompleteCallback = void Function(Nfcrwerror);

typedef WriteNdefMessageFailCallback = void Function(Nfcrwerror);

typedef WriteNdefMessageSuccessCallback = void Function(Nfcrwerror);

typedef WriteSuccessCallback = void Function(WriteSuccessCallbackResult);

typedef WxOffErrorCallback = void Function(GeneralCallbackResult);

typedef WxOnErrorCallback = void Function(String);

typedef WxStartRecordSuccessCallback = void Function(
    StartRecordSuccessCallbackResult);

typedef WxStopRecordSuccessCallback = void Function(GeneralCallbackResult);

class UniversalMiniProgramApi {
  static Wx get uni {
    return Wx($$context$$: mpjs.context['uni']);
  }
}
